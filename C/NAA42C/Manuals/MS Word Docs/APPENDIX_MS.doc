{\rtf1\ansi \deflang1033\deff0{\fonttbl
{\f0\fnil \fcharset0 \fprq2 Dutch 801;}{\f1\fnil \fcharset0 \fprq2 Monospace 821;}{\f2\fnil \fcharset0 \fprq2 Swiss 721;}
{\f3\fnil \fcharset0 \fprq2 WP MathB;}{\f4\fnil \fcharset2 \fprq2 WP MathExtendedA;}{\f5\fnil \fcharset2 \fprq2 WP BoxDrawing;}}{\colortbl
\red0\green0\blue0;}
{\stylesheet{\fs20 \snext0 Normal;}
{\*\ds1 4_Body_Text1;}
{\*\cs2 \additive\b\f2\fs18 6_Footer;}
{\*\cs3 \additive\f2\fs40 1_Chapter;}
{\*\cs4 \additive\f1\fs18 4_Body_Text2;}
{\*\cs5 \additive\fs22 5_Body_Text;}
{\*\cs6 \additive\f2\fs32 2_Section;}
{\*\cs7 \additive\f1\fs23 7_Code;}
{\*\cs8 \additive\b\f2\fs26 3_Sub-Sectio;}
}\margl1080\margr1080\margt900\margb900\ftnbj\ftnrestart\aftnnar \sectd \ds1\sbknone\footery1380\endnhere\titlepg\facingp 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 A-\chpgn   C Source Code for 041.C\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab C Source Code for 041.C  A-\chpgn \par }}
{\footerf \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab C Source Code for 041.C  A-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1\pnindent2880\pnhang{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1\pnindent2880\pnhang{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1\pnindent2880\pnhang{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1\pnindent2880\pnhang{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1\pnindent2880\pnhang{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1\pnindent2880\pnhang{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1\pnindent2880\pnhang{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1\pnindent2880\pnhang{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1\pnindent2880\pnhang}

\pard \fi-2880\li2880\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs3\f2\fs40 {\tc {}{\plain \*\cs3\b\f2\fs40 Appendix A:\tab C Source Code for 041.C}}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}\sect \sectd \ds1\sbknone\marglsxn1980\margrsxn1440\footery1380\linemod1\linerestart\linecont\linex-720\endnhere\titlepg\facingp 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 A-\chpgn   C Source Code for 041.C\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab C Source Code for 041.C  A-\chpgn \par }}
{\footerf \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab C Source Code for 041.C  A-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs4\f1\fs18 /******************************************************************************\par
}{\plain \*\cs4\f1\fs18 \tab \tab Composite Simpson's Rule \_ Algorithm 4.1\par
}{\plain \*\cs4\f1\fs18 *******************************************************************************\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18                                 {\f4 \'21}b\par
}{\plain \*\cs4\f1\fs18 To approximate the integral I = {\f5 \'2a}  f(x) dx:\par
}{\plain \*\cs4\f1\fs18                                 {\f4 \'22}a\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 INPUT endpoints a, b; even positive integer n; the function f().\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 OUTPUT approximation XI to I.\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 NOTE: Listed as Simpson's Composite Rule in 3rd edition of the text.\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 *******************************************************************************\par
}{\plain \*\cs4\f1\fs18 *\tab Written by:  Harold A. Toomey, CARE\_FREE SOFTWARE, 3Q 1991, v4.2      *\par
}{\plain \*\cs4\f1\fs18 ******************************************************************************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*\par
}{\plain \*\cs4\f1\fs18 **  Set the EQ_EVAL flag to TRUE in "naautil.c" to use the Equation Evaluator.\par
}{\plain \*\cs4\f1\fs18 */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #include "naautil.c"\tab \tab /* Numerical Analysis Algorithms Utilities. */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 char *outfile   = "041.out";\tab /* Default name of the output file.         */\par
}{\plain \*\cs4\f1\fs18 char *eq_text_f = "f(x) = sin(x)";\tab /* Needs updating  $        */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* f(x) \_ Function to evaluate, f(x).  Needs updating $.                     */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 double f(x)\par
}{\plain \*\cs4\f1\fs18 double x;\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   if (eqeval)\par
}{\plain \*\cs4\f1\fs18     return (eval_eq(x));\tab /* Use the Equation Evaluator  */\par
}{\plain \*\cs4\f1\fs18   else\par
}{\plain \*\cs4\f1\fs18     return (sin(x));\tab \tab /* Use the default function.   */\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 main()\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   double a, b, h, X, XI, XI0, XI1, XI2, f();\par
}{\plain \*\cs4\f1\fs18   int i, n;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /**********\par
}{\plain \*\cs4\f1\fs18    * INPUTS *\par
}{\plain \*\cs4\f1\fs18    **********/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   NAA_do_first(outfile);\tab /* NAA initialization procedure. */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   printf2("Composite Simpson's Rule \_ Algorithm 4.1\\n\\n");\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   if (eqeval)\par
}{\plain \*\cs4\f1\fs18     printf2("f(x) = %s", tmpstr);\tab /* Print the Equation Evaluator text */\par
}{\plain \*\cs4\f1\fs18   else\par
}{\plain \*\cs4\f1\fs18     printf2("%s", eq_text_f);\tab \tab /* Print the default equation text */\par
}{\plain \*\cs4\f1\fs18   printf("\\n\\n");\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   printf("Enter endpoint a: ");\par
}{\plain \*\cs4\f1\fs18   scanf("%lf", &a);\par
}{\plain \*\cs4\f1\fs18   printf("Enter endpoint b: ");\par
}{\plain \*\cs4\f1\fs18   scanf("%lf", &b);\par
}{\plain \*\cs4\f1\fs18   fprintf(file_id, " from %lg to %lg.\\n\\n", a, b);\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   do \{\par
}{\plain \*\cs4\f1\fs18     printf("Enter even number of intervals on [a,b], n: ");\par
}{\plain \*\cs4\f1\fs18     scanf("%d", &n);\par
}{\plain \*\cs4\f1\fs18     if ((n <= 0) || (n % 2 != 0))\par
}{\plain \*\cs4\f1\fs18       printf("ERROR \_ n must be even and positive.\\n");\par
}{\plain \*\cs4\f1\fs18   \} while ((n <= 0) || (n % 2 != 0));\par
}{\plain \*\cs4\f1\fs18   fprintf(file_id, "n = %d intervals on [a,b].\\n", n);\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /*************\par
}{\plain \*\cs4\f1\fs18    * ALGORITHM *\par
}{\plain \*\cs4\f1\fs18    *************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* STEP #1 */\par
}{\plain \*\cs4\f1\fs18   h = (b \_ a)/n;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* STEP #2 */\par
}{\plain \*\cs4\f1\fs18   XI0 = f(a) + f(b);\par
}{\plain \*\cs4\f1\fs18   XI1 = 0.0;\tab \tab \tab /* Summation of f(x(2i\_1)). */\par
}{\plain \*\cs4\f1\fs18   XI2 = 0.0;\tab \tab \tab /* Summation of f(x(2i)).   */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* STEP #3 */\par
}{\plain \*\cs4\f1\fs18   for (i=1;i<n;i++) \{\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18     /* STEP #4 */\par
}{\plain \*\cs4\f1\fs18     X = a + i*h;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18     /* STEP #5 */\par
}{\plain \*\cs4\f1\fs18     if (i % 2 == 0)\par
}{\plain \*\cs4\f1\fs18       XI2 += f(X);\tab \tab /* For even i. */\par
}{\plain \*\cs4\f1\fs18     else\par
}{\plain \*\cs4\f1\fs18       XI1 += f(X);\tab \tab /* For odd i.  */\par
}{\plain \*\cs4\f1\fs18   \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* STEP #6 */\par
}{\plain \*\cs4\f1\fs18   XI = h*(XI0 + 2.0*XI2 + 4.0*XI1) / 3.0;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /***********\par
}{\plain \*\cs4\f1\fs18    * OUTPUTS *\par
}{\plain \*\cs4\f1\fs18    ***********/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* STEP #7 */\par
}{\plain \*\cs4\f1\fs18   printf2("Interval number h = %lg\\n\\n", h);\par
}{\plain \*\cs4\f1\fs18   printf2("     {\f4 \'21}%lg\\n", b);\par
}{\plain \*\cs4\f1\fs18   printf2("XI = {\f5 \'2a}  f(x) dx = %.11lg\\n", XI);\par
}{\plain \*\cs4\f1\fs18   printf2("     {\f4 \'22}%lg\\n\\n", a);\par
}{\plain \*\cs4\f1\fs18   printf2("Required %d functional evaluations.\\n", n+1);\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   NAA_do_last(outfile);\tab \tab /* NAA finish\_up procedure. */\par
}{\plain \*\cs4\f1\fs18 \}  \tab \tab \tab \tab /* STOP */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /*\tab Copyright (C) 1988\_1991, Harold A. Toomey, All Rights Reserved.      */\par
}\sect \sectd \ds1\sbknone\footery1380\linemod1\endnhere\titlepg\facingp 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 A-\chpgn   C Source Code for 041.C\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab C Source Code for 041.C  A-\chpgn \par }}
{\footerf \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab C Source Code for 041.C  A-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs4\f1\fs18 /*****************************************************************************/}{\plain \f1\fs18 }{\plain \f1\fs18 \par
}\pard\page 
\sect \sectd \ds1\sbknone\pgnrestart\pgndec\pgnx0\pgny720\footery1380\linemod1\endnhere\facingp 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 B-\chpgn   C Source Code for NAAUTIL.C\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab C Source Code for NAAUTIL.C  B-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1\pnindent2880\pnhang{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1\pnindent2880\pnhang{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1\pnindent2880\pnhang{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1\pnindent2880\pnhang{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1\pnindent2880\pnhang{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1\pnindent2880\pnhang{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1\pnindent2880\pnhang{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1\pnindent2880\pnhang{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1\pnindent2880\pnhang}

\pard \fi-2880\li2880\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs3\f2\fs40 {\tc {}{\plain \*\cs3\b\f2\fs40 Appendix B:\tab C Source Code for NAAUTIL.C}}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}\sect \sectd \ds1\sbknone\marglsxn1980\margrsxn1440\footery1380\linemod1\linerestart\linecont\linex-720\endnhere\facingp 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 B-\chpgn   C Source Code for NAAUTIL.C\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab C Source Code for NAAUTIL.C  B-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs4\f1\fs18 /******************************** NAAUTIL.C ***********************************\par
}{\plain \*\cs4\f1\fs18 \tab      "Numerical Analysis Algorithms in C" Utilities I v4.2\par
}{\plain \*\cs4\f1\fs18 ******************************************************************************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*\par
}{\plain \*\cs4\f1\fs18 **  This source file contains many useful procedures, some being used in all\par
}{\plain \*\cs4\f1\fs18 **  of the "Numerical Analysis Algorithms in C" programs.\par
}{\plain \*\cs4\f1\fs18 **\par
}{\plain \*\cs4\f1\fs18 **  At least three of the #defines are needed for all of the supporting ".c"\par
}{\plain \*\cs4\f1\fs18 **  programs.  These #defines are: TRUE, FALSE, and ANSI.  The supporting\par
}{\plain \*\cs4\f1\fs18 **  ".c" files are:\par
}{\plain \*\cs4\f1\fs18 **\par
}{\plain \*\cs4\f1\fs18 **\tab naautil.c\tab complex.c\tab round.c\par
}{\plain \*\cs4\f1\fs18 **\tab naautil2.c\tab eqeval.c\tab trunc.c\par
}{\plain \*\cs4\f1\fs18 **\tab naautil3.c\tab gaussj.c\par
}{\plain \*\cs4\f1\fs18 **\par
}{\plain \*\cs4\f1\fs18 **  Many of these functions where derived from the book "Numerical Recipes\par
}{\plain \*\cs4\f1\fs18 **  in C".\par
}{\plain \*\cs4\f1\fs18 **\par
}{\plain \*\cs4\f1\fs18 **  "Naautil.c" contains the most often used routines.  Most are dynamic\par
}{\plain \*\cs4\f1\fs18 **  memory allocation routines used to create very flexible vectors and\par
}{\plain \*\cs4\f1\fs18 **  matrices.\par
}{\plain \*\cs4\f1\fs18 **\par
}{\plain \*\cs4\f1\fs18 **  "Naautil2.c" contains less frequently used dynamic memory allocation\par
}{\plain \*\cs4\f1\fs18 **  routines to create very flexible vectors, matrices, and cubes.\par
}{\plain \*\cs4\f1\fs18 **  Currently used only by: "081.c" and "125.c"\par
}{\plain \*\cs4\f1\fs18 **\par
}{\plain \*\cs4\f1\fs18 **  "Naautil3.c" contains routines for complex vectors, matrices, and cubes.\par
}{\plain \*\cs4\f1\fs18 **  Currently used only by: "027.c", "028a.c" and "081.c"\par
}{\plain \*\cs4\f1\fs18 **\par
}{\plain \*\cs4\f1\fs18 **  This file should be included (only once!) whenever the following\par
}{\plain \*\cs4\f1\fs18 **  procedures or functions are used:\par
}{\plain \*\cs4\f1\fs18 **\par
}{\plain \*\cs4\f1\fs18 **    Return    Procedure\par
}{\plain \*\cs4\f1\fs18 **    Type      Name             Description\par
}{\plain \*\cs4\f1\fs18 **    \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs4\f1\fs18 **    void      naaerror      \_  Numerical Analysis Algorithms Error Handler\par
}{\plain \*\cs4\f1\fs18 **    int       printf2       \_  Like printf() but writes to a file too\par
}{\plain \*\cs4\f1\fs18 **    void      NAA_do_first  \_  NAA initialization procedure\par
}{\plain \*\cs4\f1\fs18 **    void      NAA_do_last   \_  NAA final procedure\par
}{\plain \*\cs4\f1\fs18 **\par
}{\plain \*\cs4\f1\fs18 **    int*           ivector  \_  Allocates a 1\_D array of integers\par
}{\plain \*\cs4\f1\fs18 **    float*         vector   \_  Allocates a 1\_D array of floats\par
}{\plain \*\cs4\f1\fs18 **    double*        dvector  \_  Allocates a 1\_D array of doubles\par
}{\plain \*\cs4\f1\fs18 **    long double*   ldvector \_  Allocates a 1\_D array of long doubles\par
}{\plain \*\cs4\f1\fs18 **    fcomplex*      cvector  \_  Allocates a 1\_D array of fcomplex\par
}{\plain \*\cs4\f1\fs18 **\par
}{\plain \*\cs4\f1\fs18 **    int**          imatrix  \_  Allocates a 2\_D array of integers\par
}{\plain \*\cs4\f1\fs18 **    float**        matrix   \_  Allocates a 2\_D array of floats\par
}{\plain \*\cs4\f1\fs18 **    double**       dmatrix  \_  Allocates a 2\_D array of doubles\par
}{\plain \*\cs4\f1\fs18 **    long double**  ldmatrix \_  Allocates a 2\_D array of long doubles\par
}{\plain \*\cs4\f1\fs18 **    fcomplex**     cmatrix  \_  Allocates a 2\_D array of fcomplex\par
}{\plain \*\cs4\f1\fs18 **\par
}{\plain \*\cs4\f1\fs18 **    int***         icube    \_  Allocates a 3\_D array of integers\par
}{\plain \*\cs4\f1\fs18 **    float***       cube     \_  Allocates a 3\_D array of floats\par
}{\plain \*\cs4\f1\fs18 **    double***      dcube    \_  Allocates a 3\_D array of doubles\par
}{\plain \*\cs4\f1\fs18 **    long double*** ldcube   \_  Allocates a 3\_D array of long doubles\par
}{\plain \*\cs4\f1\fs18 **    fcomplex***    ccube    \_  Allocates a 3\_D array of fcomplex\par
}{\plain \*\cs4\f1\fs18 **\par
}{\plain \*\cs4\f1\fs18 **    void      free_ivector  \_  Frees the allocated 1\_D array memory\par
}{\plain \*\cs4\f1\fs18 **    void      free_vector   \_  Frees the allocated 1\_D array memory\par
}{\plain \*\cs4\f1\fs18 **    void      free_dvector  \_  Frees the allocated 1\_D array memory\par
}{\plain \*\cs4\f1\fs18 **    void      free_ldvector \_  Frees the allocated 1\_D array memory\par
}{\plain \*\cs4\f1\fs18 **    void      free_cvector  \_  Frees the allocated 1\_D array memory\par
}{\plain \*\cs4\f1\fs18 **\par
}{\plain \*\cs4\f1\fs18 **    void      free_imatrix  \_  Frees the allocated 2\_D array memory\par
}{\plain \*\cs4\f1\fs18 **    void      free_matrix   \_  Frees the allocated 2\_D array memory\par
}{\plain \*\cs4\f1\fs18 **    void      free_dmatrix  \_  Frees the allocated 2\_D array memory\par
}{\plain \*\cs4\f1\fs18 **    void      free_ldmatrix \_  Frees the allocated 2\_D array memory\par
}{\plain \*\cs4\f1\fs18 **    void      free_cmatrix  \_  Frees the allocated 2\_D array memory\par
}{\plain \*\cs4\f1\fs18 **\par
}{\plain \*\cs4\f1\fs18 **    void      free_icube    \_  Frees the allocated 3\_D array memory\par
}{\plain \*\cs4\f1\fs18 **    void      free_cube     \_  Frees the allocated 3\_D array memory\par
}{\plain \*\cs4\f1\fs18 **    void      free_dcube    \_  Frees the allocated 3\_D array memory\par
}{\plain \*\cs4\f1\fs18 **    void      free_ldcube   \_  Frees the allocated 3\_D array memory\par
}{\plain \*\cs4\f1\fs18 **    void      free_ccube    \_  Frees the allocated 3\_D array memory\par
}{\plain \*\cs4\f1\fs18 */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*********************/\par
}{\plain \*\cs4\f1\fs18 /* DEFINES AND FLAGS */\par
}{\plain \*\cs4\f1\fs18 /*********************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*\par
}{\plain \*\cs4\f1\fs18 **  The FLAGS below allow the users more flexibility when compiling and\par
}{\plain \*\cs4\f1\fs18 **  running these Numerical Analysis Algorithms.  They can also be used to\par
}{\plain \*\cs4\f1\fs18 **  make these programs more portable to different computer systems.\par
}{\plain \*\cs4\f1\fs18 */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #define\tab PI\tab 3.14159265358979323846264338327950288419716939937510582097\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #ifndef FALSE\par
}{\plain \*\cs4\f1\fs18 #define FALSE\tab \tab 0\tab /* Define FALSE if not already defined.      */\par
}{\plain \*\cs4\f1\fs18 #endif\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #ifndef TRUE\par
}{\plain \*\cs4\f1\fs18 #define TRUE\tab \tab !FALSE\tab /* Define TRUE if not already defined.       */\par
}{\plain \*\cs4\f1\fs18 #endif\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #define\tab ANSI\tab \tab TRUE\tab /* Set to TRUE if using an ANSI C standard   */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* compliant compiler (default).             */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* Set to FALSE if using an older C compiler */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* (Kernighan & Ritchie Style C).            */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #define\tab ANSI_FUNCT\tab FALSE\tab /* Set to TRUE if using ANSI's style for     */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* declaring functions.  Set to FALSE if     */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* using K&R style functions (default).      */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* (Set to TRUE if using THINK C 4.0 on a    */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* Macintosh.)                               */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #define TITLE_PROMPT\tab TRUE\tab /* Set to TRUE if you want to be prompted    */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* for an optional title at the start of     */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* each program (default).                   */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* Set to FALSE to disable the title prompt. */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #define\tab FILE_SAVE\tab TRUE\tab /* Set to TRUE to save output to a file      */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* (default).                                */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* Set to FALSE to create no output file.    */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #define EQ_EVAL\tab \tab FALSE\tab /* Set to TRUE to be prompted for the use of */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* the Equation Evaluator at run\_time.       */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* Set to FALSE if entering f(x) inside the  */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* C source code and re\_compiling it.        */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* (default)                                 */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #define\tab NAAUTIL_OBJ\tab FALSE\tab /* Set to TRUE if using "naautil.c" as a     */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* pre\_compiled object code file to be       */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* linked to at algorithm compile time.      */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* Set to FALSE if using "naautil.c" as an   */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* un\_compiled include file (default).       */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /********************** Computer System Specific Flags ***********************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #define\tab OLD_UNIX_OS\tab FALSE\tab /* TRUE if running on older UNIX systems.    */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #define NO_LONG_DOUBLES\tab TRUE\tab /* TRUE if your C compiler does not have     */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* the "long double" type.                   */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* (Set to TRUE for most VAX C compilers)    */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #define\tab MAX_LINE_SIZE 130\tab /* Largest input line size accepted.      */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* Set to 130 for MS\_DOS computers.       */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************\par
}{\plain \*\cs4\f1\fs18  * INCLUDE FILES *\par
}{\plain \*\cs4\f1\fs18  *****************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #include <math.h>\tab \tab /* For math function prototypes.             */\par
}{\plain \*\cs4\f1\fs18 #include <stdio.h>\tab \tab /* For scanf(), printf() and fprintf().      */\par
}{\plain \*\cs4\f1\fs18 #include <stdlib.h>\tab \tab /* Needed for calloc(), free() and rand().   */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #if OLD_UNIX_OS == TRUE\tab \tab /* For older UNIX C compilers       */\par
}{\plain \*\cs4\f1\fs18 #include <varargs.h>\tab \tab /* For vfprintf() used in printf2() */\par
}{\plain \*\cs4\f1\fs18 #else\par
}{\plain \*\cs4\f1\fs18 #include <stdarg.h>\tab \tab /* For vfprintf() used in printf2() */\par
}{\plain \*\cs4\f1\fs18 #endif\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*\par
}{\plain \*\cs4\f1\fs18 **  NOTE: Including <ctype.h> for tolower() may causes errors in Microsoft C\par
}{\plain \*\cs4\f1\fs18 **  5.0 for IBM PCs where tolower() is defined in the <stdlib.h> header file\par
}{\plain \*\cs4\f1\fs18 **  as well.\par
}{\plain \*\cs4\f1\fs18 */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /********************\par
}{\plain \*\cs4\f1\fs18  * GLOBAL VARIABLES *\par
}{\plain \*\cs4\f1\fs18  ********************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #if NAAUTIL_OBJ == FALSE\tab /* If "naautil.c" is not pre\_compiled.    */\par
}{\plain \*\cs4\f1\fs18   FILE *file_id;\tab \tab /*   Identifies the output file.          */\par
}{\plain \*\cs4\f1\fs18   char  tmpstr[MAX_LINE_SIZE];\tab /*   A temporary string.                  */\par
}{\plain \*\cs4\f1\fs18   int   eqeval = FALSE;\tab \tab /*   Set if using the Equation Evaluator. */\par
}{\plain \*\cs4\f1\fs18 #else\tab \tab \tab \tab /* If "naautil.c" is pre\_compiled.        */\par
}{\plain \*\cs4\f1\fs18   extern FILE *file_id;\par
}{\plain \*\cs4\f1\fs18   extern char  tmpstr[MAX_LINE_SIZE];\par
}{\plain \*\cs4\f1\fs18   extern int   eqeval;\par
}{\plain \*\cs4\f1\fs18 #endif\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /***********************\par
}{\plain \*\cs4\f1\fs18  * FUNCTION PROTOTYPES *\par
}{\plain \*\cs4\f1\fs18  ***********************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #if ANSI == TRUE\tab /* ANSI STANDARD PROTOTYPING (Post\_December 14, 1989)*/\par
}{\plain \*\cs4\f1\fs18   void           naaerror      (char error_text[]);\par
}{\plain \*\cs4\f1\fs18   int            printf2       (char *format, ...);\par
}{\plain \*\cs4\f1\fs18   void           NAA_do_first  (char *outfile);\par
}{\plain \*\cs4\f1\fs18   void           NAA_do_last   (char *outfile);\par
}{\plain \*\cs4\f1\fs18   double**       dmatrix       (int a, int b, int c, int d);\par
}{\plain \*\cs4\f1\fs18   float**        matrix        (int a, int b, int c, int d);\par
}{\plain \*\cs4\f1\fs18   double*        dvector       (int a, int b);\par
}{\plain \*\cs4\f1\fs18   float*         vector        (int a, int b);\par
}{\plain \*\cs4\f1\fs18   int*           ivector       (int a, int b);\par
}{\plain \*\cs4\f1\fs18   void           free_dmatrix  (double **m, int a, int b, int c, int d);\par
}{\plain \*\cs4\f1\fs18   void           free_matrix   (float **m, int a, int b, int c, int d);\par
}{\plain \*\cs4\f1\fs18   void           free_dvector  (double *v, int a, int b);\par
}{\plain \*\cs4\f1\fs18   void           free_vector   (float *v, int a, int b);\par
}{\plain \*\cs4\f1\fs18   void           free_ivector  (int *v, int a, int b);\par
}{\plain \*\cs4\f1\fs18   double         eval_eq       (double x, ...);\par
}{\plain \*\cs4\f1\fs18 #else  /* ANSI */\tab /* OLDER STYLE PROTOTYPING (Pre\_December 14, 1989) */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab /* For compatibility with older C compilers.       */\par
}{\plain \*\cs4\f1\fs18   void           naaerror();\par
}{\plain \*\cs4\f1\fs18   int            printf2();\par
}{\plain \*\cs4\f1\fs18   void           NAA_do_first();\par
}{\plain \*\cs4\f1\fs18   void           NAA_do_last();\par
}{\plain \*\cs4\f1\fs18   double**       dmatrix();\par
}{\plain \*\cs4\f1\fs18   float**        matrix();\par
}{\plain \*\cs4\f1\fs18   double*        dvector();\par
}{\plain \*\cs4\f1\fs18   float*         vector();\par
}{\plain \*\cs4\f1\fs18   int*           ivector();\par
}{\plain \*\cs4\f1\fs18   void           free_dmatrix();\par
}{\plain \*\cs4\f1\fs18   void           free_matrix();\par
}{\plain \*\cs4\f1\fs18   void           free_dvector();\par
}{\plain \*\cs4\f1\fs18   void           free_vector();\par
}{\plain \*\cs4\f1\fs18   void           free_ivector();\par
}{\plain \*\cs4\f1\fs18   double         eval_eq();\par
}{\plain \*\cs4\f1\fs18 #endif\tab /* ANSI */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #if NAAUTIL_OBJ == FALSE\tab /* Include the routines below only if the */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* NAAUTIL_OBJ flag is set to FALSE.      */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /****************************\par
}{\plain \*\cs4\f1\fs18  * EQUATION EVALUATOR LOGIC *\par
}{\plain \*\cs4\f1\fs18  ****************************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #if EQ_EVAL == TRUE\tab \tab /* Needed for the Equation Evaluator's     */\par
}{\plain \*\cs4\f1\fs18 #include "eqeval.c"\tab \tab /* defines, global variables and functions */\par
}{\plain \*\cs4\f1\fs18 #else  /* EQ_EVAL */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #if ANSI == TRUE\par
}{\plain \*\cs4\f1\fs18 double eval_eq (double x, ...)\tab /* May need this "dummy" procedure */\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   return 0.0;\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 #else\par
}{\plain \*\cs4\f1\fs18 double eval_eq (x, ...)\tab \tab /* May need this "dummy" procedure */\par
}{\plain \*\cs4\f1\fs18 double x;\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   return 0.0;\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 #endif  /* ANSI */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #endif  /* EQ_EVAL */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /***************\par
}{\plain \*\cs4\f1\fs18  * SUBROUTINES *\par
}{\plain \*\cs4\f1\fs18  ***************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* naaerror() \_ Numerical Analysis Algorithms standard error handler.        */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 void naaerror(error_text)\par
}{\plain \*\cs4\f1\fs18 char error_text[];\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   /* Print error message to the screen.  (Standard error device) */\par
}{\plain \*\cs4\f1\fs18   fprintf(stderr, "\\n\\"Numerical Analysis Algorithms in C\\" run\_time");\par
}{\plain \*\cs4\f1\fs18   fprintf(stderr, " error...\\n%s\\n", error_text);\par
}{\plain \*\cs4\f1\fs18   fprintf(stderr, "...now exiting to system...\\n");\par
}{\plain \*\cs4\f1\fs18   exit(\_1);\tab \tab \tab /* Exit the program. */\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #if FILE_SAVE == FALSE\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* Since variable arguments are so terribly non\_portable, the below two      */\par
}{\plain \*\cs4\f1\fs18 /* defines will allow the programs to work properly, but without the use of  */\par
}{\plain \*\cs4\f1\fs18 /* the file_save option (or variable argument lists).  They turn printf2()   */\par
}{\plain \*\cs4\f1\fs18 /* into tried\_and\_true printf() and they hide the usage of the file_id       */\par
}{\plain \*\cs4\f1\fs18 /* variable by turning "fprintf(file_id, ...)" into "sprintf(tmpstr, ...)".  */\par
}{\plain \*\cs4\f1\fs18 /* This causes a write to an ignored string instead of to a file.            */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #define printf2\tab \tab printf\tab \tab /* For printf2() */\par
}{\plain \*\cs4\f1\fs18 #define fprintf\tab \tab sprintf\tab \tab /* For fprintf(file_id, ...) */\par
}{\plain \*\cs4\f1\fs18 #define file_id\tab \tab tmpstr\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #else\tab /* FILE_SAVE == TRUE */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #if OLD_UNIX_OS == TRUE\tab \tab \tab /* For older UNIX C compilers */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* printf2() \_ Like printf() but prints to the outfile (file_id) also, if    */\par
}{\plain \*\cs4\f1\fs18 /*             the FILE_SAVE flag is set to TRUE.                            */\par
}{\plain \*\cs4\f1\fs18 /*             Use this printf2() instead of the below printf2() if your C   */\par
}{\plain \*\cs4\f1\fs18 /*             compiler does not have <stdarg.h>, but does have <varargs.h>. */\par
}{\plain \*\cs4\f1\fs18 /*                                                                           */\par
}{\plain \*\cs4\f1\fs18 /*             NOTE:  This code segment has not been tested.                 */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*\par
}{\plain \*\cs4\f1\fs18 **  printf2() \_ OPTION #1 \_\_ Uses #include <varargs.h>\par
}{\plain \*\cs4\f1\fs18 */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 int printf2(va_alist)\par
}{\plain \*\cs4\f1\fs18 va_list va_alist;\par
}{\plain \*\cs4\f1\fs18 /* or   (w/out a ';')\par
}{\plain \*\cs4\f1\fs18 va_decl\par
}{\plain \*\cs4\f1\fs18 */\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   va_list args;\par
}{\plain \*\cs4\f1\fs18   char *format;\par
}{\plain \*\cs4\f1\fs18   int length;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* Note the one less parameter in va_start() than in the below printf2() */\par
}{\plain \*\cs4\f1\fs18   va_start(args);\par
}{\plain \*\cs4\f1\fs18   format = va_arg(args, char*);\par
}{\plain \*\cs4\f1\fs18   length = vprintf(format, args);\par
}{\plain \*\cs4\f1\fs18   vfprintf(file_id, format, args);\par
}{\plain \*\cs4\f1\fs18   va_end(args);\par
}{\plain \*\cs4\f1\fs18   return length;\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #else  /* OLD_UNIX_OS */\tab \tab /* For ANSI C compilers */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* printf2() \_ Like printf() but prints to the outfile (file_id) also, if    */\par
}{\plain \*\cs4\f1\fs18 /*             the FILE_SAVE flag is set to TRUE.                            */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*\par
}{\plain \*\cs4\f1\fs18 **  printf2() \_ OPTION #2 \_\_ Uses #include <stdarg.h>\par
}{\plain \*\cs4\f1\fs18 */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #if ANSI_FUNCT == TRUE\par
}{\plain \*\cs4\f1\fs18 int printf2(char *format, ...)\par
}{\plain \*\cs4\f1\fs18 #else\par
}{\plain \*\cs4\f1\fs18 int printf2(format, ...)\par
}{\plain \*\cs4\f1\fs18 char *format;\par
}{\plain \*\cs4\f1\fs18 #endif\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   va_list args;\par
}{\plain \*\cs4\f1\fs18   int length;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   va_start(args, format);\par
}{\plain \*\cs4\f1\fs18   length = vprintf(format, args);\tab /* Prints to the screen (stdout).  */\par
}{\plain \*\cs4\f1\fs18   vfprintf(file_id, format, args);\tab /* Prints to a file (file_id).     */\par
}{\plain \*\cs4\f1\fs18   va_end(args);\par
}{\plain \*\cs4\f1\fs18   return length;\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #endif\tab /* OLD_UNIX_OS */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #endif\tab /* FILE_SAVE */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* NAA_do_first() \_ Opens the output file if the FILE_SAVE flag is set to    */\par
}{\plain \*\cs4\f1\fs18 /*                  TRUE, prints the NAA banner to the screen and output     */\par
}{\plain \*\cs4\f1\fs18 /*                  file, then prompts for an optional title and the         */\par
}{\plain \*\cs4\f1\fs18 /*                  optional Equation Evaluator.                             */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 void NAA_do_first(outfile)\par
}{\plain \*\cs4\f1\fs18 char *outfile;\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   int i;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #if FILE_SAVE == TRUE\tab \tab /* Set to TRUE if saving output to a file. */\par
}{\plain \*\cs4\f1\fs18   /* Open the default output file initialized in the main program. */\par
}{\plain \*\cs4\f1\fs18   if ((file_id = fopen(outfile, "w")) == NULL) \{\par
}{\plain \*\cs4\f1\fs18     sprintf(tmpstr, "Can not open the output file named \\"%s\\".", outfile);\par
}{\plain \*\cs4\f1\fs18     naaerror(tmpstr);\par
}{\plain \*\cs4\f1\fs18   \}\par
}{\plain \*\cs4\f1\fs18 #endif\tab /* FILE_SAVE */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* Print the Numerical Analysis Algorithms banner. */\par
}{\plain \*\cs4\f1\fs18   for (i=1;i<80;i++)  printf2("\_");\par
}{\plain \*\cs4\f1\fs18   printf2("\\n\\t\\t   \\"Numerical Analysis Algorithms in C\\" v4.2\\n");\par
}{\plain \*\cs4\f1\fs18   for (i=1;i<80;i++)  printf2("\_");\par
}{\plain \*\cs4\f1\fs18   printf2("\\n\\n");\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #if TITLE_PROMPT == TRUE\par
}{\plain \*\cs4\f1\fs18   /* Prompt for an optional title to be placed into the output file. */\par
}{\plain \*\cs4\f1\fs18   printf("Enter an optional title [ie \_ Set 2.1,  Problem 2 a) ].\\n\_\_\_\_> ");\par
}{\plain \*\cs4\f1\fs18   fgets(tmpstr, MAX_LINE_SIZE, stdin);\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* Print the optional title to the output file only if one was entered. */\par
}{\plain \*\cs4\f1\fs18   if (tmpstr[0] != '\\n')\par
}{\plain \*\cs4\f1\fs18     fprintf(file_id, "%s\\n", tmpstr);\par
}{\plain \*\cs4\f1\fs18   printf("\\n");\par
}{\plain \*\cs4\f1\fs18 #endif\tab /* TITLE_PROMPT */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #if EQ_EVAL == TRUE\par
}{\plain \*\cs4\f1\fs18   get_eq();\tab \tab /* Get the equation and store it into "tmpstr." */\par
}{\plain \*\cs4\f1\fs18   if (eqeval == TRUE)\tab /* eqeval is set by get_eq().  If set, then     */\par
}{\plain \*\cs4\f1\fs18     parse_eq();\tab \tab /* parse the equation into a usable structure.  */\par
}{\plain \*\cs4\f1\fs18 #endif\tab /* EQ_EVAL */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* NAA_do_last() \_ Closes the default output file and informs the user of    */\par
}{\plain \*\cs4\f1\fs18 /*                 its creation or update.                                   */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 void NAA_do_last(outfile)\par
}{\plain \*\cs4\f1\fs18 char *outfile;\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #if FILE_SAVE == TRUE\par
}{\plain \*\cs4\f1\fs18   if (fclose(file_id) == EOF) \{\par
}{\plain \*\cs4\f1\fs18     sprintf(tmpstr, "Can not close the output file named \\"%s\\".", outfile);\par
}{\plain \*\cs4\f1\fs18     naaerror(tmpstr);\par
}{\plain \*\cs4\f1\fs18   \}\par
}{\plain \*\cs4\f1\fs18   printf("\\nOutput saved into file \\"%s\\".\\n", outfile);\par
}{\plain \*\cs4\f1\fs18 #endif\tab /* FILE_SAVE */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* dmatrix() \_ Allocates a double matrix with range [a..b][c..d].            */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 double **dmatrix(a,b,c,d)\par
}{\plain \*\cs4\f1\fs18 int a,b,c,d;\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   int i;\par
}{\plain \*\cs4\f1\fs18   double **m;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* allocate pointers to rows. */\par
}{\plain \*\cs4\f1\fs18   m = (double **) calloc((unsigned) (b\_a+1), sizeof(double*));\par
}{\plain \*\cs4\f1\fs18   if (!m)\par
}{\plain \*\cs4\f1\fs18     naaerror("allocation failure 1 in dmatrix()");\par
}{\plain \*\cs4\f1\fs18   m \_= a;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* allocate rows and set pointers to them. */\par
}{\plain \*\cs4\f1\fs18   for (i=a;i<=b;i++) \{\par
}{\plain \*\cs4\f1\fs18     m[i] = (double *) calloc((unsigned) (d\_c+1), sizeof(double));\par
}{\plain \*\cs4\f1\fs18     if (!m[i])\par
}{\plain \*\cs4\f1\fs18       naaerror("allocation failure 2 in dmatrix()");\par
}{\plain \*\cs4\f1\fs18     m[i] \_= c;\par
}{\plain \*\cs4\f1\fs18   \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   return (m);\tab \tab /* return pointer to array of pointers to rows. */\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* matrix() \_ Allocates a float matrix with range [a..b][c..d].              */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 float **matrix(a,b,c,d)\par
}{\plain \*\cs4\f1\fs18 int a,b,c,d;\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   int i;\par
}{\plain \*\cs4\f1\fs18   float **m;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* allocate pointers to rows. */\par
}{\plain \*\cs4\f1\fs18   m = (float **) calloc((unsigned) (b\_a+1), sizeof(float*));\par
}{\plain \*\cs4\f1\fs18   if (!m)\par
}{\plain \*\cs4\f1\fs18     naaerror("allocation failure 1 in matrix()");\par
}{\plain \*\cs4\f1\fs18   m \_= a;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* allocate rows and set pointers to them. */\par
}{\plain \*\cs4\f1\fs18   for (i=a;i<=b;i++) \{\par
}{\plain \*\cs4\f1\fs18     m[i] = (float *) calloc((unsigned) (d\_c+1), sizeof(float));\par
}{\plain \*\cs4\f1\fs18     if (!m[i])\par
}{\plain \*\cs4\f1\fs18       naaerror("allocation failure 2 in matrix()");\par
}{\plain \*\cs4\f1\fs18     m[i] \_= c;\par
}{\plain \*\cs4\f1\fs18   \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   return (m);\tab \tab /* return pointer to array of pointers to rows. */\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* dvector() \_ Allocates a double vector with range [a..b].                  */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 double *dvector(a,b)\par
}{\plain \*\cs4\f1\fs18 int a,b;\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   double *v;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   v = (double *) calloc((unsigned) (b\_a+1), sizeof(double));\par
}{\plain \*\cs4\f1\fs18   if (!v)\par
}{\plain \*\cs4\f1\fs18     naaerror("allocation failure in dvector()");\par
}{\plain \*\cs4\f1\fs18   return (v\_a);\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* vector() \_ Allocates a float vector with range [a..b].                    */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 float *vector(a,b)\par
}{\plain \*\cs4\f1\fs18 int a,b;\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   float *v;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   v = (float *) calloc((unsigned) (b\_a+1), sizeof(float));\par
}{\plain \*\cs4\f1\fs18   if (!v)\par
}{\plain \*\cs4\f1\fs18     naaerror("allocation failure in vector()");\par
}{\plain \*\cs4\f1\fs18   return (v\_a);\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* ivector() \_ Allocates an integer vector with range [a..b].                */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 int *ivector(a,b)\par
}{\plain \*\cs4\f1\fs18 int a,b;\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   int *v;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   v = (int *) calloc((unsigned) (b\_a+1), sizeof(int));\par
}{\plain \*\cs4\f1\fs18   if (!v)\par
}{\plain \*\cs4\f1\fs18     naaerror("allocation failure in ivector()");\par
}{\plain \*\cs4\f1\fs18   return (v\_a);\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* free_dmatrix() \_ Frees a matrix allocated with dmatrix().                 */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 void free_dmatrix(m,a,b,c,d)\par
}{\plain \*\cs4\f1\fs18 double **m;\par
}{\plain \*\cs4\f1\fs18 int a,b,c,d;\tab \tab \tab /* (variable d is never used.) */\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   int i;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   for(i=b;i>=a;i\_\_)\par
}{\plain \*\cs4\f1\fs18     free((char *) (m[i]+c));\par
}{\plain \*\cs4\f1\fs18   free((char *) (m+a));\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* free_matrix() \_ Frees a matrix allocated with matrix().                   */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 void free_matrix(m,a,b,c,d)\par
}{\plain \*\cs4\f1\fs18 float **m;\par
}{\plain \*\cs4\f1\fs18 int a,b,c,d;\tab \tab \tab /* (variable d is never used.) */\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   int i;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   for(i=b;i>=a;i\_\_)\par
}{\plain \*\cs4\f1\fs18     free((char *) (m[i]+c));\par
}{\plain \*\cs4\f1\fs18   free((char *) (m+a));\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* free_dvector() \_ Frees a double vector allocated by dvector().            */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 void free_dvector(v,a,b)\par
}{\plain \*\cs4\f1\fs18 double *v;\par
}{\plain \*\cs4\f1\fs18 int a,b;\tab \tab \tab /* (variable b is never used.) */\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   free((char *) (v+a));\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* free_vector() \_ Frees a float vector allocated by vector().               */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 void free_vector(v,a,b)\par
}{\plain \*\cs4\f1\fs18 float *v;\par
}{\plain \*\cs4\f1\fs18 int a,b;\tab \tab \tab /* (variable b is never used.) */\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   free((char *) (v+a));\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* free_ivector() \_ Frees an integer vector allocated by ivector().          */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 void free_ivector(v,a,b)\par
}{\plain \*\cs4\f1\fs18 int *v,a,b;\tab \tab \tab /* (variable b is never used.) */\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   free((char *) (v+a));\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #endif\tab /* NAAUTIL_OBJ */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /******************************************************************************\par
}{\plain \*\cs4\f1\fs18 *\tab Written by:  Harold A. Toomey, CARE\_FREE SOFTWARE, 3Q 1991, v4.2      *\par
}{\plain \*\cs4\f1\fs18 *\tab Copyright (C) 1988\_1991, Harold A. Toomey, All Rights Reserved.       *\par
}\sect \sectd \ds1\sbknone\footery1380\linemod1\endnhere\facingp 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 B-\chpgn   C Source Code for NAAUTIL.C\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab C Source Code for NAAUTIL.C  B-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs4\f1\fs18 ******************************************************************************/}{\plain \f1\fs18 }{\plain \f1\fs18 \par
}\pard\page 
\sect \sectd \ds1\sbknone\pgnrestart\pgndec\pgnx0\pgny720\footery1380\linemod1\endnhere\facingp 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 C-\chpgn   Language Comparison Charts\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab Language Comparison Charts  C-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1\pnindent2880\pnhang{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1\pnindent2880\pnhang{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1\pnindent2880\pnhang{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1\pnindent2880\pnhang{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1\pnindent2880\pnhang{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1\pnindent2880\pnhang{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1\pnindent2880\pnhang{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1\pnindent2880\pnhang{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1\pnindent2880\pnhang}

\pard \fi-2880\li2880\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs3\f2\fs40 {\tc {}{\plain \*\cs3\b\f2\fs40 Appendix C:\tab Language Comparison Charts}}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs5\fs22 This section is intended to help those who have learned other languages other than C to transfer their knowledge 
easily into C.  The tables provided should help in understanding and modifying the equations and code as needed 
to perform numerical analysis.  These tables provide a simple comparison of items most likely to be used in 
numerical analysis programs.\par
}{\plain \*\cs5\fs22 \par
}{\plain \*\cs5\fs22 Complete working example programs are also provided to give clear examples of how programs look in each of 
the below languages. \par
}{\plain \*\cs5\fs22 \par
}{\plain \*\cs5\fs22 The languages compared to C include:\par
}{\plain \*\cs5\fs22 \par
}{\plain \*\cs5\ul\fs22 LANGUAGE\tab COMPILER\tab \tab \tab STANDARD}{\plain \*\cs5\fs22 \par
}{\plain \*\cs5\fs22 1. Ada\tab \tab Meridian Ada 4.1 \tab \tab ANSI/MIL\_STD\_1815A\par
}{\plain \*\cs5\fs22 2. BASIC\tab Microsoft GW\_BASIC 3.20\par
}{\plain \*\cs5\fs22 3. C\tab \tab Microsoft C 5.0\tab \tab \tab ANSI C\par
}{\plain \*\cs5\fs22 4. C++\tab \tab Borland Turbo C++ 2.0\tab \tab AT&T C++ v2.0\par
}{\plain \*\cs5\fs22 5. FORTRAN\~77\tab Microsoft FORTRAN\~77 3.3\tab ANSI FORTRAN\~77\par
}{\plain \*\cs5\fs22 6. Pascal\tab Borland Turbo PASCAL 3.01A\par
}{\plain \*\cs5\fs22 \par
}{\plain \*\cs5\fs22 (NOTE: '...' means one or more statements).}{\plain \f1\fs18 \par
}\pard\page 
\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs6\f2\fs32 }{\plain \*\cs6\b\f2\fs32 {\tc {C.1\tab C vs Ada} \tcl2}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs7\f1\fs23 Description:\tab \tab C\tab \tab \tab ADA\par
}{\plain \*\cs7\f1\fs23 ======================================================================\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 ARITHMETIC OPERATORS:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Addition\tab \tab +\tab \tab \tab +\par
}{\plain \*\cs7\f1\fs23 Subtraction\tab \tab \_\tab \tab \tab \_\par
}{\plain \*\cs7\f1\fs23 Multiplication\tab \tab *\tab \tab \tab *\par
}{\plain \*\cs7\f1\fs23 Division\tab \tab /\tab \tab \tab /\par
}{\plain \*\cs7\f1\fs23 Modulus (real)\tab \tab fmod(), modf()\tab \tab N/A\par
}{\plain \*\cs7\f1\fs23 Modulus (integer)\tab %\tab \tab \tab MOD, REM\par
}{\plain \*\cs7\f1\fs23 Exponentiation\tab \tab pow()\tab \tab \tab **\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 RELATIONAL OPERATORS:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Greater Than\tab \tab >\tab \tab \tab >\par
}{\plain \*\cs7\f1\fs23 Greater Then or Equal\tab >=\tab \tab \tab >=\par
}{\plain \*\cs7\f1\fs23 Less Than\tab \tab <\tab \tab \tab <\par
}{\plain \*\cs7\f1\fs23 Less Than or Equal\tab <=\tab \tab \tab <=\par
}{\plain \*\cs7\f1\fs23 Equal\tab \tab \tab ==\tab \tab \tab =\par
}{\plain \*\cs7\f1\fs23 Not Equal\tab \tab !=\tab \tab \tab /=\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 LOGICAL OPERATORS:\tab \tab \tab (With Bit_Ops; Use Bit_Ops;)\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 And\tab \tab \tab &&\tab \tab \tab AND\par
}{\plain \*\cs7\f1\fs23 Or\tab \tab \tab ||\tab \tab \tab OR\par
}{\plain \*\cs7\f1\fs23 Not\tab \tab \tab !\tab \tab \tab NOT\par
}{\plain \*\cs7\f1\fs23 Xor\tab \tab \tab N/A\tab \tab \tab XOR\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 ASSIGNMENT OPERATORS:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Assignment\tab \tab =\tab \tab \tab :=\par
}{\plain \*\cs7\f1\fs23 Assignment w/Add\tab i += 2;\tab \tab \tab I := I + (2);\par
}{\plain \*\cs7\f1\fs23 Assignment w/Sub\tab i \_= 4;\tab \tab \tab I := I \_ (4);\par
}{\plain \*\cs7\f1\fs23 Assignment w/Mult\tab x *= \_2.1;\tab \tab X := X * (\_2.1);\par
}{\plain \*\cs7\f1\fs23 Assignment w/Div\tab x /= 8.9;\tab \tab X := X / (8.9);\par
}{\plain \*\cs7\f1\fs23 Assignment w/Mod\tab x %= 7.3;\tab \tab X := X REM (7.3);\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 INCREMENT AND DECREMENT STATEMENTS:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Post\_Increment\tab \tab i++;\tab \tab \tab I := I + 1;\par
}{\plain \*\cs7\f1\fs23 Post\_Decrement\tab \tab i\_\_;\tab \tab \tab I := I \_ 1;\par
}{\plain \*\cs7\f1\fs23 Pre\_Increment\tab \tab ++i;\tab \tab \tab I := I + 1;\par
}{\plain \*\cs7\f1\fs23 Pre\_Decrement\tab \tab \_\_i;\tab \tab \tab I := I \_ 1;\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 DATA TYPES:\tab \tab \tab \tab (With Standard; Use Standard;)\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Character\tab \tab char\tab \tab \tab CHARACTER\par
}{\plain \*\cs7\f1\fs23 String\tab \tab \tab char str[n];\tab \tab str : STRING(1..20)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab \_or\_  STRING\par
}{\plain \*\cs7\f1\fs23 Integer\tab \tab \tab int\tab \tab \tab INTEGER\par
}{\plain \*\cs7\f1\fs23 Integer with limits\tab (use int)\tab \tab POSITIVE\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab (use int)\tab \tab NATURAL\par
}{\plain \*\cs7\f1\fs23 Long Integer\tab \tab long\tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 Floating Point\tab \tab float\tab \tab \tab FLOAT \_or\_ REAL\par
}{\plain \*\cs7\f1\fs23 Double\_Precision Float\tab double\tab \tab \par
}{\plain \*\cs7\f1\fs23 Double Double\_Precision\tab long double\tab \tab \par
}{\plain \*\cs7\f1\fs23 Complex\tab \tab \tab fcomplex (naautil.c)\tab (See the record below)\par
}{\plain \*\cs7\f1\fs23 Arrays\tab \tab \tab float A[3][2];\tab \tab A : ARRAY (1..3,1..2)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab   of FLOAT;\par
}{\plain \*\cs7\f1\fs23 Enumeration\tab \tab enum gender \{M,F\};\tab type GENDER is (M,F);\par
}{\plain \*\cs7\f1\fs23 Boolean\tab \tab \tab \tab \tab \tab BOOLEAN\par
}{\plain \*\cs7\f1\fs23 Pointers\tab \tab int *ptr;\tab \tab PTR = ^INTEGER;  ???\par
}{\plain \*\cs7\f1\fs23 Structures\tab \tab struct complex \{\tab type COMPLEX_TYPE is\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   float r, i;\tab \tab   RECORD\tab \tab \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \};\tab \tab \tab     R, I : REAL;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab   END RECORD;\par
}{\plain \*\cs7\f1\fs23 File Pointers\tab \tab FILE *fptr;\tab \tab \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab Examples of ADA type declarations:\par
}{\plain \*\cs7\f1\fs23 \tab \tab type STRING  is array  (POSITIVE range <>) of\par
}{\plain \*\cs7\f1\fs23 \tab \tab   CHARACTERS;\par
}{\plain \*\cs7\f1\fs23 \tab \tab type INTEGER is range  1..2_000;\par
}{\plain \*\cs7\f1\fs23 \tab \tab type FLOAT   is digits 16;\par
}{\plain \*\cs7\f1\fs23 \tab \tab type REAL    is digits 16;\par
}{\plain \*\cs7\f1\fs23 \tab \tab type REAL    is digits 16  range 0.0..1.0E35;\par
}{\plain \*\cs7\f1\fs23 \tab \tab type FIXED   is delta  0.1 range 0.0..255.0;\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 DATA TYPE INITIALIZATION:\tab \tab (With Standard; Use Standard;)\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Character\tab \tab char ch = 'c';\tab \tab CH := 'c';\par
}{\plain \*\cs7\f1\fs23 String\tab \tab \tab char *str = "A string";\tab STR := "A string";\par
}{\plain \*\cs7\f1\fs23 Integer\tab \tab \tab int i = 5;\tab \tab I := 5;\par
}{\plain \*\cs7\f1\fs23 Long Integer\tab \tab int i = 5L;\tab \tab \par
}{\plain \*\cs7\f1\fs23 Floating Point\tab \tab float x = 123.4F;\tab X := 123.4;\par
}{\plain \*\cs7\f1\fs23 Floating Point\tab \tab float x = 1.0e\_2F;\tab X := 1.0E\_2;\par
}{\plain \*\cs7\f1\fs23 Double\_Precision Float\tab double x = 123.4;\tab \tab \par
}{\plain \*\cs7\f1\fs23 Double\_Precision Float\tab double x = 1e\_2;\tab \tab \par
}{\plain \*\cs7\f1\fs23 Double Double\_Precision\tab long double x = 123.4L;\tab \par
}{\plain \*\cs7\f1\fs23 Double Double\_Precision\tab long double x = 1e\_2L;\tab \par
}{\plain \*\cs7\f1\fs23 Complex\tab \tab \tab fcomplex c = \{6.2,7.1\};\par
}{\plain \*\cs7\f1\fs23 Arrays\tab \tab \tab float A[3][2] = \{\{4,2\},\{1,\_2\},\{0,5\}\};\tab \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab A(2,2) := \_2;\par
}{\plain \*\cs7\f1\fs23 Enumeration\tab \tab boolean ANS = NO;\tab \par
}{\plain \*\cs7\f1\fs23 Boolean\tab \tab \tab N/A\tab \tab \tab BOOLEAN FOUND;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab FOUND := FALSE;\par
}{\plain \*\cs7\f1\fs23 Pointers\tab \tab char *\tab \tab \tab ^\par
}{\plain \*\cs7\f1\fs23 Structures\tab \tab struct complex \{\tab RECORD1 := RECORD2;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   float r = 12.0;\tab \tab   \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   float i = 7.0;\tab \tab   \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \};\tab \tab \tab   \par
}{\plain \*\cs7\f1\fs23 File Pointers\tab \tab FILE *fptr;\tab \tab \par
}{\plain \*\cs7\f1\fs23 Constants\tab \tab #define PI 3.1415\tab   CONST PI = 3.1415;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab const char DOLLAR = '$';  CONST DOLLAR = '$';\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab (With Unchecked_Conversion;)\par
}{\plain \*\cs7\f1\fs23 DATA TYPE CONVERSION:\tab \tab \tab (Use  Unchecked_Conversion;)\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Character\tab \tab (char) i\tab \tab CHARACTER(i);\par
}{\plain \*\cs7\f1\fs23 String\tab \tab \tab (char *) x\tab \tab STRING(x);\par
}{\plain \*\cs7\f1\fs23 Integer\tab \tab \tab (int) ch\tab \tab INTEGER(ch);\par
}{\plain \*\cs7\f1\fs23 Long Integer\tab \tab (long) x\tab \tab \par
}{\plain \*\cs7\f1\fs23 Floating Point\tab \tab (float) x\tab \tab REAL(x);\par
}{\plain \*\cs7\f1\fs23 Double\_Precision Float\tab (double) x\tab \tab \par
}{\plain \*\cs7\f1\fs23 Double Double\_Precision\tab (long double) x\par
}{\plain \*\cs7\f1\fs23 Complex\tab \tab \tab (complex) x\tab \tab COMPLEX(x);\par
}{\plain \*\cs7\f1\fs23 Other Types\tab \tab typedef ... new_type;\tab type NEW_TYPE is ...;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab (new_type) x\tab \tab NEW_TYPE(x);\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 STANDARD FUNCTIONS:\tab \tab \tab (With Math_Lib; Use Math_Lib;)\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Truncation\tab \tab trunc() (in trunc.c)\tab \par
}{\plain \*\cs7\f1\fs23 Round\tab \tab \tab round() (in round.c)\tab \par
}{\plain \*\cs7\f1\fs23 Nearest Integer\tab \tab ceil()\tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 Nearest Whole Number\tab floor()\tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 Absolute Value\tab \tab abs(), fabs()\tab \tab ABS()\par
}{\plain \*\cs7\f1\fs23 Odd (INTEGER)\tab \tab #define ODD(a) (a%2)?(1):(0)\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Square Root\tab \tab sqrt()\tab \tab \tab SQRT()\par
}{\plain \*\cs7\f1\fs23 Square\tab \tab \tab x*x\tab \tab \tab X*X\par
}{\plain \*\cs7\f1\fs23 Exponential\tab \tab exp()\tab \tab \tab EXP()\par
}{\plain \*\cs7\f1\fs23 Natural Log\tab \tab log()\tab \tab \tab LOG(X)\par
}{\plain \*\cs7\f1\fs23 Common Log\tab \tab log10()\tab \tab \tab LOG(X,10)\par
}{\plain \*\cs7\f1\fs23 Power\tab \tab \tab pow(x,y)\tab \tab "**"(X,Y)\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Sine\tab \tab \tab sin()\tab \tab \tab SIN()\par
}{\plain \*\cs7\f1\fs23 Cosine\tab \tab \tab cos()\tab \tab \tab COS()\par
}{\plain \*\cs7\f1\fs23 Tangent\tab \tab \tab tan()\tab \tab \tab TAN()\par
}{\plain \*\cs7\f1\fs23 Cotangent\tab \tab 1.0/tan()\tab \tab COT()\par
}{\plain \*\cs7\f1\fs23 Arcsine\tab \tab \tab asin()\tab \tab \tab ARCSIN()\par
}{\plain \*\cs7\f1\fs23 Arccosine\tab \tab acos()\tab \tab \tab ARCCOS()\par
}{\plain \*\cs7\f1\fs23 Arctangent\tab \tab atan()\tab \tab \tab ATAN(X)\par
}{\plain \*\cs7\f1\fs23 Atan of Quotient\tab atan2()\tab \tab \tab ATAN(X,Y)\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Hyperbolic Sine\tab \tab sinh()\tab \tab \tab SINH()\par
}{\plain \*\cs7\f1\fs23 Hyperbolic Cosine\tab cosh()\tab \tab \tab COSH()\par
}{\plain \*\cs7\f1\fs23 Hyperbolic Tangent\tab tanh()\tab \tab \tab TANH()\par
}{\plain \*\cs7\f1\fs23 Hyperbolic Cotangent\tab 1.0/tanh()\tab \tab COTH()\par
}{\plain \*\cs7\f1\fs23 Hyperbolic Arcsine\tab \tab \tab \tab ARCSINH()\par
}{\plain \*\cs7\f1\fs23 Hyperbolic Arccosine\tab \tab \tab \tab ARCCOSH()\par
}{\plain \*\cs7\f1\fs23 Hyperbolic Arctangent\tab \tab \tab \tab ARCTANH()\par
}{\plain \*\cs7\f1\fs23 Hyperbolic Arccotangent\tab \tab \tab \tab ARCCOTH()\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Random Number\tab \tab rand(), srand()\tab \tab \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 SYNTAX:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Case Sensitive?\tab \tab YES\tab \tab \tab NO\par
}{\plain \*\cs7\f1\fs23 Name a program\tab \tab main()\tab \tab \tab Procedure Prog_Name is\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \{\tab \tab \tab begin\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab \tab end Prog_Name;\par
}{\plain \*\cs7\f1\fs23 Define a Package\tab use #include "package_name.h"\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab Package Prog_Name is\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab end;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab Package body Prog_Name\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab is\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab end Prog_Name;\par
}{\plain \*\cs7\f1\fs23 Comment Begin\tab \tab /*\tab \tab \tab \_\_\par
}{\plain \*\cs7\f1\fs23 Comment End\tab \tab */\tab \tab \tab <CARRIAGE RETURN>\par
}{\plain \*\cs7\f1\fs23 Begin Symbol\tab \tab \{\tab \tab \tab BEGIN\par
}{\plain \*\cs7\f1\fs23 End Symbol\tab \tab \}\tab \tab \tab END;  \_or\_  END 
function_name;\par
}{\plain \*\cs7\f1\fs23 Statement Terminator\tab ;\tab \tab \tab ; \par
}{\plain \*\cs7\f1\fs23 Include Files\tab \tab #include <filename.h>\tab With Package_name;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab #include "filename.h"\par
}{\plain \*\cs7\f1\fs23 Variable Names\tab \tab a\_zA\_Z0\_9_\tab \tab A\_Z0\_9_\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab (31 chars max.)\tab \tab (? chars max.)\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Functions\tab \tab float func_name (int x, y)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \{\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   return some_float;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab      FUNCTION FNAME (X,Y: REAL) RETURN REAL is\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab        ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab        RETURN SOMEREAL;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab      end FNAME;\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Procedures\tab \tab proc_name (int x, y)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab        PROCEDURE PROC_NAME(X,Y: REAL);\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Get Input\tab \tab scanf("%f", &sum);\tab READLN (SUM);\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab scanf("%s", &string);\tab GET (STRING_VAR);\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab scanf("%s", &string);\tab GET_LINE (STRING_VAR);\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab printf("\\n");\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab scanf("%c", &ch);\tab GET (CH);\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab (With Text_IO; Use Text_IO;)\par
}{\plain \*\cs7\f1\fs23 Print Output\tab \tab printf("A = %f\\n", A);\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab    Float_IO.PUTLN ('A = ', A);\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab printf("A = %f", A);\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab    Float_IO.PUT ('A = ', A);\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab printf("S = %s", S);\tab PUT('S = ', S);  \_or\_\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab printf("S = %s\\n", S);\tab PUT_LINE('S = ', S);\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab printf("\\n");\tab \tab NEW_LINE;\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab printf("\\n\\n\\n");\tab NEW_LINE (ITEM => 3);\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab        May Need:\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab        Package FIO is new float_io(float);\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab        Package IIO is new integer_io(integer);\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab        Package Ada_IO is new ...;\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 File Output\tab \tab FILE *file_id;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab file_id = fopen("filename", "w");\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab fprintf(file_id, "Any string here");\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab fclose(file_id);\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Exit\tab \tab \tab exit(1);\tab \tab Exit (Package_Name);\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab (Exits main())\tab \tab (Exits Package_Name)\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 CONTROL STRUCTURES:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 If\_Then\_Else\tab \tab if (x>y) \{\tab \tab IF X > Y THEN\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab (No BEGIN/END needed)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab \tab ELSIF X = Y THEN \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab else if (x==y) \{\tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab ELSE\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \} else \{\tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab END IF;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Case\tab \tab \tab switch (my_var) \{ \tab CASE MY_VAR IS\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   case 'D' :\tab \tab   WHEN 'D' =>\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab     ...\tab \tab \tab     ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab     break;\tab \tab   WHEN 'Y' | 'y' =>\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   case 'Y':\tab \tab     ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   case 'y':\tab \tab   WHEN OTHERS => NULL;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab     ...\tab \tab \tab END CASE;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab     break;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   default : break;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Loops\tab \tab \tab while (1) \{\tab \tab LOOP\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   if (x==y)\tab \tab   EXIT WHEN X = Y;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab     break;\tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab END LOOP;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \_\_ or \_\_\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab for (;;) \{\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   if (x==y)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab     goto exit_label;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab exit_label:\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 While Loops\tab \tab while (count != 5) \{\tab WHILE count /= 5 LOOP\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab \tab END LOOP;\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 For Loops\tab \tab for (i=1;i<=10;i++) \{\tab FOR I IN 1..10 LOOP\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab \tab END LOOP;\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab for (i=10;i>=1;i\_\_) \{\tab FOR I IN REVERSE 1..10 
LOOP\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab \tab END LOOP;\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Named Loops\tab \tab N/A\tab \tab \tab SUMMATION:\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab WHILE COUNT /= 5 LOOP\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab END LOOP SUMMATION;\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Block Statements\tab if (1) \{\tab \tab SWAP:\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   int temp;\tab \tab DECLARE\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   temp = v;\tab \tab   TEMP : INTEGER;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   v = u;\tab \tab BEGIN\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   u = temp;\tab \tab   TEMP := V;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab \tab   V := U;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab   U := TEMP;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab END SWAP;\tab \tab \tab \tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Goto\tab \tab \tab goto label_text;\tab GOTO LABEL_TEXT;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab ...\tab \tab \tab ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab label_text :\tab \tab <<LABEL_TEXT>>\par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs7\f1\fs23 \tab \tab \tab ...\tab \tab \tab ...}{\plain \f1\fs18 \par
}\pard\page 
\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs6\f2\fs32 }{\plain \*\cs6\b\f2\fs32 {\tc {C.2\tab C vs BASIC} \tcl2}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs7\f1\fs23 Description:\tab \tab C\tab \tab \tab BASIC\par
}{\plain \*\cs7\f1\fs23 ======================================================================\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 ARITHMETIC OPERATORS:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Addition\tab \tab +\tab \tab \tab +\par
}{\plain \*\cs7\f1\fs23 Subtraction\tab \tab \_\tab \tab \tab \_\par
}{\plain \*\cs7\f1\fs23 Multiplication\tab \tab *\tab \tab \tab *\par
}{\plain \*\cs7\f1\fs23 Division (float)\tab /\tab \tab \tab /\par
}{\plain \*\cs7\f1\fs23 Division (integer)\tab /\tab \tab \tab \\\par
}{\plain \*\cs7\f1\fs23 Modulus (integer)\tab %\tab \tab \tab MOD\par
}{\plain \*\cs7\f1\fs23 Exponentiation\tab \tab pow()\tab \tab \tab ^\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 RELATIONAL OPERATORS:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Greater Than\tab \tab >\tab \tab \tab >\par
}{\plain \*\cs7\f1\fs23 Greater Then or Equal\tab >=\tab \tab \tab >=\par
}{\plain \*\cs7\f1\fs23 Less Than\tab \tab <\tab \tab \tab <\par
}{\plain \*\cs7\f1\fs23 Less Than or Equal\tab <=\tab \tab \tab <=\par
}{\plain \*\cs7\f1\fs23 Equal\tab \tab \tab ==\tab \tab \tab =\par
}{\plain \*\cs7\f1\fs23 Not Equal\tab \tab !=\tab \tab \tab <>\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 LOGICAL OPERATORS:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 And\tab \tab \tab &&\tab \tab \tab AND\par
}{\plain \*\cs7\f1\fs23 Or\tab \tab \tab ||\tab \tab \tab OR\par
}{\plain \*\cs7\f1\fs23 Not\tab \tab \tab !\tab \tab \tab NOT\par
}{\plain \*\cs7\f1\fs23 Exclusive Or\tab \tab N/A\tab \tab \tab XOR\par
}{\plain \*\cs7\f1\fs23 Implication\tab \tab N/A\tab \tab \tab IMP\par
}{\plain \*\cs7\f1\fs23 Equivalence\tab \tab ==\tab \tab \tab EQV\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 ASSIGNMENT OPERATORS:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Assignment\tab \tab =\tab \tab \tab =\par
}{\plain \*\cs7\f1\fs23 Assignment w/Add\tab i += 2;\tab \tab \tab I = I + (2)\par
}{\plain \*\cs7\f1\fs23 Assignment w/Sub\tab i \_= 4;\tab \tab \tab I = I \_ (4)\par
}{\plain \*\cs7\f1\fs23 Assignment w/Mult\tab x *= \_2.1;\tab \tab X = X * (\_2.1)\par
}{\plain \*\cs7\f1\fs23 Assignment w/Div (float) x /= 8.9;\tab \tab X = X / (8.9)\par
}{\plain \*\cs7\f1\fs23 Assignment w/Div (Int)\tab N/A\tab \tab \tab X = X \\ (8.9)\par
}{\plain \*\cs7\f1\fs23 Assignment w/Mod\tab x %= 7.3;\tab \tab X = X MOD (7.3)\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 INCREMENT AND DECREMENT STATEMENTS:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Post\_Increment\tab \tab i++;\tab \tab \tab I = I + 1\par
}{\plain \*\cs7\f1\fs23 Post\_Decrement\tab \tab i\_\_;\tab \tab \tab I = I \_ 1\par
}{\plain \*\cs7\f1\fs23 Pre\_Increment\tab \tab ++i;\tab \tab \tab I = I + 1\par
}{\plain \*\cs7\f1\fs23 Pre\_Decrement\tab \tab \_\_i;\tab \tab \tab I = I \_ 1\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 DATA TYPES:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Character\tab \tab char ch;\tab \tab DEFSTR C\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab (First letter only)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab \_or\_  C$\par
}{\plain \*\cs7\f1\fs23 String\tab \tab \tab char str[n];\tab \tab DEFSTR S\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab (First letter only)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab \_or\_  S$\par
}{\plain \*\cs7\f1\fs23 Integer\tab \tab \tab int i,j;\tab \tab DEFINT I,J\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab (First letter only)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab \_or\_  I, J\par
}{\plain \*\cs7\f1\fs23 Long Integer\tab \tab long i;\tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 Floating Point\tab \tab float x;\tab \tab DEFSNG X\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab (First letter only)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab \_or\_  X!\par
}{\plain \*\cs7\f1\fs23 Double\_Precision Float\tab double x;\tab \tab DEFDBL X\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab (First letter only)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab \_or\_  X#\par
}{\plain \*\cs7\f1\fs23 Double Double\_Precision\tab long double x;\tab \tab \par
}{\plain \*\cs7\f1\fs23 Complex\tab \tab \tab fcomplex (naautil.c)\tab \par
}{\plain \*\cs7\f1\fs23 Arrays\tab \tab \tab int A[3];\tab \tab DIM A (3)\par
}{\plain \*\cs7\f1\fs23 Enumeration\tab \tab enum boolean \{NO,YES\};\tab \par
}{\plain \*\cs7\f1\fs23 Logical\tab \tab \tab N/A\tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 Functions\tab \tab N/A\tab \tab \tab DEF FNname(X)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab (Prefix with FN)\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 DATA TYPE INITIALIZATION:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Character\tab \tab char ch='c';\tab \tab CH$ = "c"\par
}{\plain \*\cs7\f1\fs23 String\tab \tab \tab char *str="string";\tab STR$ = "string"\par
}{\plain \*\cs7\f1\fs23 Integer\tab \tab \tab int i=5;\tab \tab I = 5%  \_or\_  I = 5\par
}{\plain \*\cs7\f1\fs23 Long Integer\tab \tab int i=5L;\tab \tab \par
}{\plain \*\cs7\f1\fs23 Floating Point\tab \tab float x=123.4F;\tab \tab X = 123.4!, X = 123.4\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab -or- X!=123.4\par
}{\plain \*\cs7\f1\fs23 Floating Point\tab \tab float x=1.0e\_2F;\tab X = 1.0E\_2\par
}{\plain \*\cs7\f1\fs23 Double\_Precision Float\tab double x=123.4;\tab \tab X = 123.4#\par
}{\plain \*\cs7\f1\fs23 Double\_Precision Float\tab double x=1e\_2;\tab \tab X = 1.0D\_2\par
}{\plain \*\cs7\f1\fs23 Double Double\_Precision\tab long double x=123.4L;\tab \par
}{\plain \*\cs7\f1\fs23 Double Double\_Precision\tab long double x=1e\_2L;\tab \par
}{\plain \*\cs7\f1\fs23 Complex\tab \tab \tab fcomplex c=\{6.2,7.1\};\tab \par
}{\plain \*\cs7\f1\fs23 Arrays\tab \tab \tab int A[3]=\{4,2,7\};\tab \par
}{\plain \*\cs7\f1\fs23 Enumeration\tab \tab boolean T=NO;\par
}{\plain \*\cs7\f1\fs23 Constants\tab \tab const double x=123.4;\tab PI# = 3.14\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab #define PI 3.14\tab \tab   (Usage: X = 2 * PI#)\par
}{\plain \*\cs7\f1\fs23 Logical\tab \tab \tab N/A\tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 DATA TYPE CONVERSION:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Character\tab \tab (char) x\tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 String\tab \tab \tab (char *) x\tab \tab "Type Mismatch" ERROR\par
}{\plain \*\cs7\f1\fs23 Integer\tab \tab \tab (int) x\tab \tab \tab CINT(X)\par
}{\plain \*\cs7\f1\fs23 Long Integer\tab \tab (long) x\tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 Floating Point\tab \tab (float) x\tab \tab CSNG(X)\par
}{\plain \*\cs7\f1\fs23 Double\_Precision Float\tab (double) x\tab \tab CDBL(X)\par
}{\plain \*\cs7\f1\fs23 Double Double\_Precision\tab (long double) x\tab \tab \par
}{\plain \*\cs7\f1\fs23 Complex\tab \tab \tab (complex) x\tab \tab \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 STANDARD FUNCTIONS:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Truncation\tab \tab trunc() (in trunc.c)\tab FIX()\par
}{\plain \*\cs7\f1\fs23 Round\tab \tab \tab round() (in round.c)\tab CINT()\par
}{\plain \*\cs7\f1\fs23 Nearest Integer\tab \tab ceil()\tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 Nearest Whole Number\tab floor()\tab \tab \tab INT()\par
}{\plain \*\cs7\f1\fs23 Absolute Value\tab \tab abs(), fabs()\tab \tab ABS()\par
}{\plain \*\cs7\f1\fs23 Choose Largest\tab \tab #define MAX(a,b) (a)>(b)?(a):(b)\par
}{\plain \*\cs7\f1\fs23 Choose Smallest\tab \tab #define MIN(a,b) (a)<(b)?(a):(b)\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Square Root\tab \tab sqrt()\tab \tab \tab SQR()\par
}{\plain \*\cs7\f1\fs23 Exponential\tab \tab exp()\tab \tab \tab EXP()\par
}{\plain \*\cs7\f1\fs23 Natural Log\tab \tab log()\tab \tab \tab LOG()\par
}{\plain \*\cs7\f1\fs23 Common Log\tab \tab log10()\tab \tab \tab LOG(X) / LOG(10)\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Sine\tab \tab \tab sin()\tab \tab \tab SIN()\par
}{\plain \*\cs7\f1\fs23 Cosine\tab \tab \tab cos()\tab \tab \tab COS()\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab (Load interpreter with\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab /D option for doubles)\par
}{\plain \*\cs7\f1\fs23 Tangent\tab \tab \tab tan()\tab \tab \tab TAN()\par
}{\plain \*\cs7\f1\fs23 Arcsine\tab \tab \tab asin()\tab \tab \tab ATN(X/SQR(\_X*X+1))\par
}{\plain \*\cs7\f1\fs23 Arccosine\tab \tab acos()\tab \tab \tab \_ATN(X/SQR(\_X*X+1))\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab   + 1.5708\par
}{\plain \*\cs7\f1\fs23 Arctangent\tab \tab atan()\tab \tab \tab ATN()\par
}{\plain \*\cs7\f1\fs23 Atan of Quotient\tab atan2()\tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Hyperbolic Sine\tab \tab sinh()\tab \tab \tab (EXP(X) \_ EXP(\_X))/2\par
}{\plain \*\cs7\f1\fs23 Hyperbolic Cosine\tab cosh()\tab \tab \tab (EXP(X) + EXP(\_X))/2\par
}{\plain \*\cs7\f1\fs23 Hyperbolic Tangent\tab tanh()\tab \tab \tab (EXP(X) \_ EXP(\_X)) / \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab   (EXP(X) + EXP(\_X))\par
}{\plain \*\cs7\f1\fs23 Random Number\tab \tab rand(), srand()\tab \tab RND()  (Returns 0..1)\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 SYNTAX:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Case Sensitive?\tab \tab YES\tab \tab \tab NO\par
}{\plain \*\cs7\f1\fs23 Name a program\tab \tab main()\tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 Comment Begin\tab \tab /*\tab \tab \tab '  \_or\_  REM \par
}{\plain \*\cs7\f1\fs23 Comment End\tab \tab */\tab \tab \tab <CARRIAGE RETURN>\par
}{\plain \*\cs7\f1\fs23 Begin Symbol\tab \tab \{\tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 End Symbol\tab \tab \}\tab \tab \tab END\par
}{\plain \*\cs7\f1\fs23 Statement Terminator\tab ;\tab \tab \tab <CARRIAGE RETURN>\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab \_or\_  ':' followed by\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab another command\par
}{\plain \*\cs7\f1\fs23 Statement Separator\tab ;\tab \tab \tab :\par
}{\plain \*\cs7\f1\fs23 Include Files\tab \tab #include <filename.h>\tab (Currently not\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab  supported?)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab #include "filename.h"\par
}{\plain \*\cs7\f1\fs23 Variable Names\tab \tab a\_zA\_Z0\_9_\tab \tab A\_Z0\_9.\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab (31 chars max.)\tab \tab (40 chars max.)\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Functions\tab \tab float func_name (int x, y)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \{\tab \tab DEF FNfunc_name (X,Y) = SIN(X)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab (256 chars max.)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   return sin(x);\tab \_or\_\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab (Load interpreter with /N switch)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab DEF FNfunc_name (X,Y)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab   FNfunc_name = some_float\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab END DEF\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab (Using the /N switch)\par
}{\plain \*\cs7\f1\fs23 Procedures\tab \tab proc_name (int x, y)\tab GOSUB proc_name\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab -or- GOSUB line #\par
}{\plain \*\cs7\f1\fs23 (Subroutines)\tab \tab \{\tab \tab \tab ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab proc_name:\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab RETURN\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab \_or\_\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab (Load interpreter with /N switch)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab SUB sub_name(x#)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab END SUB\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab (Usage: CALL sub_name(x#) )\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Get Input\tab \tab scanf("%f%f", &s1, &s2); INPUT S1, S2\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab printf("Enter sum");\tab (DEFSNG S)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab scanf("%f", &sum);\tab INPUT "Enter sum"; SUM\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab N/A\tab \tab \tab READ STR$, NUM1, NUM2\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab DATA "Happy",7.29,2.0\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Print Output\tab \tab printf("Sum = %f.\\n", sum);\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab PRINT "Sum = "; SUM ;"."\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab printf("Sum = \\t%f\\t.\\n", sum);\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab PRINT "Sum = ", SUM ,"."\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab printf("\\n");\tab \tab PRINT\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 File Output\tab \tab FILE *file_id;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab file_id = fopen("filename", "w");\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab fprintf(file_id, "Any string");\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab fclose(file_id);\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab 100  OPEN "O", #1, "filename"\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab 200  PRINT#1, "Any string."\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab 300  CLOSE #1\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Exit\tab \tab \tab exit(1); (Exits main())\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab RETURN  \_or\_  STOP\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 CONTROL STRUCTURES:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 If\_Then\tab \tab \tab if (x>y) \{ ... \}\tab IF (X > Y) THEN ...\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 If\_Then\_Else\tab \tab if (x>y) \{ ... \}\tab IF (X > Y) THEN ... 
ELSE ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab else \{ ... \}\tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab (Load interpreter with /N switch)\par
}{\plain \*\cs7\f1\fs23 While Loops\tab \tab while (count != 5) \{\tab WHILE (logical)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab \tab WEND\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 For Loops\tab \tab for (i=1;i<=11;i+=2) \{\tab FOR I = 1 TO 11 STEP 2\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab \tab NEXT I\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab for (i=1;i<10;i++) \{\tab FOR I = 1 TO 10\_1\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab \tab NEXT I\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab for (i=10;i>=1;i\_\_) \{  FOR I = 10 TO 1 STEP \_1\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab \tab NEXT I\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Case\tab \tab \tab switch (my_var) \{\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab  \tab (Use If\_Then\_Else or IF..GOTO)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   case 'D' :\tab IF MY_VAR$ = "D" THEN 100\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab     ...\tab \tab IF MY_VAR$ = "Y" THEN 200\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab     break;\tab IF MY_VAR$ = "y" THEN 200\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   case \tab 'Y':\tab ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   case 'y':\tab 100 ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab     ...\tab \tab GOTO 400\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab     break;\tab 200 ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab GOTO 400\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab 400 ...\par
}{\plain \*\cs7\f1\fs23 Goto (Logical)\tab \tab goto label_text;\tab GOTO 200\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab label_text :\tab \tab 200 ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab (Load interpreter with /N\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab  switch)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab GOTO my_mark\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab my_mark:\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Goto (Computed)\tab \tab N/A \tab \tab \tab ON I GOTO 100,200,300\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab 100 ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab 200 ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab 300 ...\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab \_same as\_\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab if i==1 goto label1\tab IF I = 1 THEN 100\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab if i==2 goto label2\tab IF I = 2 THEN 200\par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs7\f1\fs23 \tab \tab \tab if i==3 goto label3\tab IF I = 3 THEN 300}{\plain \f1\fs18 \par
}\pard\page 
\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs6\f2\fs32 }{\plain \*\cs6\b\f2\fs32 {\tc {C.3\tab C vs C++} \tcl2}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs7\f1\fs23 Description:\tab \tab C\tab \tab \tab C++\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}{\plain \*\cs5\fs22 NOTE: Only additional operators are listed, since "C" is a subset of "C++".\par
}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs7\f1\fs23 SYNTAX:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Comment Begin\tab \tab /*\tab \tab \tab //\par
}{\plain \*\cs7\f1\fs23 Comment End\tab \tab */\tab \tab \tab <NEWLINE>\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab (Needs #include <stream.h> or <iostream.h>)\par
}{\plain \*\cs7\f1\fs23 Get Input\tab \tab scanf("%f", &sum);\tab cin >> sum;\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab scanf("%s", &string);\tab cin >> string;\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab scanf("%c", &ch);\tab cin >> ch;\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab (Needs #include <stream.h> or <iostream.h>)\par
}{\plain \*\cs7\f1\fs23 Print Output\tab \tab printf("A = %f\\n", A);\tab cout << A << "\\n";\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab printf("A = %f", A);\tab cout << A;\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab printf("S = %s", S);\tab cout << S;\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab printf("S = %s\\n", S);\tab cout << S << "\\n";\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab printf("X = %d", i+1);\tab cout << "X = " << i+1;\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab printf("\\n");\tab \tab cout << "\\n";\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Use of Objects\tab \tab C = My_Matrix_Multiply(A,B);\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab C = A * B;\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab X = My_Complex_Multiply(C1,C2);\par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab X = C1 * C2;}{\plain \f1\fs18 \par
}\pard\page 
\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs6\f2\fs32 }{\plain \*\cs6\b\f2\fs32 {\tc {C.4\tab C vs FORTRAN\~77} \tcl2}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs7\f1\fs23 Description:\tab \tab C\tab \tab \tab FORTRAN\~77\par
}{\plain \*\cs7\f1\fs23 ======================================================================\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 ARITHMETIC OPERATORS:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Addition\tab \tab +\tab \tab \tab +\par
}{\plain \*\cs7\f1\fs23 Subtraction\tab \tab \_\tab \tab \tab \_\par
}{\plain \*\cs7\f1\fs23 Multiplication\tab \tab *\tab \tab \tab *\par
}{\plain \*\cs7\f1\fs23 Division\tab \tab /\tab \tab \tab /\par
}{\plain \*\cs7\f1\fs23 Modulus (integer)\tab %\tab \tab \tab MOD(x,y)\par
}{\plain \*\cs7\f1\fs23 Exponentiation\tab \tab pow()\tab \tab \tab **\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 RELATIONAL OPERATORS:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Greater Than\tab \tab >\tab \tab \tab .GT.\tab \tab \par
}{\plain \*\cs7\f1\fs23 Greater Then or Equal\tab >=\tab \tab \tab .GE.\par
}{\plain \*\cs7\f1\fs23 Less Than\tab \tab <\tab \tab \tab .LT.\par
}{\plain \*\cs7\f1\fs23 Less Than or Equal\tab <=\tab \tab \tab .LE.\par
}{\plain \*\cs7\f1\fs23 Equal\tab \tab \tab ==\tab \tab \tab .EQ.\par
}{\plain \*\cs7\f1\fs23 Not Equal\tab \tab !=\tab \tab \tab .NE.\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 LOGICAL OPERATORS:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 And\tab \tab \tab &&\tab \tab \tab .AND.\par
}{\plain \*\cs7\f1\fs23 Or\tab \tab \tab ||\tab \tab \tab .OR.\par
}{\plain \*\cs7\f1\fs23 Not\tab \tab \tab !\tab \tab \tab .NOT.\par
}{\plain \*\cs7\f1\fs23 Equivalent\tab \tab N/A\tab \tab \tab .EQV.\par
}{\plain \*\cs7\f1\fs23 Not Equivalent\tab \tab N/A\tab \tab \tab .NEQV.\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 ASSIGNMENT OPERATORS:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Assignment\tab \tab =\tab \tab \tab =\par
}{\plain \*\cs7\f1\fs23 Assignment w/Add\tab i += 2;\tab \tab \tab I = I + (2)\par
}{\plain \*\cs7\f1\fs23 Assignment w/Sub\tab i \_= 4;\tab \tab \tab I = I \_ (4)\par
}{\plain \*\cs7\f1\fs23 Assignment w/Mult\tab x *= \_2.1;\tab \tab X = X * (\_2.1)\par
}{\plain \*\cs7\f1\fs23 Assignment w/Div\tab x /= 8.9;\tab \tab X = X / (8.9)\par
}{\plain \*\cs7\f1\fs23 Assignment w/Mod\tab x %= 7.3;\tab \tab X = MOD(X, 7.3)\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 INCREMENT AND DECREMENT STATEMENTS:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Post\_Increment\tab \tab i++;\tab \tab \tab I = I + 1\par
}{\plain \*\cs7\f1\fs23 Post\_Decrement\tab \tab i\_\_;\tab \tab \tab I = I \_ 1\par
}{\plain \*\cs7\f1\fs23 Pre\_Increment\tab \tab ++i;\tab \tab \tab I = I + 1\par
}{\plain \*\cs7\f1\fs23 Pre\_Decrement\tab \tab \_\_i;\tab \tab \tab I = I \_ 1\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 DATA TYPES:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Character\tab \tab char ch;\tab \tab CHARACTER*1 CH\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab CHARACTER CH\par
}{\plain \*\cs7\f1\fs23 String\tab \tab \tab char str[n];\tab \tab CHARACTER*n STR\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab CHARACTER STR*n\par
}{\plain \*\cs7\f1\fs23 Integer\tab \tab \tab int i,j;\tab \tab INTEGER I,J\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab INTEGER*4 I,J\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab INTEGER*1 I,J\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab (Machine dependant)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab INTEGER*2 I,J\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab (Machine dependant)\par
}{\plain \*\cs7\f1\fs23 Long Integer\tab \tab long i;\tab \tab \tab INTEGER*2 I\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab (Machine dependant)\par
}{\plain \*\cs7\f1\fs23 Floating Point\tab \tab float x;\tab \tab REAL X\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab REAL*4 X\par
}{\plain \*\cs7\f1\fs23 Double\_Precision Float\tab double x;\tab \tab DOUBLE PRECISION X\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab REAL*8 X\par
}{\plain \*\cs7\f1\fs23 Double Double\_Precision\tab long double x;\tab \tab \par
}{\plain \*\cs7\f1\fs23 Complex\tab \tab \tab fcomplex (naautil.c)\tab COMPLEX C\par
}{\plain \*\cs7\f1\fs23 Arrays\tab \tab \tab int A[3][2];\tab \tab INTEGER A(3,2)  \_or\_\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab INTEGER A\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab DIMENSION A(3,2)\par
}{\plain \*\cs7\f1\fs23 Enumeration\tab \tab enum boolean \{NO,YES\};\tab \par
}{\plain \*\cs7\f1\fs23 Logical\tab \tab \tab N/A\tab \tab \tab LOGICAL A,B\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 DATA TYPE INITIALIZATION:     (Use variables as declared above first)\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Character\tab \tab char ch='c';\tab \tab DATA CH/'c'/\par
}{\plain \*\cs7\f1\fs23 String\tab \tab \tab char *str="string";\tab DATA STR/'string'/\par
}{\plain \*\cs7\f1\fs23 Integer\tab \tab \tab int i=5;\tab \tab DATA I/5/\par
}{\plain \*\cs7\f1\fs23 Long Integer\tab \tab int i=5L;\tab \tab DATA I/5/\par
}{\plain \*\cs7\f1\fs23 Floating Point\tab \tab float x=123.4F;\tab \tab DATA X/123.4/\par
}{\plain \*\cs7\f1\fs23 Floating Point\tab \tab float x=1.0e\_2F;\tab DATA X/1.E\_2/\par
}{\plain \*\cs7\f1\fs23 Double\_Precision Float\tab double x=123.4;\tab \tab DATA X/123.4D0/\par
}{\plain \*\cs7\f1\fs23 Double\_Precision Float\tab double x=1e\_2;\tab \tab DATA X/1.D\_2/\par
}{\plain \*\cs7\f1\fs23 Double Double\_Precision\tab long double x=123.4L;\tab \par
}{\plain \*\cs7\f1\fs23 Double Double\_Precision\tab long double x=1e\_2L;\tab \par
}{\plain \*\cs7\f1\fs23 Complex\tab \tab \tab fcomplex c=\{6.2,7.1\};\tab DATA C/(6.2,7.1)/\par
}{\plain \*\cs7\f1\fs23 Arrays\tab \tab \tab int A[3][2]=\{\{1,2\},\{3,4\},\{5,6\}\};\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab DATA A/1,3,5,2,4,6/\par
}{\plain \*\cs7\f1\fs23 Enumeration\tab \tab boolean T=NO;\par
}{\plain \*\cs7\f1\fs23 Constants\tab \tab const double x=123.4;\tab REAL*8 X,PI\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab #define PI 3.14\tab \tab PARAMETER(X=123.4D0)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab PARAMETER(PI=3.14)\par
}{\plain \*\cs7\f1\fs23 Logical\tab \tab \tab N/A\tab \tab DATA A,B/.FALSE.,.TRUE.)/\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 DATA TYPE CONVERSION:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Character\tab \tab (char) x\tab \tab CHAR(X)\par
}{\plain \*\cs7\f1\fs23 String\tab \tab \tab (char *) x\tab \tab \par
}{\plain \*\cs7\f1\fs23 Integer\tab \tab \tab (int) x\tab \tab \tab INT(X)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab FORTRAN 66:\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab   IFIX(X), IDINT(X)\par
}{\plain \*\cs7\f1\fs23 Long Integer\tab \tab (long) x\par
}{\plain \*\cs7\f1\fs23 Floating Point\tab \tab (float) x\tab \tab REAL(X)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab FORTRAN 66:\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab   SNGL(X), FLOAT(X)\par
}{\plain \*\cs7\f1\fs23 Double\_Precision Float\tab (double) x\tab \tab DBLE(X)\par
}{\plain \*\cs7\f1\fs23 Double Double\_Precision\tab (long double) x\par
}{\plain \*\cs7\f1\fs23 Complex\tab \tab \tab (complex) x\tab \tab CMPLX(X)\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 STANDARD FUNCTIONS:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Truncation\tab \tab trunc() (in trunc.c)\tab AINT(), DINT()\par
}{\plain \*\cs7\f1\fs23 Round\tab \tab \tab round() (in round.c)\tab ANINT()\par
}{\plain \*\cs7\f1\fs23 Nearest Integer\tab \tab ceil()\tab \tab \tab NINT(), IDNINT()\par
}{\plain \*\cs7\f1\fs23 Nearest Whole Number\tab floor()\tab \tab \tab ANINT(), DNINT()\par
}{\plain \*\cs7\f1\fs23 Absolute Value\tab \tab abs(), fabs()\tab \tab ABS(), IABS(),\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab DABS(), CABS()\par
}{\plain \*\cs7\f1\fs23 Choose Largest\tab \tab #define MAX(a,b) (a)>(b)?(a):(b)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab MAX(), MAX0(),\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab MAX1(), DMAX1()\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab FORTRAN 66:\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab   AMAX0(), AMAX1()\par
}{\plain \*\cs7\f1\fs23 Choose Smallest\tab \tab #define MIN(a,b) (a)<(b)?(a):(b)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab MIN(), MIN0(),\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab MIN1(), DMIN1()\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab FORTRAN 66:\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab   AMIN0(), AMIN1()\par
}{\plain \*\cs7\f1\fs23 Square Root\tab \tab sqrt()\tab \tab \tab SQRT(), DSQRT(),\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab CSQRT()\par
}{\plain \*\cs7\f1\fs23 Exponential\tab \tab exp()\tab \tab \tab EXP(), DEXP(), CEXP()\par
}{\plain \*\cs7\f1\fs23 Natural Log\tab \tab log()\tab \tab \tab LOG(), ALOG(),\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab DLOG(), CLOG()\par
}{\plain \*\cs7\f1\fs23 Common Log\tab \tab log10()\tab \tab \tab LOG10(), ALOG10(),\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab DLOG10()\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Sine\tab \tab \tab sin()\tab \tab \tab SIN(), DSIN(), CSIN()\par
}{\plain \*\cs7\f1\fs23 Cosine\tab \tab \tab cos()\tab \tab \tab COS(), DCOS(), CCOS()\par
}{\plain \*\cs7\f1\fs23 Tangent\tab \tab \tab tan()\tab \tab \tab TAN(), DTAN()\par
}{\plain \*\cs7\f1\fs23 Arcsine\tab \tab \tab asin()\tab \tab \tab ASIN(), DASIN()\par
}{\plain \*\cs7\f1\fs23 Arccosine\tab \tab acos()\tab \tab \tab ACOS(), DACOS()\par
}{\plain \*\cs7\f1\fs23 Arctangent\tab \tab atan()\tab \tab \tab ATAN(), DATAN()\par
}{\plain \*\cs7\f1\fs23 Atan of Quotient\tab atan2()\tab \tab \tab ATAN2(,), DATAN2(,)\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Hyperbolic Sine\tab \tab sinh()\tab \tab \tab SINH(), DSINH()\par
}{\plain \*\cs7\f1\fs23 Hyperbolic Cosine\tab cosh()\tab \tab \tab COSH(), DCOSH()\par
}{\plain \*\cs7\f1\fs23 Hyperbolic Tangent\tab tanh()\tab \tab \tab TANH(), DTANH()\par
}{\plain \*\cs7\f1\fs23 Random Number\tab \tab rand(), srand()\tab \tab \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 SYNTAX:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Case Sensitive?\tab \tab YES\tab \tab \tab NO\par
}{\plain \*\cs7\f1\fs23 Name a program\tab \tab main()\tab \tab \tab PROGRAM prog_name\par
}{\plain \*\cs7\f1\fs23 Comment Begin\tab \tab /*\tab \tab \tab 'C'  \_or\_  '*' in\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab column 1\par
}{\plain \*\cs7\f1\fs23 Comment End\tab \tab */\tab \tab \tab <CARRIAGE RETURN>\par
}{\plain \*\cs7\f1\fs23 Begin Symbol\tab \tab \{\tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 End Symbol\tab \tab \}\tab \tab \tab END  w/any character\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab except '0' or <SPACE>\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab in column 6\tab \tab \par
}{\plain \*\cs7\f1\fs23 Statement Terminator\tab ;\tab \tab \tab <CARRIAGE RETURN>\par
}{\plain \*\cs7\f1\fs23 Include Files\tab \tab #include <filename.h>\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab $INCLUDE : 'FILENAME.INC'\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab #include "filename.h"\par
}{\plain \*\cs7\f1\fs23 Variable Names\tab \tab a\_zA\_Z0\_9_\tab \tab A\_Z0\_9\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab (31 chars max.)\tab \tab (6 chars max.)\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Functions\tab \tab float func_name (int x, y)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \{\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   return some_float;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab REAL FUNCTION FNAME (X,Y)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab FNAME = SOMEREAL\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab RETURN\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab END\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \_or\_\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab FUNCTION FNAME (X,Y)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab REAL FNAME\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab FNAME = SOMEREAL\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab RETURN\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab END\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Procedures\tab \tab proc_name (int x, y) SUBROUTINE SUB_NAME (X,Y)\par
}{\plain \*\cs7\f1\fs23 (Subroutines)\tab \tab \{\tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab      RETURN\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab      END\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Get Input\tab \tab scanf("%f", &sum);\tab READ *,SUM\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab scanf("%c", &ch);\tab    READ (4,7) CH\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab 7  FORMAT (A1)\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Print Output\tab \tab printf("A = %f\\n", A);\tab PRINT *, 'A = ', A/\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab printf("A = %f", A);\tab PRINT *, 'A = ', A\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab \_or\_\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab WRITE (*,8) A\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab 8  FORMAT('1',F8.8)\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab printf("\\n");\tab \tab PRINT*\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab \_or\_\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab WRITE(*,'(/)')\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab \_or\_\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab    WRITE (*,9)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab 9  FORMAT(/)\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 File Output\tab \tab FILE *file_id;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab file_id = fopen("filename", "w");\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab fprintf(file_id, "Any string\\n");\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab fclose(file_id);\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab OPEN (UNIT=4, FILE='FILE_NAME')\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab WRITE (4,8)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab FORMAT ('1',2X,'Any string',/)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab CLOSE (4)\tab \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Exit\tab \tab \tab exit(1); (Exits main())\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab RETURN  \_or\_  STOP\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 CONTROL STRUCTURES:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 If\_Then\tab \tab \tab if (x>y) \{\tab \tab IF (X.GT.Y) THEN\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab \tab ENDIF\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 If\_Then\_Else\tab \tab if (x>y) \{\tab \tab IF (X.GT.Y) THEN\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab else if (x==y) \{\tab ELSE IF (X.EQ.Y) THEN\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \} else \{\tab \tab ELSE\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab \tab ENDIF\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Arithmetic If\tab \tab if (x>y) ...\tab (For FORTRAN 66 compatibility)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab IF (X.GT.Y) ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab (limited)\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab (Not in ANSI FORTRAN\~77)\par
}{\plain \*\cs7\f1\fs23 While Loops\tab \tab while (count != 5) \{\tab DO WHILE (logical)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab \tab END DO\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 For Loops\tab \tab for (i=1;i<=11;i+=2) \{\tab DO 30 I=1,11,2\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab \tab 30 CONTINUE\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab for (i=10;i>=1;i\_\_) \{\tab DO 30 I=10,1,\_1\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab \tab 30 CONTINUE\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Case\tab \tab \tab switch (my_var) \{ \tab (Use If\_Then\_Else)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   case 'D' :\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab     ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab     break;\tab \tab \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   case 'Y':\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   case 'y':\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab     ...\tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab     break;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Goto (Logical)\tab \tab goto label_text;\tab GOTO S1\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab (S1 is in [1..99999])\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab label_text :\tab \tab S1 ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab (S1 is in col 1\_5)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Goto (Computed IF)\tab N/A\tab \tab (For FORTRAN 66 compatibility)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab GOTO (S1, S2,...Sn) I\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab S1 ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab S2 ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab Sn ...\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab \_or\_\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab (For FORTRAN 66 compatibility)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab GOTO I, (S1, S2,...Sn)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab S1 ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab S2 ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab Sn ...\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab \_same as\_\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab if i==1 goto label1\tab IF (I.EQ.1) GOTO S1\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab if i==2 goto label2\tab IF (I.EQ.2) GOTO S2\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab if i==n goto labeln\tab IF (I.EQ.n) GOTO Sn\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Goto (Arithmetic IF)\tab N/A\tab \tab \tab (Use is discouraged)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab IF (arith_exp < 0) S1, S2, S3\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \_same as\_\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab IF (arith_exp < 0) GOTO S1\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab IF (arith_exp = 0) GOTO S2\par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab IF (arith_exp > 0) GOTO S3}{\plain \f1\fs18 \par
}\pard\page 
\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs6\f2\fs32 }{\plain \*\cs6\b\f2\fs32 {\tc {C.5\tab C vs Pascal} \tcl2}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs7\f1\fs23 Description:\tab \tab C\tab \tab \tab Pascal\par
}{\plain \*\cs7\f1\fs23 ======================================================================\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 ARITHMETIC OPERATORS:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Addition\tab \tab +\tab \tab \tab +\par
}{\plain \*\cs7\f1\fs23 Subtraction\tab \tab \_\tab \tab \tab \_\par
}{\plain \*\cs7\f1\fs23 Multiplication\tab \tab *\tab \tab \tab *\par
}{\plain \*\cs7\f1\fs23 Division (real)\tab \tab /\tab \tab \tab /\par
}{\plain \*\cs7\f1\fs23 Division (integer)\tab /\tab \tab \tab DIV\par
}{\plain \*\cs7\f1\fs23 Modulus (real)\tab \tab fmod(), modf()\tab \tab N/A\par
}{\plain \*\cs7\f1\fs23 Modulus (integer)\tab %\tab \tab \tab MOD\par
}{\plain \*\cs7\f1\fs23 Exponentiation\tab \tab pow()\tab \tab \tab \_\_\_ NOT STANDARD \_\_\_\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 RELATIONAL OPERATORS:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Greater Than\tab \tab >\tab \tab \tab >\par
}{\plain \*\cs7\f1\fs23 Greater Then or Equal\tab >=\tab \tab \tab >=\par
}{\plain \*\cs7\f1\fs23 Less Than\tab \tab <\tab \tab \tab <\par
}{\plain \*\cs7\f1\fs23 Less Than or Equal\tab <=\tab \tab \tab <=\par
}{\plain \*\cs7\f1\fs23 Equal\tab \tab \tab ==\tab \tab \tab =\par
}{\plain \*\cs7\f1\fs23 Not Equal\tab \tab !=\tab \tab \tab <>\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 LOGICAL OPERATORS:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 And\tab \tab \tab &&\tab \tab \tab AND\par
}{\plain \*\cs7\f1\fs23 Or\tab \tab \tab ||\tab \tab \tab OR\par
}{\plain \*\cs7\f1\fs23 Not\tab \tab \tab !\tab \tab \tab NOT\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 ASSIGNMENT OPERATORS:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Assignment\tab \tab =\tab \tab \tab :=\par
}{\plain \*\cs7\f1\fs23 Assignment w/Add\tab i += 2;\tab \tab \tab I := I + (2);\par
}{\plain \*\cs7\f1\fs23 Assignment w/Sub\tab i \_= 4;\tab \tab \tab I := I \_ (4);\par
}{\plain \*\cs7\f1\fs23 Assignment w/Mult\tab x *= \_2.1;\tab \tab X := X * (\_2.1);\par
}{\plain \*\cs7\f1\fs23 Assignment w/Div\tab x /= 8.9;\tab \tab X := X / (8.9);\par
}{\plain \*\cs7\f1\fs23 Assignment w/Mod\tab x %= 7.3;\tab \tab X := X MOD (7.3);\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 INCREMENT AND DECREMENT STATEMENTS:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Post\_Increment\tab \tab i++;\tab \tab \tab I := I + 1;\par
}{\plain \*\cs7\f1\fs23 Post\_Decrement\tab \tab i\_\_;\tab \tab \tab I := I \_ 1;\par
}{\plain \*\cs7\f1\fs23 Pre\_Increment\tab \tab ++i;\tab \tab \tab I := I + 1;\par
}{\plain \*\cs7\f1\fs23 Pre\_Decrement\tab \tab \_\_i;\tab \tab \tab I := I \_ 1;\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 DATA TYPES:\tab \tab \tab \tab \tab (Precede with VAR)\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Character\tab \tab char\tab \tab \tab CHAR\par
}{\plain \*\cs7\f1\fs23 String\tab \tab \tab char str[n];\tab \tab STRING[n]\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab char * (pointer only)\tab STRING\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab (default size of 80)\par
}{\plain \*\cs7\f1\fs23 Integer\tab \tab \tab int\tab \tab \tab INTEGER\par
}{\plain \*\cs7\f1\fs23 Long Integer\tab \tab long\tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 Floating Point\tab \tab float\tab \tab \tab REAL\par
}{\plain \*\cs7\f1\fs23 Double\_Precision Float\tab double\tab \tab \par
}{\plain \*\cs7\f1\fs23 Double Double\_Precision\tab long double\tab \tab \par
}{\plain \*\cs7\f1\fs23 Complex\tab \tab \tab fcomplex (naautil.c)\tab (Create a record)\par
}{\plain \*\cs7\f1\fs23 Arrays\tab \tab \tab float A[3][2];\tab \tab A : ARRAY [1..3,1..2]\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab OF REAL\par
}{\plain \*\cs7\f1\fs23 Enumeration\tab \tab enum boolean \{NO,YES\};\tab TYPE ANS = (NO, YES);\par
}{\plain \*\cs7\f1\fs23 Boolean\tab \tab \tab \tab \tab \tab BOOLEAN\par
}{\plain \*\cs7\f1\fs23 Pointers\tab \tab int *ptr;\tab \tab PTR = ^INTEGER;\par
}{\plain \*\cs7\f1\fs23 Structures\tab \tab struct complex \{\tab TYPE COMPLEX_TYPE =\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab      RECORD\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   float r, i;\tab \tab        R, I : REAL\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \};\tab \tab \tab      END;\par
}{\plain \*\cs7\f1\fs23 File Pointers\tab \tab FILE *fptr;\tab \tab TEXT\par
}{\plain \*\cs7\f1\fs23 Ranges\tab \tab \tab \tab \tab \tab I : 1..80;\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 DATA TYPE INITIALIZATION:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Character\tab \tab char ch = 'c';\tab \tab CH := 'c';\par
}{\plain \*\cs7\f1\fs23 String\tab \tab \tab char *str = "A string";\tab STR := 'A string';\par
}{\plain \*\cs7\f1\fs23 Integer\tab \tab \tab int i = 5;\tab \tab I := 5;\par
}{\plain \*\cs7\f1\fs23 Long Integer\tab \tab int i = 5L;\tab \tab \par
}{\plain \*\cs7\f1\fs23 Floating Point\tab \tab float x = 123.4F;\tab X := 123.4;\par
}{\plain \*\cs7\f1\fs23 Floating Point\tab \tab float x = 1.0e\_2F;\tab X := 1.0E\_2;\par
}{\plain \*\cs7\f1\fs23 Double\_Precision Float\tab double x = 123.4;\tab \tab \par
}{\plain \*\cs7\f1\fs23 Double\_Precision Float\tab double x = 1e\_2;\tab \tab \par
}{\plain \*\cs7\f1\fs23 Double Double\_Precision\tab long double x = 123.4L;\tab \par
}{\plain \*\cs7\f1\fs23 Double Double\_Precision\tab long double x = 1e\_2L;\tab \par
}{\plain \*\cs7\f1\fs23 Complex\tab \tab \tab fcomplex c = \{6.2,7.1\};\tab (Create a record)\par
}{\plain \*\cs7\f1\fs23 Arrays\tab \tab \tab float A[3][2] = \{\{4,2\},\{1,\_2\},\{0,5\}\};\tab \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab A(2,2) := \_2;\par
}{\plain \*\cs7\f1\fs23 Enumeration\tab \tab boolean ANS = NO;\tab TYPE ANS = (NO, YES);\par
}{\plain \*\cs7\f1\fs23 Boolean\tab \tab \tab \tab \tab \tab VAR BOOLEAN FOUND;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab FOUND := FALSE;\par
}{\plain \*\cs7\f1\fs23 Pointers\tab \tab char *, ... *\tab \tab ^\par
}{\plain \*\cs7\f1\fs23 Structures\tab \tab struct complex \{\tab RECORD1 := RECORD2;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   float r = 12.0;\tab \tab   \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   float i = 7.0;\tab \tab   \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \};\tab \tab \tab   \par
}{\plain \*\cs7\f1\fs23 File Pointers\tab \tab FILE *fptr;\tab \tab OUTFILE : TEXT;\par
}{\plain \*\cs7\f1\fs23 Ranges\tab \tab \tab \tab \tab \tab I := 39;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab (1..80 is valid above)\par
}{\plain \*\cs7\f1\fs23 Constants\tab \tab #define PI 3.1415\tab CONST PI = 3.1415;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab const char DOLLAR = '$'; CONST DOLLAR = '$';\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 DATA TYPE CONVERSION:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Character\tab \tab (char) i\tab \tab CHR(ORD(0) + i);\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab (where i = 0..9)\par
}{\plain \*\cs7\f1\fs23 String\tab \tab \tab (char *) x\tab \tab \par
}{\plain \*\cs7\f1\fs23 Integer\tab \tab \tab (int) ch\tab \tab ORD(ch) \_ ORD('0');\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab (where ch = '0'..'9')\par
}{\plain \*\cs7\f1\fs23 Long Integer\tab \tab (long) x\par
}{\plain \*\cs7\f1\fs23 Floating Point\tab \tab (float) x\tab \tab (INTEGERs migrate up\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab to REALs)\par
}{\plain \*\cs7\f1\fs23 Double\_Precision Float\tab (double) x\tab \tab \par
}{\plain \*\cs7\f1\fs23 Double Double\_Precision\tab (long double) x\par
}{\plain \*\cs7\f1\fs23 Complex\tab \tab \tab (complex) x\tab \tab \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 STANDARD FUNCTIONS:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Truncation\tab \tab trunc() (in trunc.c)\tab TRUNC()\par
}{\plain \*\cs7\f1\fs23 Round\tab \tab \tab round() (in round.c)\tab ROUND()\par
}{\plain \*\cs7\f1\fs23 Nearest Integer\tab \tab ceil()\tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 Nearest Whole Number\tab floor()\tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 Absolute Value\tab \tab abs(), fabs()\tab \tab ABS()\par
}{\plain \*\cs7\f1\fs23 Odd (INTEGER)\tab \tab #define ODD(a) (a%2)?(1):(0)\tab ODD()\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Square Root\tab \tab sqrt()\tab \tab \tab SQRT()\par
}{\plain \*\cs7\f1\fs23 Square\tab \tab \tab \tab \tab \tab SQR()\par
}{\plain \*\cs7\f1\fs23 Exponential\tab \tab exp()\tab \tab \tab EXP()\par
}{\plain \*\cs7\f1\fs23 Natural Log\tab \tab log()\tab \tab \tab LN()\par
}{\plain \*\cs7\f1\fs23 Common Log\tab \tab log10()\tab \tab \tab (LN() / LN(10.0))\par
}{\plain \*\cs7\f1\fs23 Power of Ten (INTEGER)\tab pow(10.0,x)\tab \tab PWROFTEN(X)\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Sine\tab \tab \tab sin()\tab \tab \tab SIN()\par
}{\plain \*\cs7\f1\fs23 Cosine\tab \tab \tab cos()\tab \tab \tab COS()\par
}{\plain \*\cs7\f1\fs23 Tangent\tab \tab \tab tan()\tab \tab \tab (SIN() / COS())\par
}{\plain \*\cs7\f1\fs23 Arcsine\tab \tab \tab asin()\tab \tab \tab ATAN(X/SQR(\_X*X+1))\par
}{\plain \*\cs7\f1\fs23 Arccosine\tab \tab acos()\tab \tab \tab \_ATAN(X/SQR(\_X*X+1))\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab  + 1.5708\par
}{\plain \*\cs7\f1\fs23 Arctangent\tab \tab atan()\tab \tab \tab ATAN()\par
}{\plain \*\cs7\f1\fs23 Atan of Quotient\tab atan2()\tab \tab \tab \par
}{\plain \*\cs7\f1\fs23 Hyperbolic Sine\tab \tab sinh()\tab \tab \tab ((EXP(X) + EXP(\_X))\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab    / 2.0)\par
}{\plain \*\cs7\f1\fs23 Hyperbolic Cosine\tab cosh()\tab \tab \tab ((EXP(X) \_ EXP(\_X))\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab    / 2.0)\par
}{\plain \*\cs7\f1\fs23 Hyperbolic Tangent\tab tanh()\tab \tab \tab (EXP(X) \_ EXP(\_X)) / \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab   (EXP(X) + EXP(\_X))\par
}{\plain \*\cs7\f1\fs23 Random Number\tab \tab rand(), srand()\tab \tab \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 SYNTAX:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 Case Sensitive?\tab \tab YES\tab \tab \tab NO\par
}{\plain \*\cs7\f1\fs23 Name a program\tab \tab main()\tab \tab \tab PROGRAM prog_name;\par
}{\plain \*\cs7\f1\fs23 Comment Begin\tab \tab /*\tab \tab \tab (*  \_or\_  \{\par
}{\plain \*\cs7\f1\fs23 Comment End\tab \tab */\tab \tab \tab *)  \_or\_  \}\par
}{\plain \*\cs7\f1\fs23 Begin Symbol\tab \tab \{\tab \tab \tab BEGIN\par
}{\plain \*\cs7\f1\fs23 End Symbol\tab \tab \}\tab \tab \tab END  \_or\_  END.\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab (last one only)\par
}{\plain \*\cs7\f1\fs23 Statement Terminator\tab ;\tab \tab \tab ;  \_or\_  Nothing if\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab preceding an END or\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab ELSE statement\par
}{\plain \*\cs7\f1\fs23 Include Files\tab \tab #include <filename.h>\tab \{$I FILENAME.INC\}\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab #include "filename.h"\par
}{\plain \*\cs7\f1\fs23 Variable Names\tab \tab a\_zA\_Z0\_9_\tab \tab A\_Z0\_9\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab (31 chars max.)\tab \tab (? chars max.)\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Functions\tab \tab float func_name (int x, y)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \{\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   return some_float;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab FUNCTION FNAME (X,Y: REAL) : REAL;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab FNAME := SOMEREAL;\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Procedures\tab \tab proc_name (int x, y)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab PROCEDURE PROC_NAME (X,Y: REAL);\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Get Input\tab \tab scanf("%f", &sum);\tab READLN (SUM);\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab scanf("%c", &ch);\tab READ (CH);\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Print Output\tab \tab printf("A = %f\\n", A);\tab WRITELN ('A = ', A);\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab printf("A = %f", A);\tab WRITE ('A = ', A);\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab printf("\\n");\tab \tab WRITELN;\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 File Output\tab \tab #include <stdio.h>\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab FILE *file_id;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab file_id = fopen("filename", "w");\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab fprintf(file_id, "Any string here\\n");\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab fclose(file_id);\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab VAR file_id : TEXT;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab ASSIGN (file_id, outfile);\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab REWRITE (file_id);\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab WRITELN (file_id, 'Any string.');\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab CLOSE (file_id);\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Exit\tab \tab \tab exit(1); (Exits main())\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab Exit (block name)\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 CONTROL STRUCTURES:\par
}{\plain \*\cs7\f1\fs23 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs7\f1\fs23 If\_Then\_Else\tab \tab if (x>y)\tab \tab IF X > Y THEN\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \{\tab \tab \tab   BEGIN\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab     ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab \tab   END\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab else if (x==y) \{\tab ELSE IF X = Y THEN\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \} else \{\tab \tab ELSE\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 While Loops\tab \tab while (count != 5)\tab WHILE count <> 5 DO\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \{\tab \tab \tab BEGIN\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab  ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab \tab END\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 For Loops\tab \tab for (i=1;i<=10;i++)\tab FOR I := 1 TO 10 DO\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \{\tab \tab \tab BEGIN\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab  ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab \tab END\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab for (i=10;i>=1;i\_\_)\tab FOR I := 10 DOWNTO 1\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \{\tab \tab \tab DO BEGIN\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab  ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab \tab END\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Case\tab \tab \tab switch (my_var) \{ \tab CASE MY_VAR OF\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   case 'D' :\tab \tab   'D' : BEGIN\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab     ...\tab \tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab     break;\tab \tab \tab END;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   case 'Y': case 'y':    'Y', 'y' : ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab     ...\tab \tab \tab ("break" not needed)\tab \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab     break;\tab \tab \par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \}\tab \tab \tab END\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Repeat\tab \tab \tab do \{\tab \tab \tab REPEAT\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   ...\tab \tab \tab   ...\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab (No BEGIN/END needed)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \} while (i < 7);\tab UNTIL (I < 7);\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 With\tab \tab \tab No equivalent\tab \tab (From RECORD variable\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab ME.SSAN)\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab WITH record_var DO\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab   \tab \tab \tab   SSAN := 1234567890;\par
}{\plain \*\cs7\f1\fs23 \par
}{\plain \*\cs7\f1\fs23 Goto\tab \tab \tab goto label_text;\tab LABEL 20, 30;\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab ... label_text : ...\tab GOTO label_number\par
}{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab (1..9999)\par
}\sect \sectd \ds1\sbknone\footery1380\linemod1\endnhere 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 C-\chpgn   Language Comparison Charts\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab Language Comparison Charts  C-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs7\f1\fs23 \tab \tab \tab \tab \tab \tab ... label_number : ...}{\plain \f1\fs18 \par
}\pard\page 
\sect \sectd \ds1\sbknone\pgnrestart\pgndec\pgnx0\pgny720\footery1380\linemod1\endnhere\facingp 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 D-\chpgn   Sample Programs in Other Languages\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab Sample Programs in Other Languages  D-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1\pnindent2880\pnhang{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1\pnindent2880\pnhang{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1\pnindent2880\pnhang{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1\pnindent2880\pnhang{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1\pnindent2880\pnhang{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1\pnindent2880\pnhang{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1\pnindent2880\pnhang{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1\pnindent2880\pnhang{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1\pnindent2880\pnhang}

\pard \fi-2880\li2880\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs3\f2\fs40 {\tc {}{\plain \*\cs3\b\f2\fs40 Appendix D:\tab Sample Programs in Other 
Languages}}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}{\plain \*\cs5\fs22 This appendix is long, but important.  It lists the example programs of Simpson's Composite Rule for Integration - 
Algorithm 4.1, in six different languages!  Each of these programs can be found in the LANGS sub-directory of 
the distribution diskettes.  These files are organized as follows:\par
}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs7\f1\fs23                             LANGS\par
}{\plain \*\cs7\f1\fs23                               {\f5 \'2a}\par
}{\plain \*\cs7\f1\fs23    {\f5 \'2b}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'30}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'30}{\f5 \'29}{\f5 \'29}{\f5 \'32}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'30}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'30}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'29}{\f5 \'2c}   \par
}{\plain \*\cs7\f1\fs23    {\f5 \'52}           {\f5 \'52}           {\f5 \'52}           {\f5 \'52}           {\f5 \'52}           {\f5 \'52} \par
}{\plain \*\cs7\f1\fs23   ADA        BASIC         C          C++       FORTRAN      PASCAL  \par
}{\plain \*\cs7\f1\fs23    {\f5 \'52}           {\f5 \'52}           {\f5 \'52}           {\f5 \'52}           {\f5 \'52}           {\f5 \'52} \par
}{\plain \*\cs7\f1\fs23 SIMPSON.ADA SIMPSON.BAS SIMPSON.C  SIMPSON.CPP SIMPSON.FOR SIMPSON.PAS\par
}{\plain \*\cs7\f1\fs23 NAAUTIL.ADA SIMPSON.IN  SIMPSON.H  SIMPSON.HPP SIMPSON.IN  NAAUTIL.INC\par
}{\plain \*\cs7\f1\fs23 SIMPSON.IN  SIMPSON.OUT SIMPSON.IN SIMPSON.IN  SIMPSON.OUT NAAMATH.INC\par
}{\plain \*\cs7\f1\fs23 SIMPSON.OUT            SIMPSON.OUT SIMPSON.OUT             SIMPSON.IN\par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs7\f1\fs23                                                            SIMPSON.OUT}{\plain \f1\fs18 \par
}\pard\page 
\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs6\f2\fs32 }{\plain \*\cs6\b\f2\fs32 {\tc {D.1\tab Ada} \tcl2}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs8\b\f2\fs26 }{\plain \*\cs8\b\f2\fs26 {\tc {D.1.1\tab SIMPSON.ADA} \tcl3}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}\sect \sectd \ds1\sbknone\marglsxn1980\margrsxn1440\footery1380\linemod1\linerestart\linecont\linex-720\endnhere 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 D-\chpgn   Sample Programs in Other Languages\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab Sample Programs in Other Languages  D-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs4\f1\fs18 \_\_ FILE NAME: SIMPSON.ADA\par
}{\plain \*\cs4\f1\fs18 \_\_ LANGUAGE:  ADA\par
}{\plain \*\cs4\f1\fs18 \_\_ COMPILER:  Meridian Ada 4.1\par
}{\plain \*\cs4\f1\fs18 \_\_ STATUS:    Not tested yet\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \_\_ ****************************************************************************\par
}{\plain \*\cs4\f1\fs18 \_\_ \tab \tab Composite Simpson's Rule \_ Algorithm 4.1\par
}{\plain \*\cs4\f1\fs18 \_\_ ****************************************************************************\par
}{\plain \*\cs4\f1\fs18 \_\_\par
}{\plain \*\cs4\f1\fs18 \_\_                                 {\f4 \'21}b\par
}{\plain \*\cs4\f1\fs18 \_\_ To approximate the integral I = {\f5 \'2a}  f(x) dx:\par
}{\plain \*\cs4\f1\fs18 \_\_                                 {\f4 \'22}a\par
}{\plain \*\cs4\f1\fs18 \_\_\par
}{\plain \*\cs4\f1\fs18 \_\_ INPUT endpoints a, b; positive integer n; the function f():\par
}{\plain \*\cs4\f1\fs18 \_\_\par
}{\plain \*\cs4\f1\fs18 \_\_ OUTPUT approximation XI to I.\par
}{\plain \*\cs4\f1\fs18 \_\_\par
}{\plain \*\cs4\f1\fs18 \_\_ ****************************************************************************\par
}{\plain \*\cs4\f1\fs18 \_\_ *\tab  Written by:  Harold A. Toomey, CARE\_FREE SOFTWARE, 2Q 1991, v4.0     *\par
}{\plain \*\cs4\f1\fs18 \_\_ ****************************************************************************\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 with naa_util; use naa_util;\tab \_\_ Numerical Analysis Algorithms utilities\par
}{\plain \*\cs4\f1\fs18 with math_lib; use math_lib;\tab \_\_ Contains several useful math functions\par
}{\plain \*\cs4\f1\fs18 with text_io;  use text_io;\tab \_\_ For file I/O\par
}{\plain \*\cs4\f1\fs18 with ada_io;   use ada_io;\tab \_\_ For easier text, integer and float I/O\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab \_\_ NOTE: ada_io is supplied with the Meridian\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab \_\_ Ada Compiler\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 procedure simpson is\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \_\_ *************\par
}{\plain \*\cs4\f1\fs18   \_\_ * constants *\par
}{\plain \*\cs4\f1\fs18   \_\_ *************\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \_\_ NOTE: PI is defined in the package math_lib to 40 decimal places.\par
}{\plain \*\cs4\f1\fs18   outfile   : constant := "simpson.out";    \_\_ Default name of the output file\par
}{\plain \*\cs4\f1\fs18   eq_text_f : constant := "f(x) = sin(x)";  \_\_ Needs updating  $\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \_\_ *********\par
}{\plain \*\cs4\f1\fs18   \_\_ * types *\par
}{\plain \*\cs4\f1\fs18   \_\_ *********\par
}{\plain \*\cs4\f1\fs18   type file_type is limited private;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \_\_ *************\par
}{\plain \*\cs4\f1\fs18   \_\_ * variables *\par
}{\plain \*\cs4\f1\fs18   \_\_ *************\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   a, b, h, x, xi, xi0, xi1, xi2 : float;\par
}{\plain \*\cs4\f1\fs18   n       : positive;\par
}{\plain \*\cs4\f1\fs18   title   : string(1..80);\par
}{\plain \*\cs4\f1\fs18   file_id : file_type;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \_\_ **********************************\par
}{\plain \*\cs4\f1\fs18   \_\_ * LOCAL PROCEDURES AND FUNCTIONS *\par
}{\plain \*\cs4\f1\fs18   \_\_ **********************************\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \_\_ **************************************************************************\par
}{\plain \*\cs4\f1\fs18   \_\_ * f(x) \_ Function to evaluate, f(x).  Needs updating $.\tab \tab       *\par
}{\plain \*\cs4\f1\fs18   \_\_ **************************************************************************\par
}{\plain \*\cs4\f1\fs18   function f(x : in float) return float is\par
}{\plain \*\cs4\f1\fs18   begin  \_\_ f\par
}{\plain \*\cs4\f1\fs18     return (sin(x));\par
}{\plain \*\cs4\f1\fs18   end f;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \_\_ **************************************************************************\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \_\_ ********\par
}{\plain \*\cs4\f1\fs18 \_\_ * MAIN *\par
}{\plain \*\cs4\f1\fs18 \_\_ ********\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 begin\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \_\_ **********\par
}{\plain \*\cs4\f1\fs18   \_\_ * INPUTS *\par
}{\plain \*\cs4\f1\fs18   \_\_ **********\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   title := get_title;\tab \tab \_\_ Prompts for optional comments\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   put_line ("Composite Simpson's Rule \_ Algorithm 4.1");\par
}{\plain \*\cs4\f1\fs18   new_line;\par
}{\plain \*\cs4\f1\fs18   put ("Enter endpoint a: ");\par
}{\plain \*\cs4\f1\fs18   get_line (a);\par
}{\plain \*\cs4\f1\fs18   put ("Enter endpoint b: ");\par
}{\plain \*\cs4\f1\fs18   get_line (b);\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   loop\par
}{\plain \*\cs4\f1\fs18     put ("Enter number of intervals on [a,b], n: ");\par
}{\plain \*\cs4\f1\fs18     get_line (n);\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \_\_  Place an exception handler here for better use of ADA.\par
}{\plain \*\cs4\f1\fs18     if n <= 0 then\tab \tab \_\_ ERROR \_ n can not be negative.\par
}{\plain \*\cs4\f1\fs18       put_line ("ERROR \_ n must be greater than zero.");\par
}{\plain \*\cs4\f1\fs18     end if;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18     exit when n > 0;\par
}{\plain \*\cs4\f1\fs18   end loop;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \_\_ *************\par
}{\plain \*\cs4\f1\fs18   \_\_ * ALGORITHM *\par
}{\plain \*\cs4\f1\fs18   \_\_ *************\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \_\_ STEP #1\par
}{\plain \*\cs4\f1\fs18   h := (b \_ a)/n;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \_\_ STEP #2\par
}{\plain \*\cs4\f1\fs18   xi0 := f(a) + f(b);\par
}{\plain \*\cs4\f1\fs18   xi1 := 0.0;\tab \tab \tab \_\_ Summation of f(x(2i\_1))\par
}{\plain \*\cs4\f1\fs18   xi2 := 0.0;\tab \tab \tab \_\_ Summation of f(x(2i))\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \_\_ STEP #3\par
}{\plain \*\cs4\f1\fs18   for i in 1..n\_1 loop\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18       \_\_ STEP #4\par
}{\plain \*\cs4\f1\fs18       x := a + i*h;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18       \_\_ STEP #5\par
}{\plain \*\cs4\f1\fs18       if i mod 2 = 0 then\par
}{\plain \*\cs4\f1\fs18         xi2 := xi2 + f(x);\tab \_\_ For even i\par
}{\plain \*\cs4\f1\fs18       else\par
}{\plain \*\cs4\f1\fs18         xi1 := xi1 + f(x);\tab \_\_ For odd i\par
}{\plain \*\cs4\f1\fs18       end if;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   end loop;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \_\_ STEP #6\par
}{\plain \*\cs4\f1\fs18   xi := h*(xi0 + 2.0*xi2 + 4.0*xi1) / 3.0;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \_\_ ***********\par
}{\plain \*\cs4\f1\fs18   \_\_ * OUTPUTS *\par
}{\plain \*\cs4\f1\fs18   \_\_ ***********\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \_\_ STEP #7\par
}{\plain \*\cs4\f1\fs18   \_\_ Write output to the screen.\par
}{\plain \*\cs4\f1\fs18   print_title (title);\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   put_line ("Composite Simpson`s Rule \_ Algorithm 4.1");\par
}{\plain \*\cs4\f1\fs18   new_line;\par
}{\plain \*\cs4\f1\fs18   put_line (eq_text_f, " from ", a, " to ", b, ".");\par
}{\plain \*\cs4\f1\fs18   new_line;\par
}{\plain \*\cs4\f1\fs18   put_line ("n = ", n, " intervals on [a,b].");\par
}{\plain \*\cs4\f1\fs18   put_line ("Interval number h = ", h);\par
}{\plain \*\cs4\f1\fs18   new_line;\par
}{\plain \*\cs4\f1\fs18   put_line ("     {\f4 \'21}", b);\par
}{\plain \*\cs4\f1\fs18   put_line ("XI = {\f5 \'2a}  f(x) dx = ", xi);\par
}{\plain \*\cs4\f1\fs18   put_line ("     {\f4 \'22}", a);\par
}{\plain \*\cs4\f1\fs18   new_line;\par
}{\plain \*\cs4\f1\fs18   put_line ("Required ", n+1, " functional evaluations.");\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \_\_ Write output to a file.\par
}{\plain \*\cs4\f1\fs18   \_\_ Open outfile for output.\par
}{\plain \*\cs4\f1\fs18   create (file => file_id, mode => out_file, name => outfile);\tab \_\_ See 14.3.10\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   print_title_to_outfile (file_id, title);\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   new_line (file_id);\par
}{\plain \*\cs4\f1\fs18   put_line (file_id, "Composite Simpson`s Rule \_ Algorithm 4.1");\par
}{\plain \*\cs4\f1\fs18   new_line (file_id);\par
}{\plain \*\cs4\f1\fs18   put_line (file_id, eq_text_f, " from ", a, " to ", b, ".");\par
}{\plain \*\cs4\f1\fs18   new_line (file_id);\par
}{\plain \*\cs4\f1\fs18   put_line (file_id, "n = ", n, " intervals on [a,b].");\par
}{\plain \*\cs4\f1\fs18   put_line (file_id, "Interval number h = ", h);\par
}{\plain \*\cs4\f1\fs18   new_line (file_id);\par
}{\plain \*\cs4\f1\fs18   put_line (file_id, "     {\f4 \'21}", b);\par
}{\plain \*\cs4\f1\fs18   put_line (file_id, "XI = {\f5 \'2a}  f(x) dx = ", xi);\par
}{\plain \*\cs4\f1\fs18   put_line (file_id, "     {\f4 \'22}", a);\par
}{\plain \*\cs4\f1\fs18   new_line (file_id);\par
}{\plain \*\cs4\f1\fs18   put_line (file_id, "Required ", n+1, " functional evaluations.");\par
}{\plain \*\cs4\f1\fs18   close (file => file_id);\tab \tab \_\_ Closes output file.\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   new_line;\par
}{\plain \*\cs4\f1\fs18   put_line ("Output saved into file '", outfile, "'.");\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 end simpson;  \tab \tab \tab \tab \_\_ STOP\par
}{\plain \*\cs4\f1\fs18 \_\_ ****************************************************************************\par
}{\plain \*\cs4\f1\fs18 \_\_ *\tab     Copyright (C) 1991, Harold A. Toomey, All Rights Reserved.\tab       *\par
}\sect \sectd \ds1\sbknone\footery1380\linemod1\endnhere 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 D-\chpgn   Sample Programs in Other Languages\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab Sample Programs in Other Languages  D-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs4\f1\fs18 \_\_ ****************************************************************************}{\plain \f1\fs18 }{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs8\b\f2\fs26 }{\plain \*\cs8\b\f2\fs26 {\tc {D.1.2\tab NAAUTIL.ADA} \tcl3}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}\sect \sectd \ds1\sbknone\marglsxn1980\margrsxn1440\footery1380\linemod1\linerestart\linecont\linex-720\endnhere 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 D-\chpgn   Sample Programs in Other Languages\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab Sample Programs in Other Languages  D-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs4\f1\fs18 \_\_ ****************************************************************************\par
}{\plain \*\cs4\f1\fs18 \_\_ * PACKAGE:  NAA_UTIL.ADA                                             \tab       *\par
}{\plain \*\cs4\f1\fs18 \_\_ * VERSION:  4.0                                                            *\par
}{\plain \*\cs4\f1\fs18 \_\_ *                                                                          *\par
}{\plain \*\cs4\f1\fs18 \_\_ * WRITTEN BY:  Harold A. Toomey, CARE\_FREE SOFTWARE                        *\par
}{\plain \*\cs4\f1\fs18 \_\_ * DATE:        22 May 1991  (2Q 1991)                                      *\par
}{\plain \*\cs4\f1\fs18 \_\_ *                                                                          *\par
}{\plain \*\cs4\f1\fs18 \_\_ * DESCRIPTION:                                                             *\par
}{\plain \*\cs4\f1\fs18 \_\_ *   Contains useful utilities (functions and procedures) to be used with   *\par
}{\plain \*\cs4\f1\fs18 \_\_ *   "Numerical Analysis Algorithms in Ada" v4.0.                           *\par
}{\plain \*\cs4\f1\fs18 \_\_ *                                                                          *\par
}{\plain \*\cs4\f1\fs18 \_\_ * VARIABLES:                                                               *\par
}{\plain \*\cs4\f1\fs18 \_\_ *   numchars : integer;                                                    *\par
}{\plain \*\cs4\f1\fs18 \_\_ *                                                                          *\par
}{\plain \*\cs4\f1\fs18 \_\_ * FUNCTIONS:                                                               *\par
}{\plain \*\cs4\f1\fs18 \_\_ *   get_title()                                                            *\par
}{\plain \*\cs4\f1\fs18 \_\_ *                                                                          *\par
}{\plain \*\cs4\f1\fs18 \_\_ * PROCEDURES:                                                              *\par
}{\plain \*\cs4\f1\fs18 \_\_ *   print_title()                                                          *\par
}{\plain \*\cs4\f1\fs18 \_\_ *   print_title_to_file()                                                  *\par
}{\plain \*\cs4\f1\fs18 \_\_ *                                                                          *\par
}{\plain \*\cs4\f1\fs18 \_\_ ****************************************************************************\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 with ada_io;  use ada_io;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \_\_ ****************************************************************************\par
}{\plain \*\cs4\f1\fs18 \_\_  Package specification\par
}{\plain \*\cs4\f1\fs18 \_\_ ****************************************************************************\par
}{\plain \*\cs4\f1\fs18 package NAA_UTIL is\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   numchars : integer;\tab \tab \_\_ Stores title length in characters.\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   function get_title return string;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   procedure print_title(\par
}{\plain \*\cs4\f1\fs18       file_id : in file_type;\par
}{\plain \*\cs4\f1\fs18       title   : in string\par
}{\plain \*\cs4\f1\fs18   );\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   procedure print_title_to_outfile(\par
}{\plain \*\cs4\f1\fs18       file_id : in file_type;\par
}{\plain \*\cs4\f1\fs18       title   : in string\par
}{\plain \*\cs4\f1\fs18   );\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 end NAA_UTIL;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \_\_ ****************************************************************************\par
}{\plain \*\cs4\f1\fs18 \_\_  Package body\par
}{\plain \*\cs4\f1\fs18 \_\_ ****************************************************************************\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 package body NAA_UTIL is\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs4\f1\fs18 \_\_ get_title() \_ Prompts for an optional title.\par
}{\plain \*\cs4\f1\fs18 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 function get_title return string is\par
}{\plain \*\cs4\f1\fs18   title : string(1..80);\par
}{\plain \*\cs4\f1\fs18 begin  \_\_ get_title\par
}{\plain \*\cs4\f1\fs18   for i in 1..79 loop\tab \tab \_\_ Print the NAA banner\par
}{\plain \*\cs4\f1\fs18     put ("\_");\par
}{\plain \*\cs4\f1\fs18   end loop;\par
}{\plain \*\cs4\f1\fs18   new_line;\par
}{\plain \*\cs4\f1\fs18   put_line(ht, ht, "'Numerical Analysis Algorithms in Ada' v4.0");\par
}{\plain \*\cs4\f1\fs18   for i in 1..79 loop\par
}{\plain \*\cs4\f1\fs18     put ("\_");\par
}{\plain \*\cs4\f1\fs18   end loop;\par
}{\plain \*\cs4\f1\fs18   new_line;\tab \tab \tab \_\_ Get the title\par
}{\plain \*\cs4\f1\fs18   put_line ("Enter a title [ie \_ Set 2.1,  Problem 2 a) ].");\par
}{\plain \*\cs4\f1\fs18   put ("\_\_\_\_> ");\par
}{\plain \*\cs4\f1\fs18   get_line (title);\par
}{\plain \*\cs4\f1\fs18   numchars := title'length;\tab \_\_ Numchars stores the length of the title.\par
}{\plain \*\cs4\f1\fs18   return (title);\par
}{\plain \*\cs4\f1\fs18 end get_title;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs4\f1\fs18 \_\_ print_title() \_ Prints NAA banner and title to the screen.\par
}{\plain \*\cs4\f1\fs18 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 procedure print_title (file_id : in file_type, title : in string) is\par
}{\plain \*\cs4\f1\fs18 begin  \_\_ print_title\par
}{\plain \*\cs4\f1\fs18   for i in 1..79 loop\tab \tab \_\_ Print the NAA banner\par
}{\plain \*\cs4\f1\fs18     put ("\_");\par
}{\plain \*\cs4\f1\fs18   end loop;\par
}{\plain \*\cs4\f1\fs18   new_line;\par
}{\plain \*\cs4\f1\fs18   put_line(ht, ht, "'Numerical Analysis Algorithms in Ada' v4.0");\par
}{\plain \*\cs4\f1\fs18   for i in 1..79 loop\par
}{\plain \*\cs4\f1\fs18     put ("\_");\par
}{\plain \*\cs4\f1\fs18   end loop;\par
}{\plain \*\cs4\f1\fs18   new_line;\par
}{\plain \*\cs4\f1\fs18   if numchars > 0 then\par
}{\plain \*\cs4\f1\fs18     put_line (title);\tab \tab \_\_ Print the title\par
}{\plain \*\cs4\f1\fs18     new_line;\par
}{\plain \*\cs4\f1\fs18   end if;\par
}{\plain \*\cs4\f1\fs18 end print_title;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs4\f1\fs18 \_\_ print_title_to_outfile() \_ Prints NAA banner and title to the output file.\par
}{\plain \*\cs4\f1\fs18 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 procedure print_title_to_outfile (file_id : in file_type, title : in string) is\par
}{\plain \*\cs4\f1\fs18 begin  \_\_ print_title_to_outfile\par
}{\plain \*\cs4\f1\fs18   for i in 1..79 loop\tab \tab \_\_ Print the NAA banner\par
}{\plain \*\cs4\f1\fs18     put (file_id, "\_");\par
}{\plain \*\cs4\f1\fs18   end loop;\par
}{\plain \*\cs4\f1\fs18   new_line (file_id);\par
}{\plain \*\cs4\f1\fs18   put_line(file_id, ht, ht, "'Numerical Analysis Algorithms in Ada' v4.0");\par
}{\plain \*\cs4\f1\fs18   for i in 1..79 loop\par
}{\plain \*\cs4\f1\fs18     put (file_id, "\_");\par
}{\plain \*\cs4\f1\fs18   end loop;\par
}{\plain \*\cs4\f1\fs18   new_line (file_id);\par
}{\plain \*\cs4\f1\fs18   if numchars > 0 then\par
}{\plain \*\cs4\f1\fs18     put_line (file_id, title);\tab \_\_ Print the title\par
}{\plain \*\cs4\f1\fs18     new_line (file_id);\par
}{\plain \*\cs4\f1\fs18   end if;\par
}{\plain \*\cs4\f1\fs18 end print_title_to_outfile;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 end NAA_UTIL;\tab \_\_ end package body NAA_UTIL\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \_\_ ****************************************************************************\par
}{\plain \*\cs4\f1\fs18 \_\_ *\tab    Copyright (C) 1991, Harold A. Toomey, All Rights Reserved.\tab       *\par
}\sect \sectd \ds1\sbknone\footery1380\linemod1\endnhere 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 D-\chpgn   Sample Programs in Other Languages\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab Sample Programs in Other Languages  D-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs4\f1\fs18 \_\_ ****************************************************************************}{\plain \f1\fs18 }{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs8\b\f2\fs26 }{\plain \*\cs8\b\f2\fs26 {\tc {D.1.3\tab SIMPSON.IN} \tcl3}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}{\plain \f1\fs18 NAA v4.0 Sample Output\par
}{\plain \f1\fs18 0.0\par
}{\plain \f1\fs18 3.14159265358979324\par
}{\plain \f1\fs18 20\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs8\b\f2\fs26 }{\plain \*\cs8\b\f2\fs26 {\tc {D.1.4\tab SIMPSON.OUT} \tcl3}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}{\plain \f1\fs18 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \f1\fs18 \tab \tab 'Numerical Analysis Algorithms in Ada' v4.0\par
}{\plain \f1\fs18 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 NAA v4.0 Sample Output\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 Composite Simpson's Rule \_ Algorithm 4.1\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 f(x) = sin(x) from 0 to 3.14159.\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 n = 20 intervals on [a,b].\par
}{\plain \f1\fs18 Interval number h = 0.15708\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18      {\f4 \'21}3.14159\par
}{\plain \f1\fs18 XI = {\f5 \'2a}  f(x) dx = 2.0000067844\par
}{\plain \f1\fs18      {\f4 \'22}0\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 Required 21 functional evaluations.\par
}{\plain \f1\fs18 \par
}\pard\page 
\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs6\f2\fs32 }{\plain \*\cs6\b\f2\fs32 {\tc {D.2\tab BASIC} \tcl2}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs8\b\f2\fs26 }{\plain \*\cs8\b\f2\fs26 {\tc {D.2.1\tab SIMPSON.BAS} \tcl3}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}{\plain \f1\fs18 10  'FILE NAME: SIMPSON.BAS\par
}{\plain \f1\fs18 20  'LANGUAGE:  BASIC\par
}{\plain \f1\fs18 30  'COMPILER:  Microsoft GW\_BASIC Version 3.20\par
}{\plain \f1\fs18 40  'STATUS:    Compiles and runs correctly\par
}{\plain \f1\fs18 50  '\par
}{\plain \f1\fs18 60  '**************************************************************************\par
}{\plain \f1\fs18 70  '\tab \tab Composite Simpson's Rule \_ Algorithm 4.1\par
}{\plain \f1\fs18 80  '**************************************************************************\par
}{\plain \f1\fs18 90  '\par
}{\plain \f1\fs18 100 '                                  {\f4 \'21}b\par
}{\plain \f1\fs18 110 '  To approximate the integral I = {\f5 \'2a}  f(x) dx:\par
}{\plain \f1\fs18 120 '                                  {\f4 \'22}a\par
}{\plain \f1\fs18 130 '\par
}{\plain \f1\fs18 140 '  INPUT endpoints a, b; positive integer n; the function fnf().\par
}{\plain \f1\fs18 150 '\par
}{\plain \f1\fs18 160 '  OUTPUT approximation XI to I.\par
}{\plain \f1\fs18 170 '\par
}{\plain \f1\fs18 180 '**************************************************************************\par
}{\plain \f1\fs18 190 '  Written by:  Harold A. Toomey, CARE\_FREE SOFTWARE, 2Q 1991, v4.0\par
}{\plain \f1\fs18 200 '**************************************************************************\par
}{\plain \f1\fs18 210 '\par
}{\plain \f1\fs18 220  PI# = 3.141592653589793#\tab 'The constant PI (Usage: X = 2 * PI# )\par
}{\plain \f1\fs18 230  OUTFILE$ = "SIMPSON.OUT"\tab 'Output file name\par
}{\plain \f1\fs18 240  EQTEXTF$ = "f(x) = sin(x)"\tab 'Needs updating  $\par
}{\plain \f1\fs18 250 '\par
}{\plain \f1\fs18 260  DEFDBL A, B, H, X\tab \tab 'For XI, XI0, XI1, and XI2 also\par
}{\plain \f1\fs18 270  DEFINT I, N\par
}{\plain \f1\fs18 280  DEFSTR T\tab \tab \tab 'For title\par
}{\plain \f1\fs18 290 '     \par
}{\plain \f1\fs18 300 '**************************************************************************\par
}{\plain \f1\fs18 310 '* FNF(X) \_ Function to evaluate, f(x).  Needs updating $.\par
}{\plain \f1\fs18 320 '**************************************************************************\par
}{\plain \f1\fs18 330  DEF FNF(X) = SIN(X)\par
}{\plain \f1\fs18 340 '**************************************************************************\par
}{\plain \f1\fs18 350 '\par
}{\plain \f1\fs18 360 '**********\par
}{\plain \f1\fs18 370 '* INPUTS *\par
}{\plain \f1\fs18 380 '**********\par
}{\plain \f1\fs18 390 '\par
}{\plain \f1\fs18 400 'Get the optional title\par
}{\plain \f1\fs18 410  PRINT "\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_"\par
}{\plain \f1\fs18 420  PRINT "           'Numerical Analysis Algorithms in BASIC' v4.0          "\par
}{\plain \f1\fs18 430  PRINT "\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_"\par
}{\plain \f1\fs18 440  PRINT\par
}{\plain \f1\fs18 450  PRINT "Enter a title [ie \_ Set 2.1,  Problem 2 a) ]."\par
}{\plain \f1\fs18 460  INPUT "\_\_\_\_\_>"; TITLE$\par
}{\plain \f1\fs18 470 '\par
}{\plain \f1\fs18 480  PRINT\par
}{\plain \f1\fs18 490  PRINT "Composite Simpson's Rule \_ Algorithm 4.1"\par
}{\plain \f1\fs18 500  PRINT\par
}{\plain \f1\fs18 510  INPUT "Enter endpoint a = "; A\par
}{\plain \f1\fs18 520  INPUT "Enter endpoint b = "; B\par
}{\plain \f1\fs18 530  INPUT "Enter number of intervals on [a,b], n = "; N\par
}{\plain \f1\fs18 540 '\par
}{\plain \f1\fs18 550 'ERROR \_ N must be positive\par
}{\plain \f1\fs18 560  IF (N <= 0) THEN PRINT "ERROR \_ n must be greater than zero.": GOTO 530\par
}{\plain \f1\fs18 570 '\par
}{\plain \f1\fs18 580 '*************\par
}{\plain \f1\fs18 590 '* ALGORITHM *\par
}{\plain \f1\fs18 600 '*************\par
}{\plain \f1\fs18 610 '\par
}{\plain \f1\fs18 620 'STEP #1\par
}{\plain \f1\fs18 630  H = (B \_ A) / N\par
}{\plain \f1\fs18 640 '\par
}{\plain \f1\fs18 650 'STEP #2\par
}{\plain \f1\fs18 660  XI0 = FNF(A) + FNF(B)\par
}{\plain \f1\fs18 670  XI1 = 0!\tab \tab \tab 'Summation of f(x(2i\_1))\par
}{\plain \f1\fs18 680  XI2 = 0!\tab \tab \tab 'Summation of f(x(2i))\par
}{\plain \f1\fs18 690 '\par
}{\plain \f1\fs18 700 'STEP #3\par
}{\plain \f1\fs18 710  FOR  I = 1 TO N \_ 1\par
}{\plain \f1\fs18 720 '\par
}{\plain \f1\fs18 730 '  STEP #4\par
}{\plain \f1\fs18 740    X = A + I*H\par
}{\plain \f1\fs18 750 '\par
}{\plain \f1\fs18 760 '  STEP #5                (For even i)             (For odd i)\par
}{\plain \f1\fs18 770    IF (I MOD 2 = 0)  THEN XI2 = XI2 + FNF(X)  ELSE XI1 = XI1 + FNF(X)\par
}{\plain \f1\fs18 780 '\par
}{\plain \f1\fs18 790  NEXT I\par
}{\plain \f1\fs18 800 '\par
}{\plain \f1\fs18 810 'STEP #6\par
}{\plain \f1\fs18 820  XI = H * (XI0 + 2*XI2 + 4*XI1) / 3\par
}{\plain \f1\fs18 830 '\par
}{\plain \f1\fs18 840 '***********\par
}{\plain \f1\fs18 850 '* OUTPUTS *\par
}{\plain \f1\fs18 860 '***********\par
}{\plain \f1\fs18 870 '\par
}{\plain \f1\fs18 880 'STEP #7\par
}{\plain \f1\fs18 890 'Write output to the SCREEN\par
}{\plain \f1\fs18 900  PRINT "\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_"\par
}{\plain \f1\fs18 910  PRINT "           'Numerical Analysis Algorithms in BASIC' v4.0          "\par
}{\plain \f1\fs18 920  PRINT "\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_"\par
}{\plain \f1\fs18 930  PRINT\par
}{\plain \f1\fs18 940  PRINT TITLE$\tab \tab 'Print optional title\par
}{\plain \f1\fs18 950  PRINT\par
}{\plain \f1\fs18 960  PRINT "Composite Simpson's Rule \_ Algorithm 4.1"\par
}{\plain \f1\fs18 970  PRINT\par
}{\plain \f1\fs18 980  PRINT EQTEXTF$, " from"; A ;"to"; B ;"."\par
}{\plain \f1\fs18 990  PRINT\par
}{\plain \f1\fs18 1000  PRINT "n ="; N ;"intervals on [a,b]."\par
}{\plain \f1\fs18 1010  PRINT "Interval number h ="; H\par
}{\plain \f1\fs18 1020  PRINT\par
}{\plain \f1\fs18 1030  PRINT "     {\f4 \'21}"; B\par
}{\plain \f1\fs18 1040  PRINT "XI = {\f5 \'2a}  f(x) dx = "; XI\par
}{\plain \f1\fs18 1050  PRINT "     {\f4 \'22}"; A\par
}{\plain \f1\fs18 1060  PRINT\par
}{\plain \f1\fs18 1070  PRINT "Required"; N+1 ;"functional evaluations."\par
}{\plain \f1\fs18 1080 '\par
}{\plain \f1\fs18 1090 'Write output to a FILE\par
}{\plain \f1\fs18 1100  OPEN "O", #1, OUTFILE$\tab 'Create or open the file "041.OUT"\par
}{\plain \f1\fs18 1110  PRINT#1, "\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_"\par
}{\plain \f1\fs18 1120  PRINT#1, "        'Numerical Analysis Algorithms in BASIC' v4.0         "\par
}{\plain \f1\fs18 1130  PRINT#1, "\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_"\par
}{\plain \f1\fs18 1140  PRINT#1,\par
}{\plain \f1\fs18 1150  PRINT#1, TITLE$\tab \tab 'Print optional title\par
}{\plain \f1\fs18 1160  PRINT#1,\par
}{\plain \f1\fs18 1170  PRINT#1, "Composite Simpson's Rule \_ Algorithm 4.1"\par
}{\plain \f1\fs18 1180  PRINT#1,\par
}{\plain \f1\fs18 1190  PRINT#1, EQTEXTF$, " from"; A ;"to"; B ;"."\par
}{\plain \f1\fs18 1200  PRINT#1,\par
}{\plain \f1\fs18 1210  PRINT#1, "n ="; N ;"intervals on [a,b]."\par
}{\plain \f1\fs18 1220  PRINT#1, "Interval number h ="; H\par
}{\plain \f1\fs18 1230  PRINT#1,\par
}{\plain \f1\fs18 1240  PRINT#1, "     {\f4 \'21}"; B\par
}{\plain \f1\fs18 1250  PRINT#1, "XI = {\f5 \'2a}  f(x) dx = "; XI\par
}{\plain \f1\fs18 1260  PRINT#1, "     {\f4 \'22}"; A\par
}{\plain \f1\fs18 1270  PRINT#1,\par
}{\plain \f1\fs18 1280  PRINT#1, "Required"; N + 1 ;"functional evaluations."\par
}{\plain \f1\fs18 1290  CLOSE #1\par
}{\plain \f1\fs18 1300 '\par
}{\plain \f1\fs18 1310  PRINT\par
}{\plain \f1\fs18 1320  PRINT "Output saved into file '"; OUTFILE$; "'."\par
}{\plain \f1\fs18 1330  END\tab \tab \tab 'STOP\par
}{\plain \f1\fs18 1340 '\par
}{\plain \f1\fs18 1350 '************************************************************************\par
}{\plain \f1\fs18 1360 '  Copyright (C) 1991, Harold A. Toomey, All Rights Reserved.\par
}{\plain \f1\fs18 1370 '*************************************************************************\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs8\b\f2\fs26 }{\plain \*\cs8\b\f2\fs26 {\tc {D.2.2\tab SIMPSON.IN} \tcl3}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}{\plain \f1\fs18 NAA v4.0 Sample Output\par
}{\plain \f1\fs18 0.0\par
}{\plain \f1\fs18 3.14159265358979324\par
}{\plain \f1\fs18 20\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs8\b\f2\fs26 }{\plain \*\cs8\b\f2\fs26 {\tc {D.2.3\tab SIMPSON.OUT} \tcl3}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}{\plain \f1\fs18 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \f1\fs18         'Numerical Analysis Algorithms in BASIC' v4.0         \par
}{\plain \f1\fs18 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 NAA 4.0 Sample Output\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 Composite Simpson's Rule \_ Algorithm 4.1\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 f(x) = sin(x)  from 0 to 3.14159265358979 .\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 n = 20 intervals on [a,b].\par
}{\plain \f1\fs18 Interval number h = .1570796326794895 \par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18      {\f4 \'21} 3.14159265358979 \par
}{\plain \f1\fs18 XI = {\f5 \'2a}  f(x) dx =  2.000006886810941 \par
}{\plain \f1\fs18      {\f4 \'22} 0 \par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 Required 21 functional evaluations.\par
}{\plain \f1\fs18 \par
}\pard\page 
\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs6\f2\fs32 }{\plain \*\cs6\b\f2\fs32 {\tc {D.3\tab C} \tcl2}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs8\b\f2\fs26 }{\plain \*\cs8\b\f2\fs26 {\tc {D.3.1\tab SIMPSON.C} \tcl3}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}\sect \sectd \ds1\sbknone\marglsxn1980\margrsxn1440\footery1380\linemod1\linerestart\linecont\linex-720\endnhere 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 D-\chpgn   Sample Programs in Other Languages\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab Sample Programs in Other Languages  D-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs4\f1\fs18 /*\par
}{\plain \*\cs4\f1\fs18 **  FILE NAME: SIMPSON.C\par
}{\plain \*\cs4\f1\fs18 **  LANGUAGE:  C\par
}{\plain \*\cs4\f1\fs18 **  COMPILERS: Any ANSI C Compiler  (Microsoft C 5.0, Turbo C 2.0, etc.)\par
}{\plain \*\cs4\f1\fs18 **  STATUS:    Compiles and runs correctly\par
}{\plain \*\cs4\f1\fs18 */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /******************************************************************************\par
}{\plain \*\cs4\f1\fs18 \tab \tab Composite Simpson's Rule \_ Algorithm 4.1\par
}{\plain \*\cs4\f1\fs18 *******************************************************************************\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18                                 {\f4 \'21}b\par
}{\plain \*\cs4\f1\fs18 To approximate the integral I = {\f5 \'2a}  f(x) dx:\par
}{\plain \*\cs4\f1\fs18                                 {\f4 \'22}a\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 INPUT endpoints a, b; positive integer n; the function f().\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 OUTPUT approximation XI to I.\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 *******************************************************************************\par
}{\plain \*\cs4\f1\fs18 *\tab Written by:  Harold A. Toomey, CARE\_FREE SOFTWARE, 2Q 1991, v4.0      *\par
}{\plain \*\cs4\f1\fs18 ******************************************************************************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #include "naautil.h"\tab \tab /* Numerical Analysis Algorithms Utilities. */\par
}{\plain \*\cs4\f1\fs18 #define\tab PI\tab 3.141592653589793238462643383279502884197\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 char *outfile   = "simpson.out";\tab /* Default name of the output file. */\par
}{\plain \*\cs4\f1\fs18 char *eq_text_f = "f(x) = sin(x)";\tab /* Needs updating  $.               */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* f(x) \_ Function to evaluate, f(x).  Needs updating $.                     */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 double f(x)\par
}{\plain \*\cs4\f1\fs18 double x;\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   return (sin(x));\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 main()\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   double a, b, h, X, XI, XI0, XI1, XI2, f();\par
}{\plain \*\cs4\f1\fs18   int i, n;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /**********\par
}{\plain \*\cs4\f1\fs18    * INPUTS *\par
}{\plain \*\cs4\f1\fs18    **********/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   get_title();\tab \tab \tab /* Prompts for optional comments. */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   printf("Composite Simpson's Rule \_ Algorithm 4.1\\n\\n");\par
}{\plain \*\cs4\f1\fs18   printf("%s\\n\\n", eq_text_f);\par
}{\plain \*\cs4\f1\fs18   printf("Enter endpoint a: ");\par
}{\plain \*\cs4\f1\fs18   scanf("%lf", &a);\par
}{\plain \*\cs4\f1\fs18   printf("Enter endpoint b: ");\par
}{\plain \*\cs4\f1\fs18   scanf("%lf", &b);\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   do \{\par
}{\plain \*\cs4\f1\fs18     printf("Enter number of intervals on [a,b], n: ");\par
}{\plain \*\cs4\f1\fs18     scanf("%d", &n);\par
}{\plain \*\cs4\f1\fs18     if (n <= 0)\par
}{\plain \*\cs4\f1\fs18       printf("ERROR \_ n must be greater than zero.\\n");\par
}{\plain \*\cs4\f1\fs18   \} while (n <= 0);\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /*************\par
}{\plain \*\cs4\f1\fs18    * ALGORITHM *\par
}{\plain \*\cs4\f1\fs18    *************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* STEP #1 */\par
}{\plain \*\cs4\f1\fs18   h = (b \_ a)/n;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* STEP #2 */\par
}{\plain \*\cs4\f1\fs18   XI0 = f(a) + f(b);\par
}{\plain \*\cs4\f1\fs18   XI1 = 0.0;\tab \tab \tab /* Summation of f(x(2i\_1)). */\par
}{\plain \*\cs4\f1\fs18   XI2 = 0.0;\tab \tab \tab /* Summation of f(x(2i)).   */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* STEP #3 */\par
}{\plain \*\cs4\f1\fs18   for (i=1;i<n;i++) \{\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18     /* STEP #4 */\par
}{\plain \*\cs4\f1\fs18     X = a + i*h;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18     /* STEP #5 */\par
}{\plain \*\cs4\f1\fs18     if (i % 2 == 0)\par
}{\plain \*\cs4\f1\fs18       XI2 += f(X);\tab \tab /* For even i. */\par
}{\plain \*\cs4\f1\fs18     else\par
}{\plain \*\cs4\f1\fs18       XI1 += f(X);\tab \tab /* For odd i.  */\par
}{\plain \*\cs4\f1\fs18   \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* STEP #6 */\par
}{\plain \*\cs4\f1\fs18   XI = h*(XI0 + 2.0*XI2 + 4.0*XI1) / 3.0;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /***********\par
}{\plain \*\cs4\f1\fs18    * OUTPUTS *\par
}{\plain \*\cs4\f1\fs18    ***********/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* STEP #7 */\par
}{\plain \*\cs4\f1\fs18   /* Write output to the screen. */\par
}{\plain \*\cs4\f1\fs18   printf("Interval number h = %lg\\n\\n", h);\par
}{\plain \*\cs4\f1\fs18   printf("     {\f4 \'21}%lg\\n", b);\par
}{\plain \*\cs4\f1\fs18   printf("XI = {\f5 \'2a}  f(x) dx = %.11lg\\n", XI);\par
}{\plain \*\cs4\f1\fs18   printf("     {\f4 \'22}%lg\\n\\n", a);\par
}{\plain \*\cs4\f1\fs18   printf("Required %d functional evaluations.\\n", n + 1);\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* Write output to a file. */\par
}{\plain \*\cs4\f1\fs18   open_outfile(outfile);\par
}{\plain \*\cs4\f1\fs18   fprintf(file_id, "Composite Simpson's Rule \_ Algorithm 4.1\\n\\n");\par
}{\plain \*\cs4\f1\fs18   fprintf(file_id, "%s from %lg to %lg.\\n\\n", eq_text_f, a, b);\par
}{\plain \*\cs4\f1\fs18   fprintf(file_id, "n = %d intervals on [a,b].\\n", n);\par
}{\plain \*\cs4\f1\fs18   fprintf(file_id, "Interval number h = %lg\\n\\n", h);\par
}{\plain \*\cs4\f1\fs18   fprintf(file_id, "     {\f4 \'21}%lg\\n", b);\par
}{\plain \*\cs4\f1\fs18   fprintf(file_id, "XI = {\f5 \'2a}  f(x) dx = %.11lg\\n", XI);\par
}{\plain \*\cs4\f1\fs18   fprintf(file_id, "     {\f4 \'22}%lg\\n\\n", a);\par
}{\plain \*\cs4\f1\fs18   fprintf(file_id, "Required %d functional evaluations.\\n", n + 1);\par
}{\plain \*\cs4\f1\fs18   close_outfile(outfile);\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   printf("\\nOutput saved into file \\"%s\\".\\n", outfile);\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \}  \tab \tab \tab \tab /* STOP */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /*\tab    Copyright (C) 1991, Harold A. Toomey, All Rights Reserved.        */\par
}\sect \sectd \ds1\sbknone\footery1380\linemod1\endnhere 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 D-\chpgn   Sample Programs in Other Languages\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab Sample Programs in Other Languages  D-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs4\f1\fs18 /*****************************************************************************/}{\plain \f1\fs18 }{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs8\b\f2\fs26 }{\plain \*\cs8\b\f2\fs26 {\tc {D.3.2\tab NAAUTIL.H} \tcl3}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}\sect \sectd \ds1\sbknone\marglsxn1980\margrsxn1440\footery1380\linemod1\linerestart\linecont\linex-720\endnhere 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 D-\chpgn   Sample Programs in Other Languages\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab Sample Programs in Other Languages  D-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs4\f1\fs18 /******************************* NAAUTIL.H ************************************\par
}{\plain \*\cs4\f1\fs18 \tab       "Numerical Analysis Algorithms in C" Utilities I v4.0\par
}{\plain \*\cs4\f1\fs18 ******************************************************************************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*\par
}{\plain \*\cs4\f1\fs18 **      Return   Procedure\par
}{\plain \*\cs4\f1\fs18 **      Value    Name            Description\par
}{\plain \*\cs4\f1\fs18 **      \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs4\f1\fs18 **\tab void     naaerror      \_  Exits a program with an error message\par
}{\plain \*\cs4\f1\fs18 **\tab void     get_title     \_  Prompts for an optional title\par
}{\plain \*\cs4\f1\fs18 **\tab void     open_outfile  \_  Opens the default output file\par
}{\plain \*\cs4\f1\fs18 **\tab void     close_outfile \_  Closes the default output file\par
}{\plain \*\cs4\f1\fs18 */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /***********/\par
}{\plain \*\cs4\f1\fs18 /* DEFINES */\par
}{\plain \*\cs4\f1\fs18 /***********/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*\par
}{\plain \*\cs4\f1\fs18 **  The ANSI FLAG below allows the user more flexibility when compiling and\par
}{\plain \*\cs4\f1\fs18 **  running these Numerical Analysis Algorithms.  Set to TRUE first.  Older\par
}{\plain \*\cs4\f1\fs18 **  C compilers may require it to be set to FALSE.  No adverse effects should\par
}{\plain \*\cs4\f1\fs18 **  occur.\par
}{\plain \*\cs4\f1\fs18 */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #ifndef TRUE\par
}{\plain \*\cs4\f1\fs18 #define TRUE\tab 1\tab \tab /* Define TRUE if not already defined.       */\par
}{\plain \*\cs4\f1\fs18 #endif\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #ifndef FALSE\par
}{\plain \*\cs4\f1\fs18 #define FALSE\tab 0\tab \tab /* Define FALSE if not already defined.      */\par
}{\plain \*\cs4\f1\fs18 #endif\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #define\tab ANSI\tab \tab TRUE\tab /* Set to TRUE if using an ANSI C standard   */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* compliant compiler (default).             */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* Set to FALSE if using an older C compiler.*/\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /* ANSI = American National Standards        */\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab /*        Institute                          */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************\par
}{\plain \*\cs4\f1\fs18  * INCLUDE FILES *\par
}{\plain \*\cs4\f1\fs18  *****************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #include <math.h>\tab \tab /* For math function prototypes.             */\par
}{\plain \*\cs4\f1\fs18 #include <stdio.h>\tab \tab /* For scanf(), printf() and fprintf().      */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #if ANSI == TRUE\par
}{\plain \*\cs4\f1\fs18 #include <stdlib.h>\tab \tab /* Needed for calloc() by some compilers and */\par
}{\plain \*\cs4\f1\fs18 #endif\tab \tab \tab \tab /* for tolower().                            */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /********************\par
}{\plain \*\cs4\f1\fs18  * GLOBAL VARIABLES *\par
}{\plain \*\cs4\f1\fs18  ********************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 char title[133];\tab \tab /* Used in get_title() and print_title().    */\par
}{\plain \*\cs4\f1\fs18 FILE *file_id;\tab \tab \tab /* Stream used to save output into a file.   */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /***********************\par
}{\plain \*\cs4\f1\fs18  * FUNCTION PROTOTYPES *\par
}{\plain \*\cs4\f1\fs18  ***********************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #if ANSI == TRUE\par
}{\plain \*\cs4\f1\fs18   /* ANSI STANDARD PROTOTYPING (Post\_December 14, 1989)    */\par
}{\plain \*\cs4\f1\fs18   void     naaerror      (char []);\par
}{\plain \*\cs4\f1\fs18   void     get_title     (void);\par
}{\plain \*\cs4\f1\fs18   void     open_outfile  (char *);\par
}{\plain \*\cs4\f1\fs18   void     close_outfile (char *);\par
}{\plain \*\cs4\f1\fs18 #else\par
}{\plain \*\cs4\f1\fs18   /* OLDER STYLE PROTOTYPING (Pre\_December 14, 1989)       */\par
}{\plain \*\cs4\f1\fs18   /* Placed here for compatibility with older C compilers. */\par
}{\plain \*\cs4\f1\fs18   void     naaerror();\par
}{\plain \*\cs4\f1\fs18   void     get_title();\par
}{\plain \*\cs4\f1\fs18   void     open_outfile();\par
}{\plain \*\cs4\f1\fs18   void     close_outfile();\par
}{\plain \*\cs4\f1\fs18 #endif\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /***************\par
}{\plain \*\cs4\f1\fs18  * SUBROUTINES *\par
}{\plain \*\cs4\f1\fs18  ***************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* naaerror() \_ Numerical Analysis Algorithms standard error handler.        */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 void naaerror(error_text)\par
}{\plain \*\cs4\f1\fs18 char error_text[];\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   fprintf(stderr,"\\nNumerical Analysis Algorithms run\_time error...\\n");\par
}{\plain \*\cs4\f1\fs18   fprintf(stderr,"%s", error_text);\par
}{\plain \*\cs4\f1\fs18   fprintf(stderr,"\\n...now exiting to system...\\n");\par
}{\plain \*\cs4\f1\fs18   exit (1);\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* get_title() \_ Prints the NAA banner and prompts for an optional title.    */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 void get_title()\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   int i;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* Print the Numerical Analysis Algorithms banner. */\par
}{\plain \*\cs4\f1\fs18   for (i=1;i<80;i++)  printf("\_");\par
}{\plain \*\cs4\f1\fs18   printf("\\n\\t\\t\\"Numerical Analysis Algorithms in C\\" v4.0\\n");\par
}{\plain \*\cs4\f1\fs18   for (i=1;i<80;i++)  printf("\_");\par
}{\plain \*\cs4\f1\fs18   printf("\\n");\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   printf("Enter a title [ie \_ Set 2.1,  Problem 2 a) ].\\n\_\_\_\_> ");\par
}{\plain \*\cs4\f1\fs18   fgets(title, 133, stdin);\par
}{\plain \*\cs4\f1\fs18   printf("\\n");\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* open_outfile() \_ Opens the default output file and prints the NAA banner  */\par
}{\plain \*\cs4\f1\fs18 /*                  and optional title.                                      */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 void open_outfile(outfile)\par
}{\plain \*\cs4\f1\fs18 char *outfile;\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   char msg[80];\tab \tab \tab /* Holds an error message string */\par
}{\plain \*\cs4\f1\fs18   int i;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* Open the default output file. */\par
}{\plain \*\cs4\f1\fs18   if ((file_id = fopen(outfile, "w")) == NULL) \{\par
}{\plain \*\cs4\f1\fs18     sprintf(msg, "Can not open the output file named \\"%s\\".", outfile);\par
}{\plain \*\cs4\f1\fs18     naaerror(msg);\par
}{\plain \*\cs4\f1\fs18   \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* Print the Numerical Analysis Algorithms banner. */\par
}{\plain \*\cs4\f1\fs18   for (i=1;i<80;i++)  fprintf(file_id, "\_");\par
}{\plain \*\cs4\f1\fs18   fprintf(file_id, "\\n\\t\\t\\"Numerical Analysis Algorithms in C\\" v4.0\\n");\par
}{\plain \*\cs4\f1\fs18   for (i=1;i<80;i++)  fprintf(file_id, "\_");\par
}{\plain \*\cs4\f1\fs18   fprintf(file_id, "\\n\\n");\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* Print the optional title. */\par
}{\plain \*\cs4\f1\fs18   if (title[0] != '\\n')\par
}{\plain \*\cs4\f1\fs18     fprintf(file_id, "%s\\n", title);\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* close_outfile() \_ Closes the default output file.                         */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 void close_outfile(outfile)\par
}{\plain \*\cs4\f1\fs18 char *outfile;\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   char msg[80];\tab \tab \tab /* Holds an error message string */\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   if (fclose(file_id) == EOF) \{\par
}{\plain \*\cs4\f1\fs18     sprintf(msg, "Can not close the output file named \\"%s\\".", outfile);\par
}{\plain \*\cs4\f1\fs18     naaerror(msg);\par
}{\plain \*\cs4\f1\fs18   \}\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /*\tab Written by:  Harold A. Toomey, CARE\_FREE SOFTWARE, 2Q 1991, v4.0     */\par
}{\plain \*\cs4\f1\fs18 /*\tab Copyright (C) 1991, Harold A. Toomey, All Rights Reserved.           */\par
}\sect \sectd \ds1\sbknone\footery1380\linemod1\endnhere 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 D-\chpgn   Sample Programs in Other Languages\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab Sample Programs in Other Languages  D-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs4\f1\fs18 /*****************************************************************************/}{\plain \f1\fs18 }{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs8\b\f2\fs26 }{\plain \*\cs8\b\f2\fs26 {\tc {D.3.3\tab SIMPSON.IN} \tcl3}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 NAA v4.0 Sample Output\par
}{\plain \f1\fs18 0.0\par
}{\plain \f1\fs18 3.14159265358979324\par
}{\plain \f1\fs18 20\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs8\b\f2\fs26 }{\plain \*\cs8\b\f2\fs26 {\tc {D.3.4\tab SIMPSON.OUT} \tcl3}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}{\plain \f1\fs18 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \f1\fs18 \tab \tab "Numerical Analysis Algorithms in C" v4.0\par
}{\plain \f1\fs18 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 NAA v4.0 Sample Output\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 Composite Simpson's Rule \_ Algorithm 4.1\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 f(x) = sin(x) from 0 to 3.14159.\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 n = 20 intervals on [a,b].\par
}{\plain \f1\fs18 Interval number h = 0.15708\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18      {\f4 \'21}3.14159\par
}{\plain \f1\fs18 XI = {\f5 \'2a}  f(x) dx = 2.0000067844\par
}{\plain \f1\fs18      {\f4 \'22}0\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 Required 21 functional evaluations.\par
}{\plain \f1\fs18 \par
}\pard\page 
\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs6\f2\fs32 }{\plain \*\cs6\b\f2\fs32 {\tc {D.4\tab C++} \tcl2}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs8\b\f2\fs26 }{\plain \*\cs8\b\f2\fs26 {\tc {D.4.1\tab SIMPSON.CPP} \tcl3}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}\sect \sectd \ds1\sbknone\marglsxn1980\margrsxn1440\footery1380\linemod1\linerestart\linecont\linex-720\endnhere 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 D-\chpgn   Sample Programs in Other Languages\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab Sample Programs in Other Languages  D-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs4\f1\fs18 //\par
}{\plain \*\cs4\f1\fs18 //  FILE NAME: SIMPSON.CPP\par
}{\plain \*\cs4\f1\fs18 //  LANGUAGE:  C++\par
}{\plain \*\cs4\f1\fs18 //  COMPILERS: Borland C++ or Turbo C++ 2.0\par
}{\plain \*\cs4\f1\fs18 //  STATUS:    Not tested yet\par
}{\plain \*\cs4\f1\fs18 //\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /******************************************************************************\par
}{\plain \*\cs4\f1\fs18  \tab \tab Composite Simpson's Rule \_ Algorithm 4.1\par
}{\plain \*\cs4\f1\fs18 *******************************************************************************\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18                                 {\f4 \'21}b\par
}{\plain \*\cs4\f1\fs18 To approximate the integral I = {\f5 \'2a}  f(x) dx:\par
}{\plain \*\cs4\f1\fs18                                 {\f4 \'22}a\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 INPUT endpoints a, b; positive integer n; the function f().\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 OUTPUT approximation XI to I.\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 *******************************************************************************\par
}{\plain \*\cs4\f1\fs18 *\tab Written by:  Harold A. Toomey, CARE\_FREE SOFTWARE, 2Q 1991, v4.2      *\par
}{\plain \*\cs4\f1\fs18 ******************************************************************************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #include "simpson.hpp"\tab \tab // Numerical Analysis Algorithms Utilities.\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab // Also contains #include <iostream.h>.\par
}{\plain \*\cs4\f1\fs18 #define\tab PI\tab 3.141592653589793238462643383279502884197\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 char *outfile   = "simpson.out";\tab // Default name of the output file.\par
}{\plain \*\cs4\f1\fs18 char *eq_text_f = "f(x) = sin(x)";\tab // Needs updating  $.\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /***********************/\par
}{\plain \*\cs4\f1\fs18 /* FUNCTION PROTOTYPES */\par
}{\plain \*\cs4\f1\fs18 /***********************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 double f(double x);\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* f(x) \_ Function to evaluate, f(x).  Needs updating $.\tab \tab      */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 double f(double x)\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   return (sin(x));\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 void main(void)\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   double a, b, h, X, XI, XI0, XI1, XI2, f();\par
}{\plain \*\cs4\f1\fs18   int i, n;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /**********\par
}{\plain \*\cs4\f1\fs18    * INPUTS *\par
}{\plain \*\cs4\f1\fs18    **********/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   get_title();\tab \tab \tab // Prompts for optional comments.\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   cout << "Composite Simpson's Rule \_ Algorithm 4.1\\n\\n";\par
}{\plain \*\cs4\f1\fs18   cout << eq_text_f << "\\n\\n";\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   cout << "Enter endpoint a: ";\par
}{\plain \*\cs4\f1\fs18   cin >> a;\par
}{\plain \*\cs4\f1\fs18   cout << "Enter endpoint b: ";\par
}{\plain \*\cs4\f1\fs18   cin >> b;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   do \{\par
}{\plain \*\cs4\f1\fs18     cout << "Enter number of intervals on [a,b], n: ";\par
}{\plain \*\cs4\f1\fs18     cin >> n;\par
}{\plain \*\cs4\f1\fs18     if (n <= 0)\par
}{\plain \*\cs4\f1\fs18       cerr << "ERROR \_ n must be greater than zero.\\n";\par
}{\plain \*\cs4\f1\fs18   \} while (n <= 0);\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /*************\par
}{\plain \*\cs4\f1\fs18    * ALGORITHM *\par
}{\plain \*\cs4\f1\fs18    *************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* STEP #1 */\par
}{\plain \*\cs4\f1\fs18   h = (b \_ a)/n;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* STEP #2 */\par
}{\plain \*\cs4\f1\fs18   XI0 = f(a) + f(b);\par
}{\plain \*\cs4\f1\fs18   XI1 = 0.0;\tab \tab \tab // Summation of f(x(2i\_1)).\par
}{\plain \*\cs4\f1\fs18   XI2 = 0.0;\tab \tab \tab // Summation of f(x(2i)).\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* STEP #3 */\par
}{\plain \*\cs4\f1\fs18   for (i=1;i<n;i++) \{\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18     /* STEP #4 */\par
}{\plain \*\cs4\f1\fs18     X = a + i*h;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18     /* STEP #5 */\par
}{\plain \*\cs4\f1\fs18     if (i % 2 == 0)\par
}{\plain \*\cs4\f1\fs18       XI2 += f(X);\tab \tab // For even i.\par
}{\plain \*\cs4\f1\fs18     else\par
}{\plain \*\cs4\f1\fs18       XI1 += f(X);\tab \tab // For odd i.\par
}{\plain \*\cs4\f1\fs18   \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* STEP #6 */\par
}{\plain \*\cs4\f1\fs18   XI = h*(XI0 + 2.0*XI2 + 4.0*XI1) / 3.0;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /***********\par
}{\plain \*\cs4\f1\fs18    * OUTPUTS *\par
}{\plain \*\cs4\f1\fs18    ***********/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   /* STEP #7 */\par
}{\plain \*\cs4\f1\fs18   // Write output to the screen.\par
}{\plain \*\cs4\f1\fs18   cout << "Interval number h = " << h << "\\n\\n";\par
}{\plain \*\cs4\f1\fs18   cout << "     {\f4 \'21}" << b << "\\n";\par
}{\plain \*\cs4\f1\fs18   cout << "XI = {\f5 \'2a}  f(x) dx = " << XI << "\\n";\par
}{\plain \*\cs4\f1\fs18   cout << "     {\f4 \'22}" << a << "\\n\\n";\par
}{\plain \*\cs4\f1\fs18   cout << "Required " << n + 1 << " functional evaluations.\\n";\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   // Write output to a file.\par
}{\plain \*\cs4\f1\fs18   open_outfile(outfile);\par
}{\plain \*\cs4\f1\fs18   fprintf(file_id, "Composite Simpson's Rule \_ Algorithm 4.1\\n\\n");\par
}{\plain \*\cs4\f1\fs18   fprintf(file_id, "%s from %lg to %lg.\\n\\n", eq_text_f, a, b);\par
}{\plain \*\cs4\f1\fs18   fprintf(file_id, "n = %d intervals on [a,b].\\n", n);\par
}{\plain \*\cs4\f1\fs18   fprintf(file_id, "Interval number h = %lg\\n\\n", h);\par
}{\plain \*\cs4\f1\fs18   fprintf(file_id, "     {\f4 \'21}%lg\\n", b);\par
}{\plain \*\cs4\f1\fs18   fprintf(file_id, "XI = {\f5 \'2a}  f(x) dx = %.11lg\\n", XI);\par
}{\plain \*\cs4\f1\fs18   fprintf(file_id, "     {\f4 \'22}%lg\\n\\n", a);\par
}{\plain \*\cs4\f1\fs18   fprintf(file_id, "Required %d functional evaluations.\\n", n + 1);\par
}{\plain \*\cs4\f1\fs18   close_outfile(outfile);\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   cout << "\\nOutput saved into file \\"" << outfile << "\\".\\n";\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \}  \tab \tab \tab \tab // STOP\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /*\tab Copyright (C) 1991, Harold A. Toomey, All Rights Reserved.           */\par
}\sect \sectd \ds1\sbknone\footery1380\linemod1\endnhere 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 D-\chpgn   Sample Programs in Other Languages\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab Sample Programs in Other Languages  D-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs4\f1\fs18 /*****************************************************************************/}{\plain \f1\fs18 }{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs8\b\f2\fs26 }{\plain \*\cs8\b\f2\fs26 {\tc {D.4.2\tab NAAUTIL.HPP} \tcl3}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}\sect \sectd \ds1\sbknone\marglsxn1980\margrsxn1440\footery1380\linemod1\linerestart\linecont\linex-720\endnhere 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 D-\chpgn   Sample Programs in Other Languages\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab Sample Programs in Other Languages  D-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs4\f1\fs18 /****************************** NAAUTIL.HPP ***********************************\par
}{\plain \*\cs4\f1\fs18 \tab     "Numerical Analysis Algorithms in C++" Utilities I v4.0\par
}{\plain \*\cs4\f1\fs18 ******************************************************************************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 //\par
}{\plain \*\cs4\f1\fs18 //      Return   Procedure\par
}{\plain \*\cs4\f1\fs18 //      Value    Name            Description\par
}{\plain \*\cs4\f1\fs18 //      \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs4\f1\fs18 //\tab void     naaerror      \_  Exits a program with an error message\par
}{\plain \*\cs4\f1\fs18 //\tab void     get_title     \_  Prompts for an optional title\par
}{\plain \*\cs4\f1\fs18 //\tab void     open_outfile  \_  Opens the default output file\par
}{\plain \*\cs4\f1\fs18 //\tab void     close_outfile \_  Closes the default output file\par
}{\plain \*\cs4\f1\fs18 //\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************\par
}{\plain \*\cs4\f1\fs18  * INCLUDE FILES *\par
}{\plain \*\cs4\f1\fs18  *****************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 #include <stdio.h>\tab \tab // For fprintf().\par
}{\plain \*\cs4\f1\fs18 #include <iostream.h>\tab \tab // For cin, cout and cerr.\par
}{\plain \*\cs4\f1\fs18 #include <stdlib.h>\tab \tab // Needed for calloc() by some compilers and\par
}{\plain \*\cs4\f1\fs18 \tab \tab \tab \tab // for tolower().\par
}{\plain \*\cs4\f1\fs18 #include <math.h>\tab \tab // For math function prototypes.\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /********************\par
}{\plain \*\cs4\f1\fs18  * GLOBAL VARIABLES *\par
}{\plain \*\cs4\f1\fs18  ********************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 char title[133];\tab \tab // Used in get_title() and print_title().\par
}{\plain \*\cs4\f1\fs18 FILE *file_id;\tab \tab \tab // Stream used to save output into a file.\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /***********************\par
}{\plain \*\cs4\f1\fs18  * FUNCTION PROTOTYPES *\par
}{\plain \*\cs4\f1\fs18  ***********************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 void naaerror      (char []);\par
}{\plain \*\cs4\f1\fs18 void get_title     (void);\par
}{\plain \*\cs4\f1\fs18 void open_outfile  (char *);\par
}{\plain \*\cs4\f1\fs18 void close_outfile (char *);\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /***************\par
}{\plain \*\cs4\f1\fs18  * SUBROUTINES *\par
}{\plain \*\cs4\f1\fs18  ***************/\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* naaerror() \_ Numerical Analysis Algorithms standard error handler.        */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 void naaerror(char error_text[])\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   cerr << "\\nNumerical Analysis Algorithms run\_time error...\\n";\par
}{\plain \*\cs4\f1\fs18   cerr << error_text;\par
}{\plain \*\cs4\f1\fs18   cerr << "\\n...now exiting to system...\\n";\par
}{\plain \*\cs4\f1\fs18   exit (1);\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* get_title() \_ Prints the NAA banner and prompts for an optional title.    */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 void get_title(void)\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   int i;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   // Print the Numerical Analysis Algorithms banner.\par
}{\plain \*\cs4\f1\fs18   for (i=1;i<80;i++)  cout << "\_";\par
}{\plain \*\cs4\f1\fs18   cout << "\\n\\t\\t\\"Numerical Analysis Algorithms in C++\\" v4.0\\n";\par
}{\plain \*\cs4\f1\fs18   for (i=1;i<80;i++)  cout << "\_";\par
}{\plain \*\cs4\f1\fs18   cout << "\\n";\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   cout << "Enter an optional title [ie \_ Set 2.1,  Problem 2 a) ].\\n\_\_\_\_> ";\par
}{\plain \*\cs4\f1\fs18   fgets(title, 133, stdin);\par
}{\plain \*\cs4\f1\fs18   cout << "\\n";\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* open_outfile() \_ Opens the default output file and prints the NAA banner  */\par
}{\plain \*\cs4\f1\fs18 /*                  and optional title.                                      */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 void open_outfile(char *outfile)\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   char msg[80];\tab \tab \tab // Holds an error message string.\par
}{\plain \*\cs4\f1\fs18   int i;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   // Open the default output file.\par
}{\plain \*\cs4\f1\fs18   if ((file_id = fopen(outfile, "w")) == NULL) \{\par
}{\plain \*\cs4\f1\fs18     sprintf(msg, "Can not open the output file named \\"%s\\".", outfile);\par
}{\plain \*\cs4\f1\fs18     naaerror(msg);\par
}{\plain \*\cs4\f1\fs18   \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   // Print the Numerical Analysis Algorithms banner.\par
}{\plain \*\cs4\f1\fs18   for (i=1;i<80;i++)  fprintf(file_id, "\_");\par
}{\plain \*\cs4\f1\fs18   fprintf(file_id, "\\n\\t\\t\\"Numerical Analysis Algorithms in C++\\" v4.0\\n");\par
}{\plain \*\cs4\f1\fs18   for (i=1;i<80;i++)  fprintf(file_id, "\_");\par
}{\plain \*\cs4\f1\fs18   fprintf(file_id, "\\n\\n");\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   // Print the optional title.\par
}{\plain \*\cs4\f1\fs18   if (title[0] != '\\n')\par
}{\plain \*\cs4\f1\fs18     fprintf(file_id, "%s\\n", title);\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /* close_outfile() \_ Closes the default output file.                         */\par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 void close_outfile(char *outfile)\par
}{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18   char msg[80];\tab \tab \tab // Holds an error message string.\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   if (fclose(file_id) == EOF) \{\par
}{\plain \*\cs4\f1\fs18     sprintf(msg, "Can not close the output file named \\"%s\\".", outfile);\par
}{\plain \*\cs4\f1\fs18     naaerror(msg);\par
}{\plain \*\cs4\f1\fs18   \}\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 /*****************************************************************************/\par
}{\plain \*\cs4\f1\fs18 /*\tab Written by:  Harold A. Toomey, CARE\_FREE SOFTWARE, 2Q 1991, v4.0     */\par
}{\plain \*\cs4\f1\fs18 /*\tab Copyright (C) 1991, Harold A. Toomey, All Rights Reserved.           */\par
}\sect \sectd \ds1\sbknone\footery1380\linemod1\endnhere 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 D-\chpgn   Sample Programs in Other Languages\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab Sample Programs in Other Languages  D-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs4\f1\fs18 /*****************************************************************************/}{\plain \f1\fs18 }{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs8\b\f2\fs26 }{\plain \*\cs8\b\f2\fs26 {\tc {D.4.3\tab SIMPSON.IN} \tcl3}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}{\plain \f1\fs18 NAA v4.2 Sample Output\par
}{\plain \f1\fs18 0.0\par
}{\plain \f1\fs18 3.14159265358979324\par
}{\plain \f1\fs18 20\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs8\b\f2\fs26 }{\plain \*\cs8\b\f2\fs26 {\tc {D.4.4\tab SIMPSON.OUT} \tcl3}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}{\plain \f1\fs18 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \f1\fs18 \tab \tab "Numerical Analysis Algorithms in C++" v4.0\par
}{\plain \f1\fs18 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 NAA v4.0 Sample Output\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 Composite Simpson's Rule \_ Algorithm 4.1\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 f(x) = sin(x) from 0 to 3.14159.\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 n = 2m = 20 subintervals of [a,b].\par
}{\plain \f1\fs18 Interval number h = 0.15708\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18      {\f4 \'21}3.14159\par
}{\plain \f1\fs18 XI = {\f5 \'2a}  f(x) dx = 2.0000067844\par
}{\plain \f1\fs18      {\f4 \'22}0\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 Required 21 functional evaluations.\par
}{\plain \f1\fs18 \par
}\pard\page 
\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs6\f2\fs32 }{\plain \*\cs6\b\f2\fs32 {\tc {D.5\tab FORTRAN\~77} \tcl2}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs8\b\f2\fs26 }{\plain \*\cs8\b\f2\fs26 {\tc {D.5.1\tab SIMPSON.FOR} \tcl3}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}\sect \sectd \ds1\sbknone\marglsxn1980\margrsxn1440\footery1380\linemod1\linerestart\linecont\linex-720\endnhere 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 D-\chpgn   Sample Programs in Other Languages\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab Sample Programs in Other Languages  D-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs4\f1\fs18 C  FILE NAME: SIMPSON.FOR\par
}{\plain \*\cs4\f1\fs18 C  LANGUAGE:  FORTRAN\~77\par
}{\plain \*\cs4\f1\fs18 C  COMPILER:  Microsoft FORTRAN\~77 Version 3.3\par
}{\plain \*\cs4\f1\fs18 C  STATUS:    Compiles and runs correctly\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18 C *****************************************************************************\par
}{\plain \*\cs4\f1\fs18 C\tab \tab     Composite Simpson's Rule \_ Algorithm 4.1\par
}{\plain \*\cs4\f1\fs18 C *****************************************************************************\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18 C                                 {\f4 \'21}b\par
}{\plain \*\cs4\f1\fs18 C To approximate the integral I = {\f5 \'2a}  f(x) dx:\par
}{\plain \*\cs4\f1\fs18 C                                 {\f4 \'22}a\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18 C INPUT endpoints a, b; positive integer n; the function f().\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18 C OUTPUT approximation XI to I.\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18 C *****************************************************************************\par
}{\plain \*\cs4\f1\fs18 C \tab Written by:  Harold A. Toomey, CARE\_FREE SOFTWARE, 2Q 1991, v4.0\par
}{\plain \*\cs4\f1\fs18 C *****************************************************************************\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18       PROGRAM SIMPSON\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18       DOUBLE PRECISION A, B, H, X\par
}{\plain \*\cs4\f1\fs18       INTEGER OUT, I, N\par
}{\plain \*\cs4\f1\fs18       CHARACTER*80 TITLE\par
}{\plain \*\cs4\f1\fs18       CHARACTER*12 OUTFILE\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18 C     \_\_ OUT will be assigned to OUTFILE for printing to an output file\par
}{\plain \*\cs4\f1\fs18       PARAMETER (OUT=4)\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18 C     \_\_ Default name of the outfile\par
}{\plain \*\cs4\f1\fs18       DATA OUTFILE/'SIMPSON.OUT'/\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18 C *****************************************************************************\par
}{\plain \*\cs4\f1\fs18 C * F(X) \_ Function to evaluate, f(x).  Needs updating $.\par
}{\plain \*\cs4\f1\fs18 C *****************************************************************************\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18       F(X) = DSIN(X)\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18 C *****************************************************************************\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18 C     **********\par
}{\plain \*\cs4\f1\fs18 C     * INPUTS *\par
}{\plain \*\cs4\f1\fs18 C     **********\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18 C     \_\_ Prompts for optional title\par
}{\plain \*\cs4\f1\fs18       WRITE (*,1)\par
}{\plain \*\cs4\f1\fs18       WRITE (*,2)\par
}{\plain \*\cs4\f1\fs18       WRITE (*,3)\par
}{\plain \*\cs4\f1\fs18       WRITE (*,*) ' Enter a title [ie \_ Set 2.1,  Problem 2 a) ].'\par
}{\plain \*\cs4\f1\fs18       WRITE (*,*) ' \_\_\_\_> '\par
}{\plain \*\cs4\f1\fs18       READ (*, 100) TITLE\par
}{\plain \*\cs4\f1\fs18 100   FORMAT(A80)\par
}{\plain \*\cs4\f1\fs18       WRITE (*,4)\par
}{\plain \*\cs4\f1\fs18       WRITE (*,*) 'Enter endpoint a:'\par
}{\plain \*\cs4\f1\fs18       READ (*, 101) A\par
}{\plain \*\cs4\f1\fs18 101   FORMAT(D8.0)\par
}{\plain \*\cs4\f1\fs18       WRITE (*,*) 'Enter endpoint b:'\par
}{\plain \*\cs4\f1\fs18       READ (*, 102) B\par
}{\plain \*\cs4\f1\fs18 102   FORMAT(D8.0)\par
}{\plain \*\cs4\f1\fs18 200   WRITE (*,*) 'Enter number of intervals on [a,b], n:'\par
}{\plain \*\cs4\f1\fs18       READ (*, 103) N\par
}{\plain \*\cs4\f1\fs18 103   FORMAT(I8)\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18 C     \_\_ ERROR \_ n must be positive\par
}{\plain \*\cs4\f1\fs18       IF (N .LE. 0) THEN\par
}{\plain \*\cs4\f1\fs18         WRITE (*,*) 'ERROR \_ n must be greater than zero.'\par
}{\plain \*\cs4\f1\fs18         GOTO 200\par
}{\plain \*\cs4\f1\fs18       ENDIF\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18 C     *************\par
}{\plain \*\cs4\f1\fs18 C     * ALGORITHM *\par
}{\plain \*\cs4\f1\fs18 C     *************\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18 C     STEP #1\par
}{\plain \*\cs4\f1\fs18       H = (B \_ A) / N\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18 C     STEP #2\par
}{\plain \*\cs4\f1\fs18       XI0 = F(A) + F(B)\par
}{\plain \*\cs4\f1\fs18 C     \_\_ Summation of f(x(2i\_1))\par
}{\plain \*\cs4\f1\fs18       XI1 = 0.0\par
}{\plain \*\cs4\f1\fs18 C     \_\_ Summation of f(x(2i))\par
}{\plain \*\cs4\f1\fs18       XI2 = 0.0\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18 C     STEP #3\par
}{\plain \*\cs4\f1\fs18       DO 50 I=1,N\_1\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18 C       STEP #4\par
}{\plain \*\cs4\f1\fs18         X = A + I*H\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18 C       STEP #5\par
}{\plain \*\cs4\f1\fs18         IF (MOD(I,2) .EQ. 0) THEN\par
}{\plain \*\cs4\f1\fs18 C         \_\_ For I even\par
}{\plain \*\cs4\f1\fs18           XI2 = XI2 + F(X)\par
}{\plain \*\cs4\f1\fs18         ELSE\par
}{\plain \*\cs4\f1\fs18 C         \_\_ For I odd\par
}{\plain \*\cs4\f1\fs18           XI1 = XI1 + F(X)\par
}{\plain \*\cs4\f1\fs18         ENDIF\par
}{\plain \*\cs4\f1\fs18 50    CONTINUE\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18 C     STEP #6\par
}{\plain \*\cs4\f1\fs18       XI = H * (XI0 + 2*XI2 + 4*XI1) / 3.0\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18 C     ***********\par
}{\plain \*\cs4\f1\fs18 C     * OUTPUTS *\par
}{\plain \*\cs4\f1\fs18 C     ***********\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18 C     STEP #7\par
}{\plain \*\cs4\f1\fs18 C     \_\_ Write output to the screen (*) and to a file (OUT=4).\par
}{\plain \*\cs4\f1\fs18 C     \_\_ Open outfile for output\par
}{\plain \*\cs4\f1\fs18 C     OPEN (OUT,FILE=OUTFILE,STATUS='UNKNOWN')\par
}{\plain \*\cs4\f1\fs18       OPEN (OUT,FILE=OUTFILE)\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18       WRITE (*,1)\par
}{\plain \*\cs4\f1\fs18       WRITE (OUT,1)\par
}{\plain \*\cs4\f1\fs18       WRITE (*,2)\par
}{\plain \*\cs4\f1\fs18       WRITE (OUT,2)\par
}{\plain \*\cs4\f1\fs18       WRITE (*,3)\par
}{\plain \*\cs4\f1\fs18       WRITE (OUT,3)\par
}{\plain \*\cs4\f1\fs18 1     FORMAT(' ',78('\_'))\par
}{\plain \*\cs4\f1\fs18 2     FORMAT(' ',16X,'"Numerical Analysis Algorithms in FORTRAN" v4.0')\par
}{\plain \*\cs4\f1\fs18 3     FORMAT(' ',78('\_'),/)\par
}{\plain \*\cs4\f1\fs18       WRITE (*,*) TITLE\par
}{\plain \*\cs4\f1\fs18       WRITE (OUT,*) TITLE\par
}{\plain \*\cs4\f1\fs18       WRITE (*,4)\par
}{\plain \*\cs4\f1\fs18       WRITE (OUT,4)\par
}{\plain \*\cs4\f1\fs18 4     FORMAT(' Composite Simpson`s Rule \_ Algorithm 4.1',/)\par
}{\plain \*\cs4\f1\fs18       WRITE (*,5) A, B\par
}{\plain \*\cs4\f1\fs18       WRITE (OUT,5) A, B\par
}{\plain \*\cs4\f1\fs18 5     FORMAT(' f(x) = sin(x) from ',D12.7,' to ',D12.7,'.',/) A, B \par
}{\plain \*\cs4\f1\fs18       WRITE (*,6) N\par
}{\plain \*\cs4\f1\fs18       WRITE (OUT,6) N\par
}{\plain \*\cs4\f1\fs18 6     FORMAT(' n = ',I4,' intervals on [a,b].')\par
}{\plain \*\cs4\f1\fs18       WRITE (*,7) H\par
}{\plain \*\cs4\f1\fs18       WRITE (OUT,7) H\par
}{\plain \*\cs4\f1\fs18 7     FORMAT(' Interval number h = ',D13.7/)\par
}{\plain \*\cs4\f1\fs18       WRITE (*,8) B\par
}{\plain \*\cs4\f1\fs18       WRITE (OUT,8) B\par
}{\plain \*\cs4\f1\fs18 8     FORMAT('     {\f4 \'21}',D13.7)\par
}{\plain \*\cs4\f1\fs18       WRITE (*,9) XI\par
}{\plain \*\cs4\f1\fs18       WRITE (OUT,9) XI\par
}{\plain \*\cs4\f1\fs18 9     FORMAT(' I = {\f5 \'2a}  f(x) dx = ',D13.7)\par
}{\plain \*\cs4\f1\fs18       WRITE (*,10) A\par
}{\plain \*\cs4\f1\fs18       WRITE (OUT,10) A\par
}{\plain \*\cs4\f1\fs18 10    FORMAT('     {\f4 \'22}',D13.7/)\par
}{\plain \*\cs4\f1\fs18       WRITE (*,11) N + 1\par
}{\plain \*\cs4\f1\fs18       WRITE (OUT,11) N + 1\par
}{\plain \*\cs4\f1\fs18 11    FORMAT(' Required ',I4,' functional evaluations.',/)\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18 C     \_\_ Closes outfile previously opened for output\par
}{\plain \*\cs4\f1\fs18       ENDFILE (OUT)\par
}{\plain \*\cs4\f1\fs18       CLOSE (OUT)\par
}{\plain \*\cs4\f1\fs18       WRITE (*,12) OUTFILE\par
}{\plain \*\cs4\f1\fs18 12    FORMAT(' Output saved into file "', A, '".',/)\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18       END\par
}{\plain \*\cs4\f1\fs18 C\par
}{\plain \*\cs4\f1\fs18 C *****************************************************************************\par
}{\plain \*\cs4\f1\fs18 C \tab    Copyright (C) 1991, Harold A. Toomey, All Rights Reserved.\par
}\sect \sectd \ds1\sbknone\footery1380\linemod1\endnhere 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 D-\chpgn   Sample Programs in Other Languages\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab Sample Programs in Other Languages  D-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs4\f1\fs18 C *****************************************************************************}{\plain \f1\fs18 }{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs8\b\f2\fs26 }{\plain \*\cs8\b\f2\fs26 {\tc {D.5.2\tab SIMPSON.IN} \tcl3}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}{\plain \f1\fs18 NAA v4.0 Sample Output\par
}{\plain \f1\fs18 0.0\par
}{\plain \f1\fs18 3.14159265358979324\par
}{\plain \f1\fs18 20\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs8\b\f2\fs26 }{\plain \*\cs8\b\f2\fs26 {\tc {D.5.3\tab SIMPSON.OUT} \tcl3}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}{\plain \f1\fs18  \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \f1\fs18                  "Numerical Analysis Algorithms in FORTRAN" v4.0\par
}{\plain \f1\fs18  \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \f1\fs18  \par
}{\plain \f1\fs18  NAA 4.2 Sample Output                                                          \par
}{\plain \f1\fs18   \par
}{\plain \f1\fs18  Composite Simpson`s Rule \_ Algorithm 4.1\par
}{\plain \f1\fs18  \par
}{\plain \f1\fs18  f(x) = sin(x) from .0000000D+00 to .3141592D+01.\par
}{\plain \f1\fs18  \par
}{\plain \f1\fs18  n =   20 intervals on [a,b].\par
}{\plain \f1\fs18  Interval number h =  .1570796D+00\par
}{\plain \f1\fs18  \par
}{\plain \f1\fs18      {\f4 \'21} .3141592D+01\par
}{\plain \f1\fs18  I = {\f5 \'2a}  f(x) dx =  .2000007D+01\par
}{\plain \f1\fs18      {\f4 \'22} .0000000D+00\par
}{\plain \f1\fs18  \par
}{\plain \f1\fs18  Required   21 functional evaluations.\par
}{\plain \f1\fs18 \par
}\pard\page 
\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs6\f2\fs32 }{\plain \*\cs6\b\f2\fs32 {\tc {D.6\tab Pascal} \tcl2}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs8\b\f2\fs26 }{\plain \*\cs8\b\f2\fs26 {\tc {D.6.1\tab SIMPSON.PAS} \tcl3}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}\sect \sectd \ds1\sbknone\marglsxn1980\margrsxn1440\footery1380\linemod1\linerestart\linecont\linex-720\endnhere 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 D-\chpgn   Sample Programs in Other Languages\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab Sample Programs in Other Languages  D-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs4\f1\fs18 \{\par
}{\plain \*\cs4\f1\fs18 FILE NAME: SIMPSON.PAS\par
}{\plain \*\cs4\f1\fs18 LANGUAGE:  PASCAL\par
}{\plain \*\cs4\f1\fs18 COMPILER:  Turbo PASCAL Version 3.02A\par
}{\plain \*\cs4\f1\fs18 STATUS:    Compiles and runs correctly\par
}{\plain \*\cs4\f1\fs18            Note: NAAMATH.INC has not been fully tested yet\par
}{\plain \*\cs4\f1\fs18 \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \{******************************************************************************\par
}{\plain \*\cs4\f1\fs18 \tab \tab Composite Simpson's Rule \_ Algorithm 4.1\par
}{\plain \*\cs4\f1\fs18 *******************************************************************************\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18                                 {\f4 \'21}b\par
}{\plain \*\cs4\f1\fs18 To approximate the integral I = {\f5 \'2a}  f(x) dx:\par
}{\plain \*\cs4\f1\fs18                                 {\f4 \'22}a\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 INPUT endpoints a, b; positive integer n; the function f().\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 OUTPUT approximation XI to I.\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 *******************************************************************************\par
}{\plain \*\cs4\f1\fs18 *\tab Written by:  Harold A. Toomey, CARE\_FREE SOFTWARE, 2Q 1991, v4.0      *\par
}{\plain \*\cs4\f1\fs18 ******************************************************************************\}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 PROGRAM simpson;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \{ USES TRANSCEND \}\tab \tab \{ Un\_comment if using UCSD Pascal. \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   TYPE\par
}{\plain \*\cs4\f1\fs18     STRING_TYPE = STRING[80];\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   CONST\par
}{\plain \*\cs4\f1\fs18     PI = 3.1415926535897932384626433832795028841972;\par
}{\plain \*\cs4\f1\fs18     outfile = 'simpson.out';\tab \{ Default name of the output file. \}\par
}{\plain \*\cs4\f1\fs18     eq_text_f = 'f(x) = sin(x)';\{ Needs Updating $                 \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   VAR\par
}{\plain \*\cs4\f1\fs18     a, b, h, X, XI, XI0, XI1, XI2 : REAL;\par
}{\plain \*\cs4\f1\fs18     i, n    : INTEGER;\par
}{\plain \*\cs4\f1\fs18     title   : STRING_TYPE;\par
}{\plain \*\cs4\f1\fs18     file_id : TEXT;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \{****************************\par
}{\plain \*\cs4\f1\fs18    * PROCEDURES AND FUNCTIONS *\par
}{\plain \*\cs4\f1\fs18    ****************************\}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \{$I NAAUTIL.INC\}\tab \tab \{ Numerical Analysis Algorithms Utilities. \}\par
}{\plain \*\cs4\f1\fs18   \{$I NAAMATH.INC\}\tab \tab \{ Complete set of math functions.          \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \{*****************************************************************************\par
}{\plain \*\cs4\f1\fs18  * f(x) \_ Function to evaluate, f(x).  Needs updating $.\tab \tab      *\par
}{\plain \*\cs4\f1\fs18  *****************************************************************************\}\par
}{\plain \*\cs4\f1\fs18   FUNCTION f(x : REAL) : REAL;\par
}{\plain \*\cs4\f1\fs18   BEGIN\par
}{\plain \*\cs4\f1\fs18     f := SIN(x)\par
}{\plain \*\cs4\f1\fs18   END;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \{*****************************************************************************\par
}{\plain \*\cs4\f1\fs18  *               THIS IS WHERE THE PROGRAM STARTS EXECUTING                  *\par
}{\plain \*\cs4\f1\fs18  *****************************************************************************\}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 BEGIN\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \{**********\par
}{\plain \*\cs4\f1\fs18    * INPUTS *\par
}{\plain \*\cs4\f1\fs18    **********\}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   title := get_title;\tab \tab \{ Prompts for optional comments. \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   WRITELN ('Composite Simpson`s Rule \_ Algorithm 4.1');\par
}{\plain \*\cs4\f1\fs18   WRITELN;\par
}{\plain \*\cs4\f1\fs18   WRITELN (eq_text_f);\par
}{\plain \*\cs4\f1\fs18   WRITELN;\par
}{\plain \*\cs4\f1\fs18   WRITE ('Enter endpoint a: ');\par
}{\plain \*\cs4\f1\fs18   READLN (a);\par
}{\plain \*\cs4\f1\fs18   WRITE ('Enter endpoint b: ');\par
}{\plain \*\cs4\f1\fs18   READLN (b);\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   REPEAT\par
}{\plain \*\cs4\f1\fs18     WRITE ('Enter number of intervals on [a,b], n: ');\par
}{\plain \*\cs4\f1\fs18     READLN (n);\par
}{\plain \*\cs4\f1\fs18     IF n <= 0 THEN\par
}{\plain \*\cs4\f1\fs18       WRITELN ('ERROR \_ n must be greater than zero.');\par
}{\plain \*\cs4\f1\fs18   UNTIL (n > 0);\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \{*************\par
}{\plain \*\cs4\f1\fs18    * ALGORITHM *\par
}{\plain \*\cs4\f1\fs18    *************\}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \{ STEP #1 \}\par
}{\plain \*\cs4\f1\fs18   h := (b \_ a)/n;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \{ STEP #2 \}\par
}{\plain \*\cs4\f1\fs18   XI0 := f(a) + f(b);\par
}{\plain \*\cs4\f1\fs18   XI1 := 0.0;\tab \tab \tab \{ Summation of f(x(2i\_1)). \}\par
}{\plain \*\cs4\f1\fs18   XI2 := 0.0;\tab \tab \tab \{ Summation of f(x(2i)).   \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \{ STEP #3 \}\par
}{\plain \*\cs4\f1\fs18   FOR i := 1 TO n \_ 1 DO\par
}{\plain \*\cs4\f1\fs18     BEGIN\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18       \{ STEP #4 \}\par
}{\plain \*\cs4\f1\fs18       X := a + i*h;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18       \{ STEP #5 \}\par
}{\plain \*\cs4\f1\fs18       IF NOT ODD(i) THEN\par
}{\plain \*\cs4\f1\fs18         XI2 := XI2 + f(X)\tab \{ For even i. \}\par
}{\plain \*\cs4\f1\fs18       ELSE\par
}{\plain \*\cs4\f1\fs18         XI1 := XI1 + f(X)\tab \{ For odd i.  \}\par
}{\plain \*\cs4\f1\fs18     END;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \{ STEP #6 \}\par
}{\plain \*\cs4\f1\fs18   XI := h*(XI0 + 2.0*XI2 + 4.0*XI1) / 3.0;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \{***********\par
}{\plain \*\cs4\f1\fs18    * OUTPUTS *\par
}{\plain \*\cs4\f1\fs18    ***********\}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \{ STEP #7 \}\par
}{\plain \*\cs4\f1\fs18   \{ Write output to the screen. \}\par
}{\plain \*\cs4\f1\fs18   print_title (title);\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   WRITELN ('Composite Simpson`s Rule \_ Algorithm 4.1');\par
}{\plain \*\cs4\f1\fs18   WRITELN;\par
}{\plain \*\cs4\f1\fs18   WRITELN (eq_text_f, ' from ', a :8:8, ' to ', b :8:8, '.');\par
}{\plain \*\cs4\f1\fs18   WRITELN;\par
}{\plain \*\cs4\f1\fs18   WRITELN ('n = ', n, ' intervals on [a,b].');\par
}{\plain \*\cs4\f1\fs18   WRITELN ('Interval number h = ', h :8:8);\par
}{\plain \*\cs4\f1\fs18   WRITELN;\par
}{\plain \*\cs4\f1\fs18   WRITELN ('    {\f4 \'21}', b :8:8);\par
}{\plain \*\cs4\f1\fs18   WRITELN ('I = {\f5 \'2a}  f(x) dx = ', XI :8:8);\par
}{\plain \*\cs4\f1\fs18   WRITELN ('    {\f4 \'22}', a :8:8);\par
}{\plain \*\cs4\f1\fs18   WRITELN;\par
}{\plain \*\cs4\f1\fs18   WRITELN ('Required ', n + 1, ' functional evaluations.');\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   \{ Write output to a file. \}\par
}{\plain \*\cs4\f1\fs18   ASSIGN (file_id, outfile);\tab \{ Opens outfile for output. \}\par
}{\plain \*\cs4\f1\fs18   REWRITE (file_id);\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   print_title_to_outfile (title);\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   WRITELN (file_id);\par
}{\plain \*\cs4\f1\fs18   WRITELN (file_id, 'Composite Simpson`s Rule \_ Algorithm 4.1');\par
}{\plain \*\cs4\f1\fs18   WRITELN (file_id);\par
}{\plain \*\cs4\f1\fs18   WRITELN (file_id, eq_text_f, ' from ', a :8:8, ' to ', b :8:8, '.');\par
}{\plain \*\cs4\f1\fs18   WRITELN (file_id);\par
}{\plain \*\cs4\f1\fs18   WRITELN (file_id, 'n = ', n, ' intervals on [a,b].');\par
}{\plain \*\cs4\f1\fs18   WRITELN (file_id, 'Interval number h = ', h :8:8);\par
}{\plain \*\cs4\f1\fs18   WRITELN (file_id);\par
}{\plain \*\cs4\f1\fs18   WRITELN (file_id, '    {\f4 \'21}', b :8:8);\par
}{\plain \*\cs4\f1\fs18   WRITELN (file_id, 'I = {\f5 \'2a}  f(x) dx = ', XI :8:8);\par
}{\plain \*\cs4\f1\fs18   WRITELN (file_id, '    {\f4 \'22}', a :8:8);\par
}{\plain \*\cs4\f1\fs18   WRITELN (file_id);\par
}{\plain \*\cs4\f1\fs18   WRITELN (file_id, 'Required ', n + 1, ' functional evaluations.');\par
}{\plain \*\cs4\f1\fs18   CLOSE (file_id);\tab \tab \{ Closes output file. \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   WRITELN;\par
}{\plain \*\cs4\f1\fs18   WRITELN ('Output saved into file "', outfile, '".');\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 END.  \tab \tab \tab \tab \{ STOP \}\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \{******************************************************************************\par
}{\plain \*\cs4\f1\fs18 *\tab Copyright (C) 1991, Harold A. Toomey, All Rights Reserved.\tab       *\par
}\sect \sectd \ds1\sbknone\footery1380\linemod1\endnhere 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 D-\chpgn   Sample Programs in Other Languages\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab Sample Programs in Other Languages  D-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs4\f1\fs18 ******************************************************************************\}}{\plain \f1\fs18 }{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs8\b\f2\fs26 }{\plain \*\cs8\b\f2\fs26 {\tc {D.6.2\tab NAAUTIL.INC} \tcl3}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}\sect \sectd \ds1\sbknone\marglsxn1980\margrsxn1440\footery1380\linemod1\linerestart\linecont\linex-720\endnhere 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 D-\chpgn   Sample Programs in Other Languages\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab Sample Programs in Other Languages  D-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs4\f1\fs18 (****************************** NAAUTIL.INC ***********************************\par
}{\plain \*\cs4\f1\fs18 \tab "Numerical Analysis Algorithms in Pascal" Utilities I v4.0\par
}{\plain \*\cs4\f1\fs18 ******************************************************************************)\par
}{\plain \*\cs4\f1\fs18 (*\par
}{\plain \*\cs4\f1\fs18 This include file contains many useful procedures used by most all of the\par
}{\plain \*\cs4\f1\fs18 Numerical Analysis Algorithms programs.  It should be included in all of the\par
}{\plain \*\cs4\f1\fs18 programs using the line \{$I NAAUTIL.INC\}.  It contains the following\par
}{\plain \*\cs4\f1\fs18 procedures and functions:\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 \tab PROCEDURE naaerror               (str     : STRING_TYPE);\par
}{\plain \*\cs4\f1\fs18 \tab FUNCTION  get_title                       : STRING_TYPE;\par
}{\plain \*\cs4\f1\fs18 \tab PROCEDURE print_title            (str     : STRING_TYPE);\par
}{\plain \*\cs4\f1\fs18 \tab PROCEDURE print_title_to_outfile (str     : STRING_TYPE);\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 *)\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 (*****************************************************************************\par
}{\plain \*\cs4\f1\fs18  * naaerror() \_ Numerical Analysis Algorithms standard error handler.        *\par
}{\plain \*\cs4\f1\fs18  *****************************************************************************)\par
}{\plain \*\cs4\f1\fs18 PROCEDURE naaerror(str : STRING_TYPE);\par
}{\plain \*\cs4\f1\fs18 BEGIN\par
}{\plain \*\cs4\f1\fs18   WRITELN;\par
}{\plain \*\cs4\f1\fs18   WRITELN('Numerical Analysis Algorithms run\_time error...');\par
}{\plain \*\cs4\f1\fs18   WRITELN(str);\par
}{\plain \*\cs4\f1\fs18   WRITELN('...now exiting to system...');\par
}{\plain \*\cs4\f1\fs18   HALT\par
}{\plain \*\cs4\f1\fs18 END;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 (*****************************************************************************\par
}{\plain \*\cs4\f1\fs18  * get_title() \_ Prints the NAA banner and prompts for an optional title.    *\par
}{\plain \*\cs4\f1\fs18  *****************************************************************************)\par
}{\plain \*\cs4\f1\fs18 FUNCTION get_title : STRING_TYPE;\par
}{\plain \*\cs4\f1\fs18 VAR\par
}{\plain \*\cs4\f1\fs18   str : STRING_TYPE;\par
}{\plain \*\cs4\f1\fs18 BEGIN\par
}{\plain \*\cs4\f1\fs18   FOR i := 1 TO 79 DO\par
}{\plain \*\cs4\f1\fs18     WRITE('\_');\par
}{\plain \*\cs4\f1\fs18   WRITELN;\par
}{\plain \*\cs4\f1\fs18   WRITE('                 ');\par
}{\plain \*\cs4\f1\fs18   WRITELN('"Numerical Analysis Algorithms in Pascal" v4.0');\par
}{\plain \*\cs4\f1\fs18   FOR i := 1 TO 79 DO\par
}{\plain \*\cs4\f1\fs18     WRITE('\_');\par
}{\plain \*\cs4\f1\fs18   WRITELN;\par
}{\plain \*\cs4\f1\fs18   WRITELN;\par
}{\plain \*\cs4\f1\fs18   WRITELN('Enter a title [ie \_ Set 2.1,  Problem 2 a) ].');\par
}{\plain \*\cs4\f1\fs18   WRITE('\_\_\_\_> ');\par
}{\plain \*\cs4\f1\fs18   READLN(str);\par
}{\plain \*\cs4\f1\fs18   WRITELN;\par
}{\plain \*\cs4\f1\fs18   get_title := str\par
}{\plain \*\cs4\f1\fs18 END;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 (*****************************************************************************\par
}{\plain \*\cs4\f1\fs18  * print_title() \_ Prints the optional title to the screen.                  *\par
}{\plain \*\cs4\f1\fs18  *****************************************************************************)\par
}{\plain \*\cs4\f1\fs18 PROCEDURE print_title(str : STRING_TYPE);\par
}{\plain \*\cs4\f1\fs18 VAR\par
}{\plain \*\cs4\f1\fs18   i : INTEGER;\par
}{\plain \*\cs4\f1\fs18 BEGIN\par
}{\plain \*\cs4\f1\fs18   FOR i := 1 TO 79 DO\par
}{\plain \*\cs4\f1\fs18     WRITE('\_');\par
}{\plain \*\cs4\f1\fs18   WRITELN;\par
}{\plain \*\cs4\f1\fs18   WRITE('                 ');\par
}{\plain \*\cs4\f1\fs18   WRITELN('"Numerical Analysis Algorithms in Pascal" v4.0');\par
}{\plain \*\cs4\f1\fs18   FOR i := 1 TO 79 DO\par
}{\plain \*\cs4\f1\fs18     WRITE('\_');\par
}{\plain \*\cs4\f1\fs18   WRITELN;\par
}{\plain \*\cs4\f1\fs18   WRITELN;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   IF LENGTH(str) > 1 THEN\par
}{\plain \*\cs4\f1\fs18     WRITELN(str);\par
}{\plain \*\cs4\f1\fs18   WRITELN\par
}{\plain \*\cs4\f1\fs18 END;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 (*****************************************************************************\par
}{\plain \*\cs4\f1\fs18  * print_title_to_outfile() \_ Prints the optional title to a file.           *\par
}{\plain \*\cs4\f1\fs18  *****************************************************************************)\par
}{\plain \*\cs4\f1\fs18 PROCEDURE print_title_to_outfile(str : STRING_TYPE);\par
}{\plain \*\cs4\f1\fs18 VAR\par
}{\plain \*\cs4\f1\fs18   i : INTEGER;\par
}{\plain \*\cs4\f1\fs18 BEGIN\par
}{\plain \*\cs4\f1\fs18   FOR i := 1 TO 79 DO\par
}{\plain \*\cs4\f1\fs18     WRITE (file_id, '\_');\par
}{\plain \*\cs4\f1\fs18   WRITELN (file_id);\par
}{\plain \*\cs4\f1\fs18   WRITE   (file_id, '                 ');\par
}{\plain \*\cs4\f1\fs18   WRITELN (file_id, '"Numerical Analysis Algorithms in Pascal" v4.0');\par
}{\plain \*\cs4\f1\fs18   FOR i := 1 TO 79 DO\par
}{\plain \*\cs4\f1\fs18     WRITE (file_id, '\_');\par
}{\plain \*\cs4\f1\fs18   WRITELN (file_id);\par
}{\plain \*\cs4\f1\fs18   WRITELN (file_id);\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18   IF LENGTH(str) > 1 THEN\par
}{\plain \*\cs4\f1\fs18     WRITELN (file_id, str);\par
}{\plain \*\cs4\f1\fs18 END;\par
}{\plain \*\cs4\f1\fs18 \par
}{\plain \*\cs4\f1\fs18 (******************************************************************************\par
}{\plain \*\cs4\f1\fs18 *\tab Written by:  Harold A. Toomey, CARE\_FREE SOFTWARE, 2Q 1991, v4.0      *\par
}{\plain \*\cs4\f1\fs18 *\tab Copyright (C) 1991, Harold A. Toomey, All Rights Reserved.\tab       *\par
}\sect \sectd \ds1\sbknone\footery1380\linemod1\endnhere 
{\footerl \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 D-\chpgn   Sample Programs in Other Languages\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs2\b\f2\fs18 Version 4.2\tab Sample Programs in Other Languages  D-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs4\f1\fs18 ******************************************************************************)}{\plain \f1\fs18 }{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs8\b\f2\fs26 }{\plain \*\cs8\b\f2\fs26 {\tc {D.6.3\tab NAAMATH.INC} \tcl3}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}{\plain \*\cs5\fs22 Too long to list here.  "Naamath.inc" contains a complete set of mathematical functions left out of the Pascal 
language.}{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs8\b\f2\fs26 }{\plain \*\cs8\b\f2\fs26 {\tc {D.6.4\tab SIMPSON.IN} \tcl3}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}{\plain \f1\fs18 NAA v4.0 Sample Output\par
}{\plain \f1\fs18 0.0\par
}{\plain \f1\fs18 3.14159265358979\par
}{\plain \f1\fs18 20\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 \par
}\pard \fi-720\li720\sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \*\cs8\b\f2\fs26 }{\plain \*\cs8\b\f2\fs26 {\tc {D.6.5\tab SIMPSON.OUT} \tcl3}}{\plain \f1\fs18 \par
}\pard \sl0\tx0\tx885\tx1771\tx2656\tx3542\tx4428\tx5313\tx6199\tx7084\tx7970 
{\plain \f1\fs18 \par
}{\plain \f1\fs18 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \f1\fs18                  "Numerical Analysis Algorithms in Pascal" v4.0\par
}{\plain \f1\fs18 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \f1\fs18 NAA 4.0 Sample Output\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 Composite Simpson`s Rule \_ Algorithm 4.1\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 f(x) = sin(x) from 0.00000000 to 3.14159200.\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 n = 20 subintervals of [a,b].\par
}{\plain \f1\fs18 Interval number h = 0.15707960\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18     {\f4 \'21}3.14159200\par
}{\plain \f1\fs18 I = {\f5 \'2a}  f(x) dx = 2.00000678\par
}{\plain \f1\fs18     {\f4 \'22}0.00000000\par
}{\plain \f1\fs18 \par
}{\plain \f1\fs18 Required 21 functional evaluations.}}}}