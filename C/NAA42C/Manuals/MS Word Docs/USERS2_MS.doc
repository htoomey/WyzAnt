{\rtf1\ansi \deflang1033\deff0{\fonttbl
{\f0\fnil \fcharset0 \fprq2 Dutch 801;}{\f1\fnil \fcharset0 \fprq2 Swiss 721;}{\f2\fnil \fcharset0 \fprq2 Courier New;}
{\f3\fnil \fcharset2 \fprq2 WP MathExtendedA;}{\f4\fnil \fcharset2 \fprq2 WP BoxDrawing;}{\f5\fnil \fcharset2 \fprq2 WP Greek Century;}
{\f6\fnil \fcharset2 \fprq2 WP MathA;}{\f7\fnil \fcharset0 \fprq2 Arial;}{\f8\fnil \fcharset0 \fprq2 ;}
{\f9\fnil \fcharset0 \fprq2 WP MathB;}}{\colortbl
\red0\green0\blue0;}
{\stylesheet{\fs20 \snext0 Normal;}
{\*\ds1 5_Body_Text;}
{\*\cs2 \additive\b\f1\fs18 6_Footer;}
{\*\cs3 \additive\b\f1\fs40 1_Chapter;}
{\*\cs4 \additive\b\f1\fs32 2_Section;}
{\*\cs5 \additive\b\f1\fs26 3_Sub-Sectio;}
{\*\cs6 \additive\f2 4_Code;}
{\*\cs7 \additive\*\cs6\f1\fs22 7_Body_Text2;}
{\*\ds8 Sub-Sub Chap;}
{\*\ds9 Body Text;}
{\*\ds10 Source Code;}
{\*\ds11 Sub-Chapter;}
{\*\ds12 Chapter;}
{\*\ds13 ASCII Text;}
{\*\cs14 \additive T;}
{\*\cs15 \additive A;}
}\margl1080\margr1080\margt900\margb900\widowctrl\ftnbj\ftnrestart\aftnnar \sectd \ds1\sbknone\footery1380\endnhere\titlepg\facingp 
{\footerl \pard \sl0 
{\plain \*\cs2\b\f1\fs18 6-\chpgn   Helps and Hints\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0 
{\plain \*\cs2\b\f1\fs18 Version 4.2\tab Helps and Hints  6-\chpgn \par }}
{\footerf \pard \sl0 
{\plain \*\cs2\b\f1\fs18 Version 4.2\tab Helps and Hints  6-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs3\b\f1\fs40 {\tc {}{\plain \*\cs3\b\f1\fs40 6.\tab Helps and Hints}}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 This chapter contains many of the fine details that can make your use of this software package a pleasant 
experience.  Read each section as soon as possible to avoid wasting unnecessary time with tasks or problem 
solving.  The sections below are designed to save you time, improve your confidence in the algorithms, bring your 
attention to compiler and text errors, and help you customize the programs to best suit your needs.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {6.1\tab Generally Nice To Know} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 The following sub-sections will give you a better understanding of how to manipulate and customize these 
algorithms.  They may even save you the trouble of learning any peculiarities of "Numerical Analysis Algorithms 
in C" the hard way.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.1.1\tab Professor's Favorites, Must Have, Algorithms} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Six algorithms have been included as requested by several Brigham Young University mathematics professors.  
These programs are not included in the text, but serve to enhance it.  In reality, these are the programs that had to 
be included in order to persuade Brigham Young University to convert from FORTRAN to C.  Each of these 
programs are named with an "A.c" suffix.  These algorithms are:\par
}{\plain \fs22 \par
}{\plain \fs22 \tab 028A.c\tab - Complex Polynomial Solver (CPOLY)\par
}{\plain \fs22 \tab 101A.c\tab - Steffenson's Method for Systems\par
}{\plain \fs22 \tab 126A.c\tab - Parabolic Equations With Newton Iteration in 1-D\par
}{\plain \fs22 \tab 127A.c\tab - Parabolic Equations With Newton Iteration in 2-D\par
}{\plain \fs22 \tab 128A.c\tab - Elliptic Equations With Newton Iteration in 2-D\par
}{\plain \fs22 \tab 129A.c\tab - Biharmonic Equation Using Gauss-Jordan Method\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.1.2\tab Homework Helper Algorithms} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Each algorithm not specifically given in the text has a B, C, or D placed before the ".c" extension in its file name.  
Roughly a third of all the programs included are modifications to the given text algorithms.  Many of them are 
requested as homework exercises.  These modifications range from implementing SIG-digit rounding, or adding 
Richardson's extrapolation, to solving for AX=B after performing matrix factorization.\par
}{\plain \fs22 \par
}{\plain \fs22 Each program has a comment block at the top of the file.   This comment block also indicates which page of the 
text and which problem numbers to expect to use these "Homework Helper" algorithms.  This was included to 
show where these modifications fit into the text.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.1.3\tab Optional Title} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Each program begins by prompting for a one\_line title.  This title is printed to the output file for your convenience.  
If you do not want a title then just enter a [RETURN] or [ENTER] and no title will be used.  To turn off the 
prompt for an optional title, simply change the TITLE_PROMPT flag to FALSE in the file "naautil.c."\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.1.4\tab Optional File Saving} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Each program has a default output file name associated with it.  This file has the same name as the program being 
run, but with a ".out" extension.  The default setting in "naautil.c" is to create an output file as a program is run.  
To run a program without saving the output to the default output file, just change the FILE_SAVE flag to FALSE 
in the file "naautil.c."\par
}{\plain \fs22 \par
}{\plain \fs22 Errors may result if your disk is too full or the disk is write-protected while the FILE_SAVE flag is set to TRUE.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.1.5\tab Finding Functions} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Many of the algorithms require a function to be evaluated.  These algorithms can be found in chapters 2, 4, 5, 8, 
11, and 12.  The functions are printed out to the screen and to the output file.  Each function needs changing in 
two places, once in the function itself, and once in the comments to be printed out.  Both of these are shown at the 
top of each program before main().  To aid you in finding these functions, search for the "$" character.  This is the 
only use of the "$" symbol throughout all the programs.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.1.6\tab Using Default Inputs} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Several of the programs ask if another input needs to be evaluated.  Make use of the default inputs as shown by 
just pressing the [ENTER] key.  This will make repetitious loops easier to use. Example:  "\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
}{\plain \*\cs6\f2 Evaluate 
another value of X? (Y/N) Y}{\plain \fs22 "  means just press [ENTER] for Yes.\par
}{\plain \fs22 \par
}{\plain \fs22 There is no default for entering tolerances (TOL).  When shown one, it is a suggested tolerance, not a default.  
Hitting [ENTER] will cause the program to keep waiting (blank stares) until a valid floating-point number is 
entered.\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Entering text where numbers are expected or numbers where text is expected will cause the programs to "crash" 
and usually enter an infinite input loop.  This is characteristic of the scanf() function.  This unfortunate situation 
can usually be remedied by typing "}{\plain \*\cs6\f2 [CONTROL]\~C}{\plain \fs22 ".  Many of the algorithms perform user-friendly range 
checking, but not data type checking.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.1.7\tab Changing Arithmetic Precision} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 There may be a "slight" difference to the solutions that these algorithms produce as compared to those shown in 
the text examples.  This is usually a result of different word sizes used in the computations (ie - float, double, long 
double).  This is a computer and compiler dependant situation and can be expected -- within reason.  Only 
deviations in the least significant digits should be noticeable.  An accumulation of this round-off error may result in 
the variation of even more significant digits.  See the header file <float.h> for the expected number of significant 
digits when using your C compiler.\par
}{\plain \fs22 \par
}{\plain \fs22 Most digital computers use floating-point formats which provide a close but by no means exact simulation of real 
number arithmetic.  Among other things, the associative and distributive laws do not hold completely (i.e. order of 
operation may be important, repeated addition is not necessarily equivalent to multiplication).  Underflow or 
cumulative precision loss is often a problem.\par
}{\plain \fs22 \par
}{\plain \fs22 Do not assume that floating-point results will be exact.  These problems are no worse for C than they are for any 
other computer language.  Floating-point semantics are usually defined as "however the processor does them;" 
otherwise a compiler for a machine without the "right" model would have to do prohibitively expensive emulations.  
More accurate result can usually be obtained by increasing the precision from type "float" to type "double", or 
from type "double" to type "long double."\par
}{\plain \fs22 \par
}{\plain \fs22 When changing a program's precision to or from different floating-point types, remember to change the following:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 }{\plain \*\cs6\ul\f2 \tab \tab FLOAT\tab \tab DOUBLE\tab \tab LONG DOUBLE}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 Variables:\tab float\tab \tab double\tab \tab long double\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 printf():\tab %f\tab \tab %lf\tab \tab %Lf\par
}{\plain \*\cs6\f2 \tab \tab %g or %G\tab %lg or %lG\tab %Lg or %LG\par
}{\plain \*\cs6\f2 \tab \tab %e or %E\tab %le or %lE\tab %Le or %LE\par
}{\plain \*\cs6\f2 \tab \tab % f, etc.\tab % lf, etc.\tab % Lf, etc.\par
}{\plain \*\cs6\f2 \tab \tab %.9f, etc.\tab %.16lf, etc.\tab %.25Lf, etc.\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 naautil.c:\tab vector();\tab dvector();\par
}{\plain \*\cs6\f2 \tab \tab matrix();\tab dmatrix();\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 naautil2.c:\tab \tab \tab \tab \tab ldvector();\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab \tab \tab \tab \tab \tab ldmatrix();}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Some C compilers may add an "f" prefix to their math functions to distinguish them as returning float types instead 
of the usual double type.  These may be implemented as compiler extensions (such as the MIPS C compiler) but 
are not part of the ANSI C standard.\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab }{\plain \*\cs6\ul\f2 Float\tab \tab Double}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 \tab fsin();\tab \tab sin();\par
}{\plain \*\cs6\f2 \tab fcos();\tab \tab cos();\par
}{\plain \*\cs6\f2 \tab ftan();\tab \tab tan();\par
}{\plain \*\cs6\f2 \tab fasin();\tab asin();\par
}{\plain \*\cs6\f2 \tab facos();\tab acos();\par
}{\plain \*\cs6\f2 \tab fatan();\tab atan();\par
}{\plain \*\cs6\f2 \tab fsinh();\tab sinh();\par
}{\plain \*\cs6\f2 \tab fcosh();\tab cosh();\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab ftanh();\tab tanh();}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.1.8\tab Using Floating-Point Numbers in Functions} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 When modifying function equations, be sure to type all constants in floating-point format.  Good C compilers know 
that if one argument in an expression is a floating-point value then all integer types will be promoted (converted) to 
floating-point values.  There is no guarantee of getting a correct result especially since many older compilers do 
not implement strong prototyping.\par
}{\plain \fs22 A common error is to type:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 return ((3/2)*sin(x));\tab \tab /* Bad Example */}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 instead of:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 return ((3.0/2.0)*sin(x));\tab \tab /* Good Example */}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 The first expression returns "1*sin(x)" while the later returns "1.5*sin(x)".  The first is incorrect since with C 
integer arithmetic, 3/2 equals 1, being truncated to the nearest integer.  A "lazy man's" way is to type:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 return ((3./2)*sin(x));\tab \tab /* Good Example */}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.1.9\tab The Pow() Function} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Remember, pow() requires both arguments to be double-precision floating-point types (double).  For  instance, to 
raise 5.8 to the 3rd power, type "pow(5.8,3.0)" not "pow(5.8,3)".\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.1.10\tab Implementing SIG-Digit Rounding/Truncation} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 To modify a program to work with SIG\_digit rounding arithmetic, do the below steps:\par
}{\plain \fs22 \par
}\pard \fi-1152\li1152\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 NOTE:\tab To implement SIG\_digit truncation or chopping, replace the word "round" with the word "trunc".\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 Example:\par
}\pard \li1152\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 #include "round.c" -\_\_> #include "trunc.c"\par
}\pard \li1152\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 round(num,SIG) ----\_-\_> trunc(num,SIG)}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 1.\tab Add the below #include file:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab \tab }{\plain \*\cs6\f2 #include "round.c" /* Rounds X to SIG significant digits. 
*/}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 This file requires <float.h> and <math.h> which are already included inside of "naautil.c."\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 2.\tab Add to the global variable list, above main() (or locally inside of main() if round() is ONLY used inside 
main()), the following:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab \tab }{\plain \*\cs6\f2 int SIG;}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 3.\tab Prompt for the number of significant digits, SIG, using the code:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2   do \{\par
}{\plain \*\cs6\f2     printf("Enter the number of significant digits, SIG (1\_%d): ",\par
}{\plain \*\cs6\f2       DBL_DIG);\par
}{\plain \*\cs6\f2     scanf("%d", &SIG);\par
}{\plain \*\cs6\f2     if (SIG < 1 || SIG > DBL_DIG)\tab /* Range checking */\par
}{\plain \*\cs6\f2       printf("Enter 1 to %d only for number of significant 
digits.\\n",\par
}{\plain \*\cs6\f2         DBL_DIG);\par
}{\plain \*\cs6\f2   \} while (SIG < 1 || SIG > DBL_DIG);\par
}{\plain \*\cs6\f2   fprintf(file_id, "Computed with %d\_digit rounding 
arithmetic.\\n\\n",\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2     SIG);}{\plain \fs22 \par
}{\plain \fs22  \par
}\pard \fi-1728\li1728\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab NOTE:\tab DBL_DIG is defined in <float.h> and is usually has the value of around "10".\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22  \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 4.\tab Now, for EVERY number and after EVERY computation (ie\_ +,\_,*,/, pow(), sqrt(), etc.) add a line similar 
to the following:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 \tab num = round(num, SIG);}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 or just "}{\plain \*\cs6\f2 round(num, SIG)}{\plain \fs22 " if in the middle of an equation.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 5.\tab (OPTIONAL) Change the output line to show only SIG digits using "*" and "SIG", like:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab printf("% *g ", SIG, X[i]);}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 6.\tab (OPTIONAL) Change all doubles to floats and all "%lg", "%lf", and "%le"'s to "%g", "%f", and "%e" as 
well as all dmatrix() and dvector() to matrix() and vector() as explained in Sub-Section 6.1.7.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 7.\tab If the Tolerance is prompted for, like below:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab printf("Enter the tolerance, TOL (1.0e\_4): ");\par
}{\plain \*\cs6\f2 \tab scanf("%lf", &TOL);\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab fprintf(file_id, "Tolerance = %lg\\n\\n", TOL);}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 replace it with:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab TOL = 0.5*pow(10.0, \_((double) SIG));\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab fprintf(file_id, "Tolerance = %lg\\n\\n", TOL);}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.1.11\tab Floating-Point Output Alignment} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Many of the programs attempt to print out answers in columns, such as for tables (chapters 2, 3, 5, 7\_12) and 
matrices (chapters 6, 7, 9).  Assuming the majority of the programs would be used for "normally small" numbers, 
printf() was used with "%g" and "%f" format arguments.  This can causes the output to appear unaligned if large 
numbers are printed along side small numbers.  If you would like to have the output align all the time then use 
"%e".  This forces ALL numbers to be of the form:\par
}{\plain \fs22 \par
}{\plain \fs22 \tab \_3.14159e\_002\tab \tab [sign] [mantissa] e [[sign] exponent]\par
}{\plain \fs22 \par
}{\plain \fs22 Alignment is guaranteed, but the numbers often take up more room than is necessary and can be less easy to 
read.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {6.2\tab Converting Programs into Functions} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 After becoming familiar with several of these algorithms, many users desire to use them as stand-alone functions 
to be called from within other C programs.  Several books may be purchased which provide only functions, not 
stand-alone programs, such as the book "Numerical Recipes."  Extra care has been placed into all of the 
"Numerical Analysis Algorithms in C" programs to help make converting them into functions easier.\par
}{\plain \fs22 \par
}{\plain \fs22 Modifying these algorithms to be FORTRAN callable is also possible.  The details for this procedure are too 
detailed and compiler dependent to be listed in this general-purpose User's Manual.\par
}{\plain \fs22 \par
}{\plain \fs22 Converting a stand-alone algorithm into a function can be simpler than you might think.  Most of the process 
involves deleting the unnecessary input and output code.  An example using Algorithm 4.1 listed in Appendix A is 
given for completeness.\par
}{\plain \fs22 \par
}{\plain \fs22 To convert a stand-alone program into a function, perform the following steps:\par
}{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 1.\tab Rename "main()" to a proper function name, such as "simpson()."  Be sure to place the appropriate return 
type (usually double) before the function name.  Example:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab From:\tab }{\plain \*\cs6\f2 main()}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab To:\tab \tab }{\plain \*\cs6\f2 double simpson()}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 2.\tab Separate the variables that follow "main()" into two groups: those to be passed as parameters and those that 
are internal to the function.  Refer to the INPUT section in the comments at the top of each algorithm to 
determine the passed parameters.  Place the passed parameters into the function parentheses, such as:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-5760\li5760\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab double simpson (a, b, n)\tab /* K&R Style */\par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab double a, b;\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab int n;}{\plain \fs22 \par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 or\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab double simpson (double a, double b, int n)  /* ANSI Style 
*/}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Ensure that the internal variables are placed after the first "\{" character.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 3.\tab Delete any unnecessary global variables, such as "char *outfile\~..." and "char *eq_text_f\~..."\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 4.\tab Replace all function definitions (not calls), such as f(x), with a proper prototype, such as:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab double f();\tab \tab /* K&R Style */}{\plain \fs22 \par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 or\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab double f(double x);\tab /* ANSI Style */}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 This instructs your C compiler that the function f receives a variable of type double and returns a result of 
type double.  Failure to do this may cause the function f to return erroneous integer results.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 5.\tab Remove most all of the code under the INPUTS section.  You may want to keep any range checking code, 
such as:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab if (n <= 0) \{\par
}{\plain \*\cs6\f2 \tab   printf("ERROR - n must be greater than zero.\\n);\par
}{\plain \*\cs6\f2 \tab   exit (-1);\tab \tab /* Exit to system */\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab \}}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 6.\tab Keep the code under the ALGORITHM section.  This will form the "brains" of the new function.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 7.\tab Replace all of the code under the OUTPUTS section with a single return() statement.  The only exception 
would be to leave any "free_*()" calls.  The return() call should be the last statement of the new function.  
The return value should match that in the top comments of the program.  For "041.C", use:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab return (XI);}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 8.\tab Double-check for and remove any unwanted printf() and scanf() routines.  Most mathematical functions do 
not use them.  Scanf() data should be passed to the function, while printf() output should be handled by the 
calling main program.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.2.1\tab An Example Using Simpson's Rule} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Algorithm 4.1 - Composite Simpson's Rule ("041.c") was converted into a stand-alone function named simpson() 
as shown below.  This function can also be found in the UTIL sub-directory in a file named "041fun.c."\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 /*********************************************************************\par
}{\plain \*\cs6\f2 \tab \tab Composite Simpson's Rule \_ Algorithm 4.1\par
}{\plain \*\cs6\f2 \tab \tab \tab As A Stand\_Alone Function\par
}{\plain \*\cs6\f2 **********************************************************************\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2                                 {\f3 \'21}b\par
}{\plain \*\cs6\f2 To approximate the integral I = {\f4 \'2a}  f(x) dx:\par
}{\plain \*\cs6\f2                                 {\f3 \'22}a\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 INPUT endpoints a, b; even positive integer n; the function f().\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 OUTPUT approximation XI to I.\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 NOTE: Listed as Simpson's Composite Rule in 3rd edition of the 
text.\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 **********************************************************************\par
}{\plain \*\cs6\f2 *  Written by:  Harold A. Toomey, CARE\_FREE SOFTWARE, 3Q 1991, v4.2  
*\par
}{\plain \*\cs6\f2 *********************************************************************/\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 #include "naautil.c"\tab /* Numerical Analysis Algorithms Utilities. 
*/\par
}{\plain \*\cs6\f2 double f(double x);\tab \tab /* Function prototype */\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 double simpson (a, b, n)\par
}{\plain \*\cs6\f2 double a, b;\par
}{\plain \*\cs6\f2 int n;\par
}{\plain \*\cs6\f2 \{\par
}{\plain \*\cs6\f2   double h, X, XI, XI0, XI1, XI2, f();\par
}{\plain \*\cs6\f2   int i;\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2   if ((n <= 0) || (n % 2 != 0)) \{\tab /* Range checking */\par
}{\plain \*\cs6\f2     printf("ERROR \_ n must be even and greater than zero.\\n");\par
}{\plain \*\cs6\f2     exit (\_1);\tab \tab \tab /* Exit to system */\par
}{\plain \*\cs6\f2   \}\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2   /*************\par
}{\plain \*\cs6\f2    * ALGORITHM *\par
}{\plain \*\cs6\f2    *************/\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2   /* STEP #1 */\par
}{\plain \*\cs6\f2   h = (b \_ a)/n;\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2   /* STEP #2 */\par
}{\plain \*\cs6\f2   XI0 = f(a) + f(b);\par
}{\plain \*\cs6\f2   XI1 = 0.0;\tab \tab \tab /* Summation of f(x(2i\_1)). */\par
}{\plain \*\cs6\f2   XI2 = 0.0;\tab \tab \tab /* Summation of f(x(2i)).   */\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2   /* STEP #3 */\par
}{\plain \*\cs6\f2   for (i=1;i<n;i++) \{\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2     /* STEP #4 */\par
}{\plain \*\cs6\f2     X = a + i*h;\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2     /* STEP #5 */\par
}{\plain \*\cs6\f2     if (i % 2 == 0)\par
}{\plain \*\cs6\f2       XI2 += f(X);\tab \tab /* For even i. */\par
}{\plain \*\cs6\f2     else\par
}{\plain \*\cs6\f2       XI1 += f(X);\tab \tab /* For odd i.  */\par
}{\plain \*\cs6\f2   \}\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2   /* STEP #6 */\par
}{\plain \*\cs6\f2   XI = h*(XI0 + 2.0*XI2 + 4.0*XI1) / 3.0;\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2   return (XI);\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 \}  \tab \tab \tab \tab /* STOP */\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 /********************************************************************/\par
}{\plain \*\cs6\f2 /*  Copyright (C) 1988\_1991, Harold A. Toomey, All Rights Reserved. 
*/\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 /********************************************************************/}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {6.3\tab Using Input Files (*.IN)} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 An input file is provided in the IN sub-directory for each algorithm.  Each file contains the same name as the 
algorithm, but with a ".in" extension instead of ".c".  The contents of each input file match the examples given in 
the text following each algorithm.  They were used to create the accompanying output files for each algorithm in 
the OUT sub-directory.\par
}{\plain \fs22 \par
}{\plain \fs22 Input files can be used to save time.  They are especially helpful when working with large arrays where only 
small changes are made from run to run.  Input files consist of simple text just as you would enter it if the program 
prompted you for it.\par
}{\plain \fs22 \par
}{\plain \fs22 Please note that the input files provided with "Numerical Analysis Algorithms in C" require that the below 
"naautil.c" flags be set as follows:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab }{\plain \*\cs6\ul\f2 FLAG\tab \pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
}{\plain \ul\f2 \tab SETTING}{\plain \f2 \par
}{\plain \f2 \tab TITLE_PROMPT\tab TRUE\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \f2 \tab EQ_EVAL\tab \tab FALSE}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Input files can be redirected as input as a program is run.  For example, to "feed" Algorithm 4.1 with data from an 
input file, type one of the following:\par
}{\plain \fs22 \par
}{\plain \fs22 MS-DOS:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22       \tab }{\plain \*\cs6\f2 C:\\NAA42> 041 < IN\\041.IN}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 UNIX:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 % 041 < in/041.in}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 VAX/VMS:\par
}\pard \fi-4032\li4608\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 }{\plain \*\cs6\f2 $ DEFINE SYS$INPUT 041.IN\tab }{\plain \fs22 - assumes "041.IN" is in the current directory\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 }{\plain \*\cs6\f2 $ RUN 041}{\plain \fs22 \par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 }{\plain \*\cs6\f2 $ DEASSIGN SYS$INPUT}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 MACINTOSH with THINK C 4.0:\par
}{\plain \fs22 \par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 To use redirection on a Macintosh with the THINK\~C 4.0 compiler, each algorithm must be modified as 
follows:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li1152\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 1.\tab Add these two lines of code just before main():\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-2304\li2304\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab \tab #include <console.h>\par
}\pard \fi-2304\li2304\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab \tab int ccommand (char ***p);}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li1152\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 2.\tab Add arguments (parameters) to main() as shown below:\par
}\pard \fi-2304\li2304\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 }{\plain \*\cs6\f2 \tab \tab main(int argc, char **argv)}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li1152\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 3.\tab Just after the variable declarations for main() and before calling "NAA_do_first(outfile);", add:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-2304\li2304\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab \tab argc = ccommand(&argv);}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 After making these modifications, Algorithm 4.1 should look like this:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \li1152\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 ...\par
}\pard \li1152\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 #include <console.h>\par
}\pard \li1152\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 int ccommand (char ***p);\par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \par
}\pard \li1152\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 main(int argc, char **argv)\par
}\pard \li1152\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \{\par
}\pard \li1152\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2   double a, b, h, X, XI, XI0, XI1, XI2, f();\par
}\pard \li1152\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2   int i, n;\par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \par
}\pard \li1152\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2   argc = ccommand(&argv);\par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \par
}\pard \li1152\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2   NAA_do_first(outfile);  /* NAA initialization procedure. 
*/\par
}\pard \li1152\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2   ...\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab \}}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Be sure to link to the "ANSI" library.  It contains the ccommand() console command.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Now, when the modified algorithm is run, a command-line window will appear.  Ensure that the input file is 
in the same folder as "041.c" and enter: "041 < 041.in".\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {6.4\tab Using Output Files (*.OUT)} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 An output file is provided in the OUT sub-directory for each algorithm.  They contain the same name as the 
algorithms, but with a ".out" file extension instead of ".c".  The default name of an algorithm's output file can be 
easily changed by modifying "char *outfile = "nnn.out"; " at the top of each individual algorithm.  The contents of 
each output file match the examples given in the text following each algorithm.  They were created by redirecting 
the input files found in the IN sub-directory.\par
}{\plain \fs22 \par
}{\plain \fs22 These output files can be used to verify that each algorithm is performing as expected.  Use them to compare 
your output results on your computer system.\par
}{\plain \fs22 \par
}{\plain \fs22 Output files differ somewhat from what you see when a program is run.  Output files format the output into a 
more condensed and ready-to-print format.  They are created with calls to printf2() and fprintf(file_id,...) ONLY.  
The FILE_SAVE flag in "naautil.c" must be set to TRUE to create output files.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {6.5\tab Explanation of the Naautil.c File} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 The "naautil.c" file is the most important file of all the "Numerical Analysis Algorithm in C" files.  It contains 
functions and routines that are used in every algorithm.  It also allows these programs to work on many non-standard C compilers.  The "naautil.c" file should be included in all of the programs using }{\plain \*\cs6\f2 #include 
"naautil.c"}{\plain \fs22 .\par
}{\plain \fs22 \par
}{\plain \fs22 If your C compiler is not truly ANSI C compliant, the "naautil.c" file will be the first to correct it or the first to 
cause error messages.  The complete source code for "naautil.c" is listed in Appendix B.  This file also contains 
several flags or #define statements which you can set to get the most out of these algorithms.\par
}{\plain \fs22 \par
}{\plain \fs22 "Naautil.c" also defines the constant {\f5 \'42} (PI) {\f6 \'2e} 3.14159..., although it can often be found in some system header 
files.  It is most useful in trigonometric functions.  The constants "TRUE" and "FALSE" are also defined just in 
case the system header files fail to define them.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.5.1\tab #Define Flags} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 "Naautil.c" has eight flags that can be set.  Most are usually set only once.  An explanation of each flag is given 
below.\par
}{\plain \fs22 \par
}{\plain \b\fs22 ANSI}{\plain \fs22 :\par
}{\plain \fs22 If your compiler supports the ANSI C standard, then set ANSI to TRUE.  Set ANSI to FALSE only if the 
programs will not compile with it set to TRUE.  This flag is used for strong prototyping of functions.  It is used by 
all of the supporting ".c" files and in the utilities as well.\par
}{\plain \fs22 \par
}{\plain \b\fs22 ANSI_FUNCT}{\plain \fs22 :\par
}{\plain \fs22 This flag should be set to TRUE to use ANSI style functions.  Setting it to FALSE should work on truly ANSI 
compliant compilers as well.  See Section 9.1 for an example.  This flag must be set to TRUE for THINK\~C 4.0 
on a Macintosh.\par
}{\plain \fs22 \par
}{\plain \b\fs22 FILE_SAVE}{\plain \fs22 :\par
}{\plain \fs22 If you would like to save the output of the algorithms to a file, then set FILE_SAVE to TRUE.  The output is still 
printed to the screen as you run the program.  Set it to FALSE if you do not plan to save the output to a file.  
Used only in the functions printf2(), NAA_do_first(), and NAA_do_last().\par
}{\plain \fs22 \par
}{\plain \b\fs22 TITLE_PROMPT}{\plain \fs22 :\par
}{\plain \fs22 If you would like to be prompted for an optional title at the start of each program, then set TITLE_PROMPT to 
TRUE.  This is useful when the output is to be handed in as homework, allowing the user's name or the problem 
number to be entered.  Hitting the [ENTER] key, instead of text for a title, causes no title to be printed to the 
output file.  Set it to FALSE if you do not want to be bothered with entering a title every time you run an 
algorithm.  Used only in the function NAA_do_first().\par
}{\plain \fs22 \par
}{\plain \b\fs22 EQ_EVAL}{\plain \fs22 :\par
}{\plain \fs22 Several of the algorithms require a single function to be evaluated.  Set EQ_EVAL to TRUE if you wish to enter 
the function during run-time instead of at compile time.  A couple of simple modifications were made to the 
algorithms to allow this option to work.  See Chapter 8 - "The Equation Evaluator Routines" for instructions on 
using this option.\par
}{\plain \fs22 \par
}{\plain \fs22 When this flag is set to TRUE, the 1000+ line file "eqeval.c" is included into "naautil.c" and compiled with the 
algorithm.  This flag is used in the function NAA_do_first() as well as in "041ee.c" and "ee.c" in the UTIL sub-directory.\par
}{\plain \fs22 \par
}{\plain \b\fs22 NAAUTIL_OBJ}{\plain \fs22 :\par
}{\plain \fs22 This option is useful for frequent users who wish to speed up the compilation process.  It should be set to TRUE 
only if "naautil.c" has been pre-compiled into object code.  See Section 6.6 - "Using Naautil.c as Object Code" for 
more details.\par
}{\plain \fs22 \par
}{\plain \b\fs22 OLD_UNIX_OS}{\plain \fs22 :\par
}{\plain \fs22 This flag is only necessary for older UNIX computers which use <varargs.h> instead of <stdarg.h> as the header 
file for variable length argument lists.  Variable length arguments are used only in printf2() and in "eqeval.c" 's 
eval_eq() routine.\par
}{\plain \fs22 \par
}{\plain \b\fs22 NO_LONG_DOUBLES}{\plain \fs22 :\par
}{\plain \fs22 Set this flag to TRUE if you are not using the "long double" type routines for higher precision, or if your compiler 
does not support the "long double" type.  The "long double" type is used in several routines in "naautil2.c", but is 
not used in any of the algorithms.  It is provided for the user to obtain more accurate numeric results wherever 
float of double types are being used.  This flag should be set to TRUE for some VAX C compilers.  Setting this 
flag to FALSE will compile six routines which take about 1K bytes of object code.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.5.2\tab Flag Default Settings} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \fi-3456\li3456\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab }{\plain \*\cs6\ul\f2 FLAG\tab \tab SETTING}{\plain \*\cs6\f2 \par
}\pard \fi-3456\li3456\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab ANSI\tab \tab TRUE\par
}\pard \fi-4608\li4608\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab ANSI_FUNCT\tab FALSE}{\plain \fs22 \tab (Is set to TRUE on Macintosh disks)\tab \par
}\pard \fi-3456\li3456\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab TITLE_PROMPT\tab TRUE\par
}\pard \fi-3456\li3456\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab FILE_SAVE\tab TRUE\par
}\pard \fi-5760\li5760\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab EQ_EVAL\tab \tab FALSE}{\plain \fs22 \tab (Set to TRUE when using "041ee.c")\par
}\pard \fi-3456\li3456\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab NAAUTIL_OBJ\tab FALSE\par
}\pard \fi-3456\li3456\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab OLD_UNIX_OS\tab FALSE\par
}\pard \fi-4608\li4608\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab NO_LONG_DOUBLES\tab TRUE\par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \par
}\pard \fi-4608\li4608\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab EQEVAL_OBJ\tab FALSE}{\plain \fs22 \tab (In "eqeval.c" only)\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.5.3\tab Description of the Routines} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 The "naautil.c" file contains the following procedures and functions:\par
}{\plain \fs22 \par
}{\plain \fs22 \tab Return\tab \tab Procedure\par
}\pard \fi-4608\li4608\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \ul\fs22 \tab Value\tab \tab Name\tab \tab \tab Description}{\plain \fs22 \par
}\pard \fi-6912\li5760\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 void\tab naaerror\tab \tab }{\plain \fs22 \_  Exits program with an error message\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-8064\li6912\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 double**\tab dmatrix\tab \tab \tab }{\plain \fs22 \_  Allocates a 2\_D array of doubles\par
}\pard \fi-6912\li5760\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 float**\tab matrix\tab \tab \tab }{\plain \fs22 \_  Allocates a 2\_D array of floats\par
}\pard \fi-8064\li6912\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 double*\tab dvector\tab \tab \tab }{\plain \fs22 \_  Allocates a 1\_D array of doubles\par
}\pard \fi-6912\li5760\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 float*\tab vector\tab \tab \tab }{\plain \fs22 \_  Allocates a 1\_D array of floats\par
}\pard \fi-8064\li6912\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 int*\tab ivector\tab \tab \tab }{\plain \fs22 \_  Allocates a 1\_D array of integers\par
}\pard \fi-6912\li5760\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 void\tab free_dmatrix\tab \tab }{\plain \fs22 \_  Frees the allocated 2\_D array memory\par
}\pard \fi-6912\li5760\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 void\tab free_matrix\tab \tab }{\plain \fs22 \_  Frees the allocated 2\_D array memory\par
}\pard \fi-6912\li5760\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 void\tab free_dvector\tab \tab }{\plain \fs22 \_  Frees the allocated 1\_D array memory\par
}\pard \fi-6912\li5760\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 void\tab free_vector\tab \tab }{\plain \fs22 \_  Frees the allocated 1\_D array memory\par
}\pard \fi-6912\li5760\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 void\tab free_ivector\tab \tab }{\plain \fs22 \_  Frees the allocated 1\_D array memory\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-8064\li6912\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 int \tab printf2\tab \tab \tab }{\plain \fs22 \_  Like printf(), but writes to a file as well\par
}\pard \fi-6912\li5760\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 void\tab NAA_do_first\tab \tab }{\plain \fs22 \_  NAA initialization procedure\par
}\pard \fi-6912\li5760\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 void\tab NAA_do_last\tab \tab }{\plain \fs22 \_  NAA final procedure\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 Some of these functions can be found in the book "Numerical Recipes in C".  They have been tailored for 
"Numerical Analysis Algorithms in C."\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 }{\plain \*\cs6\b\f2 naaerror()}{\plain \*\cs6\f2 :}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 This Numerical Analysis Algorithms Error handler prints error messages then exits the program to the operating 
system.  It is used by most of the routines found in "naautil.c", "naautil2.c" and "naautil3.c" as well as in several of 
the algorithms.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 }{\plain \*\cs6\b\f2 dmatrix()}{\plain \*\cs6\f2 :}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 "Naautil.c" defines five routines for allocating 1-D and 2-D arrays.  These are:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 ivector()}{\plain \fs22 \tab \_  Allocates a 1\_D array of integers\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 vector()}{\plain \fs22 \tab \_  Allocates a 1\_D array of floats\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 dvector()}{\plain \fs22 \tab \_  Allocates a 1\_D array of doubles\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 matrix()}{\plain \fs22 \tab \_  Allocates a 2\_D array of floats\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 dmatrix()}{\plain \fs22 \tab \_  Allocates a 2\_D array of doubles\par
}{\plain \fs22 \par
}{\plain \fs22 These routines are often used instead of conventional arrays.  For example:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 double **A;}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 A = dmatrix(0,9,0,11);\tab /* Dynamic method */}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 replaces\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 double A[10][12];\tab \tab /* Array method */}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 These simple routines are used for three reasons: speed, flexibility, and efficiency.\par
}{\plain \fs22 \par
}{\plain \fs22 Speed:\par
}{\plain \fs22 For the 2-D array above, referencing two pointers (2 adds) to obtain a value is usually faster than using an add 
and a multiply (1 add + 1 multiply) inherent when indexing arrays.  The array "A" is used identically in both 
situations.  To obtain this speed, a few more bytes of memory are used to store a row of pointers.\par
}{\plain \fs22 \par
}{\plain \fs22 Flexibility:\par
}{\plain \fs22 With the array method, the number of elements for each dimension are specified.  The above example uses 10 
rows and 12 columns.  These must be referenced from 0 to 9 and 0 to 11 respectively.  With the dmatrix() routine, 
the RANGES of the elements for each dimension are specified.  This makes it easier to work with arrays which 
are not referenced from 0 to n-1.  Even negative ranges may be specified, such as dvector(-2,3).\par
}{\plain \fs22 \par
}{\plain \fs22 For example, assume we need to sum five elements from 5 to 10.  The dvector() routine could be used to allocate 
storage space as follows:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 double *B;}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 B = dvector(5,10);}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 The sum of i from 5 to 10 could be easily implemented with:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 for (i=5;i<=10;i++)}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2   sum = sum + B[i];}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Efficiency:\par
}{\plain \fs22 As seen by the above implementation, B stores only 6 elements.  If we used "double B[6];" (the array method) we 
would be required to adjust the index, i, or to just declare B with 11 elements "double B[11];" for readability.  This 
would waste 5 elements!  The matrix and vector routines never waste variables since you only declare what you 
will use.\par
}{\plain \fs22 \par
}{\plain \fs22 The matrix and vector routines call calloc() to dynamically allocate memory.  This means a program which 
operates on an array of n x n elements needs to allocate only n x n elements.  With the array method, the largest 
anticipated array must be declared which is usually wasteful (consider A[100][100] for a simple 4 x 4 matrix 
operation!).\par
}{\plain \fs22 \par
}{\plain \fs22 "Naautil2.c" contain more matrix and vector routines for other variable types.  It also defines cube routines (like 
dcube()) for 3-D matrices.  These are fast but utilize an extra array of pointers as a trade off.  "Naautil3.c" 
contain vector, matrix and cube routines for complex data types.\par
}{\plain \fs22 \par
}{\plain \fs22 If your older C compiler does not have calloc() implemented, use "calloc.c" inside the UTIL sub-directory.  
Malloc() could also be used only if every vector, matrix and cube element is initialized to zero before using them in 
each algorithm.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 }{\plain \*\cs6\b\f2 free_dmatrix()}{\plain \*\cs6\f2 :}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Every vector, matrix, and cube routine has a free_ routine to match it.  The free_ routines, like free_dmatrix(), 
de-allocate the memory allocated by the vector, matrix, and cube routines.  These are particularly useful if the 
algorithms are to be converted into stand-alone functions.  Some older compilers require that the free_ routines be 
called in reverse order from the vector, matrix, and cube routines which allocated the memory blocks.  This 
reverse ordering style has been used with all of the algorithms.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 }{\plain \*\cs6\b\f2 printf2()}{\plain \*\cs6\f2 :}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 This simple routine works exactly like printf(), but it sends its output to a file as well.  The output file is the one 
defined at the top of each algorithm (char *outfile), which gets assigned to the file pointer "file_id."  It is used 
frequently in the algorithms to make the source code shorter and easier to read.  It uses variable length arguments 
which are often non-portable to non-ANSI compliant compilers.\par
}{\plain \fs22 \par
}{\plain \fs22 Two separate versions of this routine are provided.  The first uses <varargs.h> as the header file and is included 
for older UNIX C compilers.  The second uses <stdarg.h> as the header file and is ANSI compliant.  Only one of 
these routines can be used at a time.  The OLD_UNIX_OS flag determines which routine is selected, assuming 
the FILE_SAVE flag is set to TRUE.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 }{\plain \*\cs6\b\f2 NAA_do_first()}{\plain \*\cs6\f2 :}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 This routine is used in every algorithm as the first executable statement.  It performs four main functions and is 
dependant upon several flag settings:\par
}{\plain \fs22 \par
}\pard \fi-1728\li1152\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 1.\tab \tab Opens the output file for writing (if FILE_SAVE == TRUE)\par
}\pard \fi-1728\li1152\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 2.\tab \tab Prints the "Numerical Analysis Algorithms in C" banner\par
}\pard \fi-1728\li1152\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 3.\tab \tab Prompts for an optional title (if TITLE_PROMPT == TRUE)\par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 4.\tab Prompts for the use of the Equation Evaluator routines and gets the equation (if }{\plain \fs22 EQ_EVAL\~==\~TRUE)\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 }{\plain \*\cs6\b\f2 NAA_do_last()}{\plain \*\cs6\f2 :}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 This routine is used in every algorithm as the last executable statement.  It simply closes the output file opened by 
NAA_do_first() and informs the user that a file has been created.  This routine is used only when the 
FILE_SAVE flag is set to TRUE.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {6.6\tab Using Naautil.c as Object Code} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Each of the algorithms use the file "naautil.c."  Both the "naautil.c" and "eqeval.c" files can be easily compiled into 
object code once and then used thereafter ("naautil.c" includes "eqeval.c" if the EQ_EVAL flag is set to TRUE).  
This can save hours of recompilation time, especially when using many algorithms over a period of time, like for a 
numerical methods course.  The below sub-sections describe this procedure for different computer systems.  The 
files described in Section 7.3 - "Time-Saving Batch, Script and Command Files" contain commented-out code to 
do this as well.\par
}{\plain \fs22 \par
}{\plain \fs22 Note that if any flags are changed in "naautil.c", then it must be recompiled into object code again before the 
changes can take effect.  This includes changing the TITLE_PROMPT, FILE_SAVE, and EQ_EVAL flags.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.6.1\tab MS-DOS} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Object code files in MS-DOS have a ".OBJ" extension.  To create object code, do the following:\par
}{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 1.\tab Set the NAAUTIL_OBJ flag to FALSE in "naautil.c"\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 2.\tab Compile "naautil.c" into object code by typing the following command at the DOS prompt:  (assumes 
Microsoft C 5.0)\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab C:\\NAA42> CL /c NAAUTIL.C}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 3.\tab Set the NAAUTIL_OBJ flag back to TRUE in "naautil.c"\par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 4.\tab From now on, compile the algorithms into object code, then link "naautil.obj" to them.  For example, using 
"041.c", type:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab C:\\NAA42> CL /c 041.C\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab C:\\NAA42> CL 041 NAAUTIL}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 The first command creates "041.obj" while the second command links it to the "naautil.obj" object file to 
form the executable "041.exe."\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.6.2\tab UNIX} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Object code files for UNIX have a ".o" extension.  To create object code, do the following:\par
}{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 1.\tab Set the NAAUTIL_OBJ flag to FALSE in "naautil.c"\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 2.\tab Compile "naautil.c" into object code by typing the following at the shell prompt:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab % cc \_c naautil.c }{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 3.\tab Set the NAAUTIL_OBJ flag back to TRUE in "naautil.c"\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 4.\tab From now on, compile the algorithms along with "naautil.o." For example, using "041.c", type:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab % cc 041.c \_o 041 naautil.o \_lm}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.6.3\tab Macintosh} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Object code files for THINK\~C on a Macintosh are indicated in the project window by a non-zero size after the 
source file's name.  To create the object code, do the following:\par
}{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 1.\tab Set the NAAUTIL_OBJ flag to FALSE in "naautil.c"\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 2.\tab Compile "naautil.c" into object code.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 3.\tab Set the NAAUTIL_OBJ flag back to TRUE in "naautil.c"\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 4.\tab From now on, compile the algorithm into object code, then link the "naautil.c" object code to it.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 You may have trouble if the compiler asks to bring the "naautil.c" file up to date after step #3 above.  This may 
happen since setting the NAAUTIL_OBJ flag back to TRUE in "naautil.c" marks it as no longer current.  
Bringing the folder up to date, including "naautil.c", would remove the routines from the object code compiled in 
step #2.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.6.4\tab VAX/VMS} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Object code files for VAX/VMS have a ".OBJ" extension.  To create the object code, do the following:\par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 1.\tab Set the NAAUTIL_OBJ flag to FALSE in "naautil.c"\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 2.\tab Compile "naautil.c" into object code by typing the following at the VMS prompt:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab $ CC /G_FLOAT NAAUTIL.C }{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 3.\tab Set the NAAUTIL_OBJ flag back to TRUE in "naautil.c"\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 4.\tab From now on, compile the algorithm into object code, then link "naautil.obj" to it.  For example, using 
"041.c", type:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab $ CC /G_FLOAT 041.C\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab $ LINK 041, NAAUTIL, LNK$LIBRARY/LIB, LNK$LIBRARY_1/LIB}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 The first command creates "041.obj" while the second command links it to the "naautil.obj" object file to 
form the executable "041.exe."\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {6.7\tab Supporting C Source Code Usage List} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 The list below outlines the support files used by each chapter:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2                                 COMPLEX.C             ROUND.C\par
}{\plain \*\cs6\f2                                    and                  and\par
}{\plain \*\cs6\f2 Chapter  NAAUTIL.C  NAAUTIL2.C  NAAUTIL3.C  GAUSSJ.C  TRUNC.C 
EQEVAL.C\par
}{\plain \*\cs6\f2 ----------------------------------------------------------------------    1         X                                                   
 X\par
}{\plain \*\cs6\f2   2         X                       X                            X\par
}{\plain \*\cs6\f2   3         X                                   \tab  X       X\par
}{\plain \*\cs6\f2   4         X                                            X       X\par
}{\plain \*\cs6\f2   5         X                                                    X\par
}{\plain \*\cs6\f2   6         X                                  X         X\par
}{\plain \*\cs6\f2   7         X                                            \par
}{\plain \*\cs6\f2   8         X           X           X          X                 X\par
}{\plain \*\cs6\f2   9         X                                  X         \par
}{\plain \*\cs6\f2   10        X                                  X\par
}{\plain \*\cs6\f2   11        X                                  X\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2   12        X           X                                        X}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 File usage by name:\par
}{\plain \fs22 \par
}\pard \fi-2880\li2880\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab NAAUTIL.C\tab \tab - All .C files\par
}\pard \fi-2304\li2304\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab NAAUTIL2.C\tab - 081.C and 125.C    \par
}\pard \fi-2304\li2304\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab NAAUTIL3.C\tab - 027.C, 028A.C, and 081.C\par
}\pard \fi-2880\li2880\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab COMPLEX.C\tab \tab - Used in NAAUTIL3.C only\par
}\pard \fi-2304\li2304\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab GAUSSJ.C\tab \tab - 060B.C, 080B.C, 093.C, 101.C, 101A.C, 102.C, 116.C, 125.C and 129A.C\par
}\pard \fi-2304\li2304\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab ROUND.C\tab \tab - 031B.C, 040D2.C, 061B.C, 061C2.C, 061D2.C, 062B.C, 063B.C, 074.C, and 095D.C\par
}\pard \fi-2304\li2304\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab TRUNC.C\tab \tab - Not used.  May replace ROUND.C in the homework exercises for chopping 
arithmetic.\par
}\pard \fi-2880\li2880\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab EQEVAL.C\tab \tab - See Section 8.8 for a list.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {6.8\tab "Numerical Analysis" Text Errors and Corrections} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 This section lists a few errors encountered in the texts as the algorithms were being programmed into C.  Many of 
the algorithms will not work correctly without these corrections.  The errors are listed separately for the third and 
fourth editions of the text.  Perhaps a more complete list of corrections may be obtained from the publisher, PWS-Kent Publishing Company, 20 Park Plaza, Boston, Massachusetts  02116.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.8.1\tab 3rd Edition Errors} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 TEXT ERRORS AND CORRECTIONS\par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 for\par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 "Numerical Analysis", third edition,\par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Richard L. Burden & J. Douglas Faires, 1984\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 Page#\tab Location\tab Fix\par
}{\plain \*\cs6\f2 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}\pard \fi-3456\li3456\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 345\tab Algorithm 6.5\tab In Step 7, only swap a few elements in 
matrix L.  Use: For k = 1 to i\_1, swap 
L(p,k) with L(i,k).  This does not apply to 
matrix A.\par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \par
}\pard \fi-3456\li3456\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 472\tab Algorithm 8.9\tab Comments say: OUTPUT A(n\_1).  (Could 
over\_write A.)  It should say: ...            
(Do not over\_write A.)  Over\_writing A will 
give different answers.  Use A1 for A(k) and 
A2 for A(k+1).\par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \par
}\pard \li3456\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 At Step #10, 5th line, Don't indent "set 
a(l,l) = a(l,l) \_ 2*v(l)*z(l);"\par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 514\tab Algorithm 9.3\tab From \_\_> Step 5:  g3 = G(x \_ {\f5 \'22}3*z).\par
}{\plain \*\cs6\f2 \tab \tab \tab To \_\_\_\_> Step 5:  g3 = G(x + {\f5 \'22}3*z).\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 \tab \tab \tab From \_\_> Step 13:  Set x = x + {\f5 \'22}*z.\par
}{\plain \*\cs6\f2 \tab \tab \tab To \_\_\_\_> Step 13:  Set x = x \_ {\f5 \'22}*z.\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 658\tab Answers p. 484\tab The answer to 1 e) should be:\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 \tab \tab \tab [ 4      0         0         0    ]\par
}{\plain \*\cs6\f2 \tab \tab \tab [ 0      4     1.414213      0    ]\par
}{\plain \*\cs6\f2 \tab \tab \tab [ 0  1.414213      4     1.414213 ]\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab \tab \tab [ 0      0     1.414213      4    ]}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.8.2\tab 4th Edition Errors} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 TEXT ERRORS AND CORRECTIONS\par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 for\par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 "Numerical Analysis", fourth edition,\par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Richard L. Burden & J. Douglas Faires, 1988\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 Page#\tab Location\tab Fix\par
}{\plain \*\cs6\f2 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\par
}{\plain \*\cs6\f2 79\tab Algorithm 2.7\tab From \_\_> Step 1:  i = 2.\par
}{\plain \*\cs6\f2 \tab \tab \tab To \_\_\_\_> Step 1:  i = 3.\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 \tab \tab \tab From \_\_> Step 4:  E = b + d;\par
}{\plain \*\cs6\f2 \tab \tab \tab \tab           E = b \_ d;\par
}{\plain \*\cs6\f2 \tab \tab \tab To \_\_\_\_> Step 4:  E = b + D;\par
}{\plain \*\cs6\f2 \tab \tab \tab \tab           E = b \_ D;\par
}{\plain \*\cs6\f2 \tab \tab \tab (Third edition used d where D is now.)\par
}{\plain \*\cs6\f2 \par
}\pard \fi-3456\li3456\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 273\tab Algorithm 5.5\tab Steps 17, 18 and 19 are indented one level 
too far.  This tends to mislead programming 
efforts.\par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 372\tab Middle\tab \tab From \_\_> Step 10  For ... {\f5 \'45} l(i,j) * x(j)\par
}{\plain \*\cs6\f2 \tab \tab \tab To \_\_\_\_> Step 10  For ... {\f5 \'45} l(j,i) * x(j)\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 \tab Bottom\tab \tab From \_\_> Step 11 For ... {\f5 \'45} l(i,j) * y(j)\par
}{\plain \*\cs6\f2 \tab \tab \tab To \_\_\_\_> Step 11 For ... {\f5 \'45} l(j,i) * x(j)\par
}{\plain \*\cs6\f2 \par
}\pard \fi-3456\li3456\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 370\tab Algorithm 6.5\tab Add a Step 0 to initialize matrix L as an 
identity matrix.  IE \_ 0's every where 
except for 1's on the diagonal elements.\par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 \tab \tab \tab From \_\_> Step 2  ... set v(j) = a(i,j) * 
d(j)\par
}{\plain \*\cs6\f2 \tab \tab \tab To \_\_\_\_> Step 2  ... set v(j) = l(i,j) * 
d(j)\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 \tab \tab \tab From \_\_> Step 3  ... {\f5 \'45} a(i,j) * v(j)\par
}{\plain \*\cs6\f2 \tab \tab \tab To \_\_\_\_> Step 3  ... {\f5 \'45} l(i,j) * v(j)\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 \tab \tab \tab From \_\_> Step 4  ... {\f5 \'45} a(j,k) * v(j) ...\par
}{\plain \*\cs6\f2 \tab \tab \tab To \_\_\_\_> Step 4  ... {\f5 \'45} l(j,k) * v(j) ...\par
}{\plain \*\cs6\f2 \par
}\pard \fi-3456\li3456\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 478\tab Algorithm 8.1\tab Step 1  ... zeta = e({\f5 \'42}*i/m) is a definition 
(used in Step 3), not a step to implement as 
code.\par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 \tab \tab \tab At Step 8, K1 is never used, just defined.\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 479\tab Bottom\tab \tab From \_\_> + 0.02870726 cos 8z \_ ...\par
}\pard \fi-3456\li3456\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab \tab \tab To \_\_\_\_> + 0.05741474 cos 8z \_ ...   (double 
it)\par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 494\tab Algorithm 9.1\tab Swap Step 6 with Step 7.\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 501\tab Algorithm 9.3\tab Swap Step 7 with Step 8.\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 514\tab Algorithm 9.5\tab Add a modification to Step 7:\par
}{\plain \*\cs6\f2 \tab Modifications\tab From \_\_> Set PROD = SUM V(i) * U(i).\par
}{\plain \*\cs6\f2 \tab \tab \tab To \_\_\_\_> Set PROD = SUM V(i) * (U(i) + 
Y(i)).\par
}\pard \fi-3456\li3456\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab \tab \tab See Algorithm 9.5C for the correct 
implementation.\par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 547\tab Algorithm 10.2\tab Add to the end of Step 3:  k = k + 1.\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 548\tab Algorithm 10.2\tab From \_\_> Step 8 ... (Note: ... (S_k + A...) 
)\par
}{\plain \*\cs6\f2 \tab \tab \tab To \_\_\_\_> Step 8 ... (Note: ... (S_k \_ A...) 
)\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 554\tab Algorithm 10.3\tab From \_\_> Step 1  Set k = 0.\par
}{\plain \*\cs6\f2 \tab \tab \tab To \_\_\_\_> Step 1  Set k = 1.\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 555\tab Algorithm 10.3\tab Indent Step 7 and Step 8.\par
}{\plain \*\cs6\f2 \par
}\pard \fi-3456\li3456\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab \tab \tab Step 12 is different from the third edition 
of text.\par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \par
}\pard \fi-3456\li3456\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 653\tab Algorithm 12.5\tab From \_\_> Step 12 ... a(l)(l) = alpha(l)(l) + 
z...\par
}\pard \fi-3456\li3456\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab \tab \tab To \_\_\_\_> Step 12 ... alpha(l)(l) = 
alpha(l)(l) + z...\par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \par
}\pard \fi-3456\li3456\sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab \tab \tab Steps 11 and 18 have been indented 
incorrectly.\par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab \tab \tab From \_\_>  If ...\par
}{\plain \*\cs6\f2 \tab \tab \tab \tab       If ...\par
}{\plain \*\cs6\f2 \tab \tab \tab \tab           else ...\par
}{\plain \*\cs6\f2 \tab \tab \tab \tab       else ...\par
}{\plain \*\cs6\f2 \tab \tab \tab \tab           if ...\par
}{\plain \*\cs6\f2 \tab \tab \tab To \_\_\_\_>  If ...\par
}{\plain \*\cs6\f2 \tab \tab \tab \tab       If ...\par
}{\plain \*\cs6\f2 \tab \tab \tab \tab       else ...\par
}{\plain \*\cs6\f2 \tab \tab \tab           else ...\par
}{\plain \*\cs6\f2 \tab \tab \tab \tab       if ...\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 709\tab Answers p. 514\tab The answer to 3 c) should be:\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 \tab \tab [      5    \_4.949747468  \_1.432078021  1.564976850 
]\par
}{\plain \*\cs6\f2 \tab \tab [ 1.414213562     \_2       2.485551468  1.822644754 
]\par
}{\plain \*\cs6\f2 \tab \tab [      0     5.431390246  \_1.423728814  2.648654214 
]\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab \tab [      0           0      \_1.593986473  5.423728814 
]}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {6.9\tab Watch for These Run-Time Errors} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 On occasion, run-time errors may occur.  Run-time errors are errors which occur as a program is being executed.  
Most run-time errors are legitimate and can be easily corrected.  These next few sub-sections outline the most 
common errors and how to correct them.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.9.1\tab Stack Space} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Several of the programs require more stack space than the others.  The following programs require a stack larger 
than 2K bytes:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 028A.c\tab }{\plain \fs22 - Complex Polynomial Solver (CPOLY)\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 056.c\tab }{\plain \fs22 - Extrapolation\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 081.c\tab }{\plain \fs22 - Fast Fourier Transformation\par
}{\plain \fs22 \par
}{\plain \fs22 In Microsoft C 5.0 with MS-DOS, this problem is solved by specifying a larger stack size to the linker.  For 
example:\par
}{\plain \fs22 \par
}\pard \fi-6912\li6912\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 C:\\NAA42> CL 028A.C /link /ST:4096\tab }{\plain \fs22 - For a 4K byte stack in decimal\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 or\par
}\pard \fi-6912\li6912\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 C:\\NAA42> CL 028A.C /F 1000\tab \tab }{\plain \fs22 - For a 4K byte stack in 
hexidecimal\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.9.2\tab Divis}{\plain \b\f1\fs26 ion By Zero} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Division by zero is a common error for fixed-point algorithms and for equations using division.  Algorithms 2.2 and 
10.1A are particularly susceptible to fixed-point errors (x = g(x)).  Fixed-point errors can usually be corrected by 
solving for a different x = g(x) in the equation.\par
}{\plain \fs22 \par
}{\plain \fs22 Division by zero can occur in algorithms like Algorithm 4.1 - Composite Simpson's Rule.  Trying to integrate the 
integral below would cause this error to occur due to the lower bound being zero.\par
}\pard \sl0\keep\keepn\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 }{\plain \*\cs6\f2 \tab {\f3 \'21}1}{\plain \fs22 \par
}\pard \sl0\keep\keepn\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab |  1/x dx}{\plain \fs22 \par
}\pard \sl0\keep\keepn\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab {\f3 \'22}0}{\plain \fs22 \par
}\pard \sl0\keep\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 This problem can sometimes be corrected by breaking the integral up into parts, making a "u" substitution, or by 
making zero a small value (try DBL_EPSILON as defined in <float.h>) and accept the reduced accuracy errors.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.9.3\tab Null Pointer Assignments} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 If arrays created by the "naautil*.c" vector, matrix, and cube routines are referenced outside their legal ranges, 
the "Null Pointer Assignment" error may occur.  Incorrect use of the free_ routines, such as free_dmatrix(), will 
also cause this error.\par
}{\plain \fs22 \par
}{\plain \fs22 For some strange reason, there is an error like this in Algorithm 12.5 with Microsoft C 5.0.  To correct this 
particular problem, the free_dmatrix() routine was simply commented out without introducing errors to the 
algorithm.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.9.4\tab No Disk Space} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 The "No Disk Space" error occurs when a disk is full or when the disk is write-protected.  This can be corrected 
by either removing unnecessary files from the disk (especially executables) or by removing the write-protect 
sticker or tab from the disk.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.9.5\tab Floating-Point Accuracy} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Computers inherently round all floating-point numbers.  They are usually only as accurate as the largest word size 
on the computer or by the size of the internal registers of the math processor chip.  See the system header file 
<float.h> for your compiler's accuracy limits.\par
}{\plain \fs22 \par
}{\plain \fs22 Listed are some typical values defined in <float.h>:\par
}{\plain \fs22 \par
}\pard \fi-3456\li3456\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 FLT_DIG\tab 6\tab }{\plain \fs22 - decimal digits of precision for floats\par
}\pard \fi-3456\li3456\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 DBL_DIG\tab 10\tab }{\plain \fs22 - decimal digits of precision for doubles\par
}\pard \fi-3456\li3456\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 FLT_MAX\tab 1E+37\tab }{\plain \fs22 - maximum floating-point number for floats\par
}\pard \fi-3456\li3456\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 FLT_MIN\tab 1E-37\tab }{\plain \fs22 - minimum floating-point number for floats\par
}\pard \fi-3456\li3456\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 DBL_MAX\tab 1E+308\tab }{\plain \fs22 - maximum floating-point number for doubles\par
}\pard \fi-3456\li3456\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 DBL_MIN\tab 1E-308\tab }{\plain \fs22 - minimum floating-point number for doubles\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 DBL_DIG is used in routines adapted to use "round.c" or "trunc.c", such as Algorithm 6.1C2.  It specifies a range 
for the number of significant (SIG) digits you can enter.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {6.9.6\tab Program Stuck in an Infinite Loop} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 The scanf() and getchar() functions are used to get all of the inputs for the "Numerical Analysis Algorithms in C" 
algorithms.  They may get stuck in an infinite loop if a letter is entered where a number is expected, or vise versa.\par
}{\plain \fs22 To correct this problem, exit the program (usually by hitting "[CONTROL]\~C") then execute the program again, 
this time entering the correct responses.  The code needed to check for errors of this nature would have 
introduced unnecessary overhead and would have made the programs less readable.\par
}\pard\page 
\sect \sectd \ds1\sbknone\pgnrestart\pgndec\pgnx0\pgny720\footery1380\endnhere\facingp 
{\footerl \pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs2\b\f1\fs18 7-\chpgn   Useful Utilities\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs2\b\f1\fs18 Version 4.2\tab Useful Utilities  7-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs3\b\f1\fs40 {\tc {}{\plain \*\cs3\b\f1\fs40 7.\tab Useful Utilities}}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 The utilities listed below are found in the UTIL sub-directory on the distribution diskettes.  None of these utilities 
are absolutely necessary, but they may make life easier on your part if you use them.  "Convert.c" will make the 
algorithms have respectable looking output if uploaded to non-MS-DOS computer systems.  "List.com" is a handy 
tool for quickly viewing the output files created by these programs.  Several files are also included to make 
compiling and running these algorithms a little easier.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \fi-631\li631\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {7.1\tab Convert.c - Converting Files from Extended ASCII to Standard 
ASCII} \tcl2}}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 Past versions of "Numerical Analysis Algorithms in C" came in an extended ASCII version (v4.1) and a standard 
ASCII version (v4.11).  "Convert.c" was written to eliminate the need for having two different versions.  
Macintosh disks ship with standard ASCII only.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {7.1.1\tab Why Convert.c is Needed} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Many programs use the extended ASCII character set available on MS\_DOS computers.  These extra 128 
characters may translate into garbage when uploading files onto UNIX or VAX computers.  Standard ASCII uses 
7\_bits per character while extended ASCII uses 8\_bits per character.  When extended ASCII characters are 
uploaded to standard-ASCII\_only platforms, the 8th bit is masked off (set to zero) converting them into 7\_bit 
ASCII characters.  To avoid the ill effects of this masking, this program has been provided.  It converts any 
MS\_DOS text file into standard-ASCII\_only files, making the appropriate character substitutions.\par
}{\plain \fs22 \par
}{\plain \fs22 Failure to use "convert.c" may produce results like those shown below after the files are uploaded to a non-MS-DOS platform:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2     normal         w/ convert.c   w/out convert.c      w/out 
convert.c\par
}{\plain \*\cs6\f2                                     7\_bit ASCII          8\_bit 
ASCII\par
}{\plain \*\cs6\f2 \par
}\pard \sl0\keep\keepn\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2      {\f3 \'21} {\f5 \'42}              [ PI             t c              \\364 \\343\par
}{\plain \*\cs6\f2      {\f4 \'2a} f(x)           | f(x)           3 f(x)           \\263 f(x)\par
}{\plain \*\cs6\f2      {\f3 \'22} {\f5 \'22}              ] alpha          u `              \\365 \\340\par
}\pard \sl0\keep\keepn\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2                                                         (in octal)}{\plain \fs22 \par
}\pard \sl0\keep\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 See the Examples Book for the C source code for "convert.c."  This file contains a table called ASCIIlist[] which 
contains the extended ASCII characters and their suggested standard ASCII substitutions.  This table can be 
easily modified by the user, but doing so requires "convert.c" to be recompiled.  "Convert.c" has been compiled 
into "convert.exe" for MS-DOS computers and is shipped with the distribution diskettes.\par
}{\plain \fs22 \par
}{\plain \fs22 The advantages of running the files through convert is that they can be ported to any machine, especially UNIX 
systems, with terminals only capable of displaying standard ASCII.  The disadvantages are that you no longer 
have the proper symbols like those used in chapter 4 of the text for integration, or {\f6 \'24}, {\f6 \'23}, x\'b2, and numerous Greek 
symbols often used in mathematics.\par
}{\plain \fs22 \par
}{\plain \fs22 Examples of the most commonly used extended ASCII characters and their closest substitutions are shown below:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab ASCII\tab \tab \tab \tab ASCII\par
}{\plain \*\cs6\ul\f2 \tab Number\tab Char\tab Substitute\tab Number\tab Char\tab Substitute}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 \tab 129\tab \'fc\tab u\tab \tab 238\tab {\f5 \'2c}\tab E or epsilon\par
}{\plain \*\cs6\f2 \tab 179\tab {\f4 \'2a}\tab |\tab \tab 240\tab {\f6 \'2f}\tab =\par
}{\plain \*\cs6\f2 \tab 224\tab {\f5 \'22}\tab alpha\tab \tab 241\tab \'b1\tab +/-\par
}{\plain \*\cs6\f2 \tab 225\tab \'df\tab beta\tab \tab 242\tab {\f6 \'24}\tab >=\par
}{\plain \*\cs6\f2 \tab 227\tab {\f5 \'42}\tab PI\tab \tab 243\tab {\f6 \'23}\tab <=\par
}{\plain \*\cs6\f2 \tab 228\tab {\f5 \'45}\tab Summation of\tab 244\tab {\f3 \'21}\tab [\par
}{\plain \*\cs6\f2 \tab 230\tab \'b5\tab mu\tab \tab 245\tab {\f3 \'22}\tab ]\par
}{\plain \*\cs6\f2 \tab 232\tab {\f5 \'4d}\tab phi\tab \tab 247\tab {\f6 \'2e}\tab =\par
}{\plain \*\cs6\f2 \tab 235\tab {\f5 \'2a}\tab d or delta\tab 253\tab \'b2\tab ^2\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab 236\tab {\f6 \'34}\tab oo or infinity}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {7.1.2\tab How to Use Convert.c} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Before using the convert program, }{\plain \b\fs22 MAKE A SET OF BACKUP DISKETTES}{\plain \fs22  for "Numerical Analysis 
Algorithms in C"!  Convert over-writes the original files with the newly converted files.  Failure to make a set of 
backup diskettes will remove the option of ever going back to the extended ASCII version of the files.  In other 
words, convert is one-way.\par
}{\plain \fs22 \par
}{\plain \fs22 "Convert.c" will convert a single file or a list of files.  To convert a single file, type:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 C:\\> CONVERT FILE_NAME}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 where "file_name" is the name of the desired file, such as "041.c."  To convert a list of files, first create a }{\plain \fs22 list 
using a standard text editor ("file_name [ENTER]" format), then type:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 C:\\> CONVERT \_L FILE_NAME_LIST}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 where "file_name_list" is the name of the file containing a list of file names you desire to convert.\par
}{\plain \fs22 \par
}{\plain \fs22 For your convenience, two lists are provided: "LISTALL" and "LISTOUT."  "LISTALL" is a file name list which 
contains all of the algorithms, support files, and documentation (except "convert.c").  "LISTOUT" is a file name 
list containing all of the algorithm output file names in the OUT sub-directory.  Together these two file will convert 
all of the necessary "Numerical Analysis Algorithms in C" files into standard ASCII files.\par
}{\plain \fs22 \par
}{\plain \fs22 To create a standard ASCII set of files, do the following:\par
}{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 1.\tab Make a set of backup disks.  See your operating system manual for specifics.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 2.\tab Change to the directory containing the algorithms (assume C:\\NAA42 in this example).  For example:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab C:\\> CD \\NAA42}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 3.\tab Convert all of the files inside the main directory.  Do this by typing:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab C:\\NAA42> UTIL\\CONVERT -L UTIL\\LISTALL}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Wait a few minutes until the conversion is finished.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 4.\tab Now convert all of the files inside the OUT sub-directory.  This step is optional.  Do this by typing:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab C:\\NAA42\\> CD OUT\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab C:\\NAA42\\OUT> ..\\UTIL\\CONVERT -L ..\\UTIL\\LISTOUT}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \fi-1152\li1152\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 NOTE:\tab The above steps can be done on a non-MS-DOS computer if the files are transferred as binary files.  
See Section 2.1 - "Uploading to Mainframe Computers" and use the "SET BINARY" option of 
KERMIT.  "Convert.c" will naturally need to be recompiled on the new host computer.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {7.2\tab List.com - A Better TYPE Command} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 "List.com" is an MS-DOS program which acts as a better "TYPE" command.  It uses the arrow keys and other 
editing keys to view text files.  "List.com" does not allow you to edit files, just view them.  It is a public domain 
program.\par
}{\plain \fs22 \par
}{\plain \fs22 To use "list.com" to view the output of Algorithm 4.1, type:\par
}{\plain \fs22 \par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 }{\plain \*\cs6\f2 C:\\> LIST 041.OUT}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 To scroll the text left, right, up or down, use the arrow keys.  Typing 'X' exits "list.com."  Typing '?' brings up a 
help menu.  These commands and more are shown at the bottom of the "list.com" screen.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {7.3\tab Time-Saving Batch, Script and Command Files} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 The files below can be use to simplify how you compile and run these algorithms.  One is included for Microsoft 
C 5.0 on an IBM PC, one for UNIX, and one for VMS on a VAX.  The actual commented files are also listed 
below:\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {7.3.1\tab CC.BAT} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 The batch file "cc.bat" can be used in place of the Microsoft C 5.0 "CL" command under MS-DOS.  It contains 
the following:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 CL /Od /qc %1.c}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 IF ERRORLEVEL 1 GOTO END}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 %1}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 LIST %1.OUT}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 :END}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 To use it, type: "}{\plain \*\cs6\f2 C:\\> CC 041}{\plain \fs22 " where 041 is an algorithm file name.    Be sure to leave off the ".c" 
extension.  "Cc.bat" will do the compiling, running, and will list the output file.\par
}{\plain \fs22 \par
}{\plain \fs22 Commands are also listed to produce and use "naautil.c" as object code.  Read the comments in this batch file for 
further instructions or see Section 6.6 - "Using Naautil.c as Object Code".\par
}{\plain \fs22 \par
}{\plain \fs22 Below is a listing of the "cc.bat" batch file:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 :*********************************************************************\par
}{\plain \*\cs6\f2 :  Program:  CC.BAT  (MS\_DOS batch file)\par
}{\plain \*\cs6\f2 :\par
}{\plain \*\cs6\f2 :  Purpose:\par
}{\plain \*\cs6\f2 :    Cc.bat is an MS\_DOS batch file used for compiling, running and\par
}{\plain \*\cs6\f2 :    viewing a Microsoft C 5.0 program.  It can be easily altered 
to\par
}{\plain \*\cs6\f2 :    allow for linking to "NAAUTIL.OBJ" (with or without 
"EQEVAL.C"),\par
}{\plain \*\cs6\f2 :    speeding up the compile time.  Can also be altered to increase\par
}{\plain \*\cs6\f2 :    the stack size of a program.\par
}{\plain \*\cs6\f2 :\par
}{\plain \*\cs6\f2 :  Written By:  Harold A. Toomey\par
}{\plain \*\cs6\f2 :  Date:        21 Aug 1991\par
}{\plain \*\cs6\f2 :\par
}{\plain \*\cs6\f2 :  Example:  C:\\> CC 041   where "041.C" is the file name.\par
}{\plain \*\cs6\f2 :                          (Leave off the .C extension)\par
}{\plain \*\cs6\f2 :*********************************************************************\par
}{\plain \*\cs6\f2 :\par
}{\plain \*\cs6\f2 :  Do a compile and link (CL), disabling optimization (/Od) and\par
}{\plain \*\cs6\f2 :  invoke the QuickC compiler option (/qc) to shorten the compile\par
}{\plain \*\cs6\f2 :  time.\par
}{\plain \*\cs6\f2 :\par
}{\plain \*\cs6\f2 CL /Od /qc %1.c\par
}{\plain \*\cs6\f2 :\par
}{\plain \*\cs6\f2 :  Replace the main line above with the line below if a larger 
stack\par
}{\plain \*\cs6\f2 :  is needed.  This allows for a stack size of 4K bytes (/link\par
}{\plain \*\cs6\f2 :  /ST:4096).  A MUST when compiling algorithms 2.8A, 5.6 and 8.1.  \par
}{\plain \*\cs6\f2 :\par
}{\plain \*\cs6\f2 : CL /Od %1.c /link /ST:4096\par
}{\plain \*\cs6\f2 :\par
}{\plain \*\cs6\f2 :  Replace the main line above with the two lines below if\par
}{\plain \*\cs6\f2 :  "NAAUTIL.C" has been compiled and exists as object code\par
}{\plain \*\cs6\f2 :  ("NAAUTIL.OBJ").  The first line creates %1.OBJ while the second\par
}{\plain \*\cs6\f2 :  line links %1.OBJ to "NAAUTIL.OBJ" to form %1.EXE.  (Most\par
}{\plain \*\cs6\f2 :  flexible)\par
}{\plain \*\cs6\f2 :\par
}{\plain \*\cs6\f2 : CL /Od /c %1.c\par
}{\plain \*\cs6\f2 : CL %1 NAAUTIL\par
}{\plain \*\cs6\f2 :\par
}{\plain \*\cs6\f2 :\par
}{\plain \*\cs6\f2 :  Create "NAAUTIL.OBJ" object code by running the below step once.\par
}{\plain \*\cs6\f2 :  Remember to re\_compile "NAAUTIL.C" every time one of its flags\par
}{\plain \*\cs6\f2 :  are changed.\par
}{\plain \*\cs6\f2 :\par
}{\plain \*\cs6\f2 : CL /c NAAUTIL.C\par
}{\plain \*\cs6\f2 :\par
}{\plain \*\cs6\f2 :\par
}{\plain \*\cs6\f2 :  If the program compiled correctly, then run it.  If not, exit\par
}{\plain \*\cs6\f2 :  this batch file.  Replace "%1" with "%1 < IN\\%1.IN" if using the\par
}{\plain \*\cs6\f2 :  input file for initial testing.\par
}{\plain \*\cs6\f2 IF ERRORLEVEL 1 GOTO END\par
}{\plain \*\cs6\f2 %1\par
}{\plain \*\cs6\f2 :\par
}{\plain \*\cs6\f2 :  View the program's output file using "LIST.COM".  You may\par
}{\plain \*\cs6\f2 :  substitute DOS's TYPE command for "LIST.COM."\par
}{\plain \*\cs6\f2 LIST %1.OUT\par
}{\plain \*\cs6\f2 :END\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 :*********************************************************************}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {7.3.2\tab CCC} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 The script file "ccc" can be used in place of the "cc" command under UNIX.  It contains the following:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 cc $1.c -o $1 -lm}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 $1}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 more %1.out}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 To use it, type: "}{\plain \*\cs6\f2 % ccc 041}{\plain \fs22 " where 041 is an algorithm file name.    Be sure to leave off the ".c" extension.  
"Ccc" will do the compiling, running, and will list the output file.  You may want to make "ccc" a UNIX (csh) 
script file.  To do this, type "}{\plain \*\cs6\f2 % chmod +x ccc}{\plain \fs22 " only once.  The alternative is to type "}{\plain \*\cs6\f2 % source ccc 
041}{\plain \fs22 " every time you use "ccc".\par
}{\plain \fs22 \par
}{\plain \fs22 Commands are also listed to produce and use "naautil.c" as object code.  Read the comments in this script file for 
further instructions or see Section 6.6 - "Using Naautil.c as Object Code".\par
}{\plain \fs22 \par
}{\plain \fs22 Below is a listing of the "ccc" script file:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 #*********************************************************************\par
}{\plain \*\cs6\f2 #  Program:  ccc  (UNIX script file)\par
}{\plain \*\cs6\f2 #\par
}{\plain \*\cs6\f2 #  Purpose:\par
}{\plain \*\cs6\f2 #    Ccc is a UNIX script file used for compiling, running, and\par
}{\plain \*\cs6\f2 #    viewing a mathematical C program.  It can be easily altered to\par
}{\plain \*\cs6\f2 *    allow for linking to "naautil.o" (with or without "eqeval.c"),\par
}{\plain \*\cs6\f2 #    speeding up the compile time.\par
}{\plain \*\cs6\f2 #\par
}{\plain \*\cs6\f2 #  Written By:  Harold A. Toomey\par
}{\plain \*\cs6\f2 #  Date:        21 Aug 1991\par
}{\plain \*\cs6\f2 #\par
}{\plain \*\cs6\f2 #  Example:  % ccc 041   where "041.c" is the file name.\par
}{\plain \*\cs6\f2 #                        (Leave off the .c extension)\par
}{\plain \*\cs6\f2 #*********************************************************************\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 echo Compiling $1.c\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 #  Compile the program and name the executable the same as the\par
}{\plain \*\cs6\f2 #  original file except with no extension.  Links to the math 
library\par
}{\plain \*\cs6\f2 #  (located in /usr/lib/libm.a).\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 cc $1.c \_o $1 \_lm\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 #  Replace the above "cc" line with the below "cc" line to link to\par
}{\plain \*\cs6\f2 #  the pre\_compiled "naautil.c" object code file.\par
}{\plain \*\cs6\f2 #\par
}{\plain \*\cs6\f2 # cc $1.c \_o $1 naautil.o \_lm\par
}{\plain \*\cs6\f2 #\par
}{\plain \*\cs6\f2 #\par
}{\plain \*\cs6\f2 #  Create "naautil.o" object code by running the below step once.\par
}{\plain \*\cs6\f2 #  Remember to re\_compile "naautil.c" every time one of its flags\par
}{\plain \*\cs6\f2 #  are changed.\par
}{\plain \*\cs6\f2 #\par
}{\plain \*\cs6\f2 # cc \_c naautil.c \par
}{\plain \*\cs6\f2 #\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 #  Run the program\par
}{\plain \*\cs6\f2 $1\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 #  View the program's output file\par
}{\plain \*\cs6\f2 more $1.out\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 #*********************************************************************}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {7.3.3\tab VAXCC.COM} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 The command file "vaxcc.com" can be used in place of the VAX "CC" and "LINK" commands under 
VAX/VMS.  It contains the following:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 $ DEFINE LNK$LIBRARY    SYS$LIBRARY:VAXCRTLG}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 $ DEFINE LNK$LIBRARY_1  SYS$LIBRARY:VAXCRTL}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 $ CC /G_FLOAT 'P1'.C}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 $ LINK 'P1', LNK$LIBRARY/LIB, LNK$LIBRARY_1/LIB}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 To use it, type: "}{\plain \*\cs6\f2 $ @VAXCC 041}{\plain \fs22 " where 041 is an algorithm file name.    Be sure to leave off the ".c" 
extension.  "Vaxcc.com" will do the compiling and linking as a single command.  The '@' character tells VMS that 
"vaxcc.com" is a command file.\par
}{\plain \fs22 \par
}{\plain \fs22 Commands are also listed to produce and use "naautil.c" as object code.  Read the comments in this command file 
for further instructions or see Section 6.6 - "Using Naautil.c as Object Code".\par
}{\plain \fs22 \par
}{\plain \fs22 Below is a listing of the "vaxcc.com" command file:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 $! 
*******************************************************************\par
}{\plain \*\cs6\f2 $!   Program:  VAXCC.COM  (VAX command file)\par
}{\plain \*\cs6\f2 $! \par
}{\plain \*\cs6\f2 $!   Purpose:\par
}{\plain \*\cs6\f2 $!     VAXCC.COM is a VAX command file used for compiling and 
linking\par
}{\plain \*\cs6\f2 $!     a mathematical C program.  It can be easily altered to allow\par
}{\plain \*\cs6\f2 $!     for linking to "NAAUTIL.OBJ" (with or without "EQEVAL.OBJ"),\par
}{\plain \*\cs6\f2 $!     speeding up the compile time.\par
}{\plain \*\cs6\f2 $! \par
}{\plain \*\cs6\f2 $!   Written By:  Harold A. Toomey\par
}{\plain \*\cs6\f2 $!   Date:        21 August 1991\par
}{\plain \*\cs6\f2 $! \par
}{\plain \*\cs6\f2 $!   Example:  $ @VAXCC 041   where "041.C" is the file name.\par
}{\plain \*\cs6\f2 $!                            (Leave off the .C extension)\par
}{\plain \*\cs6\f2 $! 
*******************************************************************\par
}{\plain \*\cs6\f2 $!\par
}{\plain \*\cs6\f2 $!  Define the link libraries to allow the use of the /G_FLOAT\par
}{\plain \*\cs6\f2 $!  qualifier but not the use of Curses.  These two defines may be\par
}{\plain \*\cs6\f2 $!  placed into your "LOGIN.COM" file to be performed once at login\par
}{\plain \*\cs6\f2 $!  time.\par
}{\plain \*\cs6\f2 $!\par
}{\plain \*\cs6\f2 $ DEFINE LNK$LIBRARY    SYS$LIBRARY:VAXCRTLG\par
}{\plain \*\cs6\f2 $ DEFINE LNK$LIBRARY_1  SYS$LIBRARY:VAXCRTL\par
}{\plain \*\cs6\f2 $!\par
}{\plain \*\cs6\f2 $!  Compile the program with the floating\_point qualifier to create\par
}{\plain \*\cs6\f2 $!  an .OBJ object file.  Link the object file to create the\par
}{\plain \*\cs6\f2 $!  executable.\par
}{\plain \*\cs6\f2 $!\par
}{\plain \*\cs6\f2 $ CC /G_FLOAT 'P1'.C\par
}{\plain \*\cs6\f2 $ LINK 'P1', LNK$LIBRARY/LIB, LNK$LIBRARY_1/LIB \par
}{\plain \*\cs6\f2 $!\par
}{\plain \*\cs6\f2 $! 
*******************************************************************\par
}{\plain \*\cs6\f2 $!  Replace the above "LINK" line with the below "LINK" line to 
link\par
}{\plain \*\cs6\f2 $!  to the pre\_compiled "NAAUTIL.C" object code file.\par
}{\plain \*\cs6\f2 $! \par
}{\plain \*\cs6\f2 $! LINK 'P1', NAAUTIL, LNK$LIBRARY/LIB, LNK$LIBRARY_1/LIB\par
}{\plain \*\cs6\f2 $! \par
}{\plain \*\cs6\f2 $! 
*******************************************************************\par
}{\plain \*\cs6\f2 $!  Create "NAAUTIL.OBJ" object code by running the below step 
once.\par
}{\plain \*\cs6\f2 $!  Rember to re\_compile "NAAUTIL.C" every time one of its flags\par
}{\plain \*\cs6\f2 $!  are changed.\par
}{\plain \*\cs6\f2 $! \par
}{\plain \*\cs6\f2 $! CC /G_FLOAT NAAUTIL.C \par
}{\plain \*\cs6\f2 $! \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 $! 
*******************************************************************}{\plain \fs22 \par
}\pard\page 
\sect \sectd \ds1\sbknone\pgnrestart\pgndec\pgnx0\pgny720\footery1380\endnhere\facingp 
{\footerl \pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs2\b\f1\fs18 8-\chpgn   The Equation Evaluator Routines\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs2\b\f1\fs18 Version 4.2\tab The Equation Evaluator Routines  8-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs3\b\f1\fs40 {\tc {}{\plain \*\cs3\b\f1\fs40 8.\tab The Equation Evaluator Routines}}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Over two-thirds of the algorithms in "Numerical Analysis Algorithms in C" need to be compiled only once.  They 
prompt for all the necessary inputs.  The other one-third of the algorithms contain }{\plain \ul\fs22 multiple}{\plain \fs22  modifiable functions, 
such as F(x).  The C language has no pre-defined procedures to allow functions to be entered at run-time.  To 
add these capabilities, a set of procedures have been written.  These routines are located in the file named 
"eqeval.c."\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {8.1\tab What the Routines Do} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Quite simply, the equation evaluator routines allow the user to enter mathematical equations at run-time rather 
than having to recompile an algorithm for each unique function.  All of the single function programs have the 
equation evaluator routines already implemented into them.  These routines are activated only if the EQ_EVAL 
flag is set to TRUE in "naautil.c."  Implementing the equation evaluator routines require only a few simple steps, 
as shown below.\par
}{\plain \fs22 \par
}{\plain \fs22 A convenient utility program is also provided called "ee.c."  This program can be used to familiarize yourself with 
writing equations in the C language.  It can also be used as a command-line calculator similar to the one the 
BASIC language provides.  Like C, it uses infix notation.  All math functions defined in the standard C library 
header <math.h> are valid.  Unary operators like "+3" and "-3" are included if the ANSI flag is set to TRUE in 
"eqeval.c."\par
}{\plain \fs22 \par
}{\plain \fs22 To evaluate a function like "f(x) = cos(x + 3.14) - 2", just type:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 C:\\NAA42> ee cos(x + 3.14) - 2}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Spaces are allowed inside the equations.  Equations can be entered in uppercase or lowercase characters.  The 
variables x, y and/or t can also be used inside the equations.  The "ee" program will prompt you for the values of 
needed variables.  It also prompts you to evaluate the entered equation again.\par
}{\plain \fs22 \par
}{\plain \fs22 Typing "ee" by itself will cause the equation evaluator to prompt for an equation to be entered.\par
}{\plain \fs22 \par
}{\plain \fs22 All internal computations are done using floating-point numbers.  Equations are limited to 130 characters as 
defined by MAX_LINE_SIZE in "eqeval.c."  This number may be increased to suit your needs.  The larger it is, 
the more memory the routines will require.  It was set to 130 since MS-DOS will not accept more than 128 
characters at the DOS prompt.  Many computers have similar limitations.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {8.2\tab How to Insert the Routines into a Program} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 To implement the equation evaluator routines into a Numerical Analysis program, three simple modifications are 
required.\par
}{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 1)\tab Make sure that the EQ_EVAL flag is set to TRUE in "naautil.c."\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab #define EQ_EVAL  TRUE}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 2)\tab Add something similar the following lines into the function to evaluate, usually f(x):\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab if (eqeval)\par
}{\plain \*\cs6\f2 \tab    return (eval_eq(x));\tab /* Use the Equation 
Evaluator */\par
}{\plain \*\cs6\f2 \tab else\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab    return (sin(x));\tab /* This is the default function */}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \fi-1152\li1728\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 NOTE:\tab Valid calls to eval_eq() include eval_eq(any_number), eval_eq(x), eval_eq(x,y), and 
eval_eq(x,y,t).  Eval_eq() is not valid unless at least one argument (parameter) is passed to it.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 3)\tab Just after main(), add something like the following lines to print the correct equation onto the screen and 
into the output file:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab if (eqeval)\par
}{\plain \*\cs6\f2 \tab    printf2("f(x) = %s", tmpstr);\par
}{\plain \*\cs6\f2 \tab else\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab    printf2("%s", eq_text_f);\tab /* This is the default text 
*/}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {8.3\tab An Example Using Simpson's Rule} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 See the file "041ee.c" for a descriptive example using Algorithm 4.1 - Simpson's Rule for Integration and the 
equation evaluator routines.  This file performs the same as "041.c", but is commented differently.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {8.4\tab Using Eqeval.c As Pre-Compiled Object Code} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 If you find yourself using the equation evaluator routines in "eqeval.c" rather frequently, you may want to compile 
them only once and then link the object code to the programs.  Doing this will save you time as you compile your 
modified algorithms.\par
}{\plain \fs22 \par
}{\plain \fs22 If "naautil.c" had the EQ_EVAL flag set to TRUE and is being used as object code, go no further with this 
section.  The below steps are unnecessary in this situation, since the "naautil.c" object code will already contain 
the "eqeval.c" object code.  Otherwise, follow the five steps below:\par
}{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 1)\tab Set the EQEVAL_OBJ flag to FALSE in "eqeval.c":\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab #define EQEVAL_OBJ FALSE}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 2)\tab Compile "eqeval.c" into object code.  Do one of the following:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-6912\li6912\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab MS-DOS:\tab }{\plain \*\cs6\f2 C:\\NAA42> CL /c EQEVAL.C\tab \tab }{\plain \fs22 - Creates "EQEVAL.OBJ"\par
}\pard \fi-6912\li6912\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab UNIX:\tab }{\plain \*\cs6\f2 % cc -c eqeval.c\tab \tab \tab }{\plain \fs22 - Creates "eqeval.o"\par
}\pard \fi-6912\li6912\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab VAX/VMS:\tab }{\plain \*\cs6\f2 $ CC /G_FLOAT EQEVAL.C\tab \tab }{\plain \fs22 - Creates "EQEVAL.OBJ"\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 3)\tab Now set the EQEVAL_OBJ flag to TRUE in "eqeval.c."\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab #define EQEVAL_OBJ TRUE}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 This keeps the algorithms from re-compiling the equation evaluator routines.  After step 2 above, "eqeval.c" 
should be available in object code to be linked to later.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 4)\tab From now on, compile the algorithms into object code.  Do one of the following, assuming "041.c":\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-6912\li6912\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab MS-DOS:\tab }{\plain \*\cs6\f2 C:\\NAA42> CL /c 041.C\tab \tab }{\plain \fs22 - Creates "041.OBJ"\par
}\pard \fi-6912\li6912\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab UNIX:\tab }{\plain \*\cs6\f2 % cc -c 041.c\tab \tab \tab }{\plain \fs22 - Creates "041.o"\par
}\pard \fi-6912\li6912\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab VAX/VMS:\tab }{\plain \*\cs6\f2 $ CC /G_FLOAT 041.C\tab \tab }{\plain \fs22 - Creates "041.OBJ"\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 5)\tab When compiling the algorithms, be sure to link with the "eqeval" object code.  To do so, type one of the 
following:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-6912\li6912\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab MS-DOS:\tab }{\plain \*\cs6\f2 C:\\NAA42> CL 041 EQEVAL\tab \tab }{\plain \fs22 - Links "041.OBJ"\par
}\pard \fi-6912\li6912\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab UNIX:\tab }{\plain \*\cs6\f2 % cc -o 041 041.o eqeval.o -lm\tab }{\plain \fs22 - Links "041.o"\par
}\pard \fi-5760\li5760\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab VAX/VMS:\tab }{\plain \*\cs6\f2 $ LINK 041 EQEVAL\tab \tab }{\plain \fs22 - Links "041.OBJ"\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Under UNIX, steps 4 and 5 can be combined into the single command "}{\plain \*\cs6\f2 cc -o 041 041.c eqeval.o 
-lm}{\plain \fs22 ".\par
}{\plain \fs22 \par
}{\plain \fs22 See "cc.bat", "ccc" and "vaxcc.com" in the UTIL sub-directory for ideas on automatically linking object code to 
programs.  "cc.bat" is for MS-DOS, "ccc" is for UNIX and "vaxcc.com" is for a VAX.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {8.5\tab Valid Math Operators and Functions} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 This section lists what the equation evaluator routines will accept and what they will reject.\par
}{\plain \fs22 \par
}{\plain \fs22 Valid mathematical operators are:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 *\tab /\tab %\tab +\tab -\tab +\tab - (unary)}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Invalid mathematical operators are:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 **\tab ^\tab mod\tab rem\tab \\\tab div}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Valid mathematical functions are:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 abs()\tab \tab cos()\tab \tab frexp()\tab \tab sin()\par
}{\plain \*\cs6\f2 acos()\tab \tab cosh()\tab \tab ldexp()\tab \tab sinh()\par
}{\plain \*\cs6\f2 asin()\tab \tab exp()\tab \tab log()\tab \tab sqrt()\par
}{\plain \*\cs6\f2 atan()\tab \tab fabs()\tab \tab log10()\tab \tab tan()\par
}{\plain \*\cs6\f2 atan2()\tab \tab floor()\tab \tab modf()\tab \tab tanh()\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 ceil()\tab \tab fmod()\tab \tab pow()}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Invalid mathematical functions are;\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 atof()\tab \tab atoi()\tab \tab div()\tab \tab hypot()\par
}{\plain \*\cs6\f2 rand()\tab \tab fsin()\tab \tab fcos()\tab \tab ftan()\par
}{\plain \*\cs6\f2 fasin()\tab \tab facos()\tab \tab fatan()\tab \tab fsinh()\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 fcosh()\tab \tab ftanh()}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Valid variables are:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 x\tab y\tab t\tab }{\plain \fs22 (uppercase or lowercase)\par
}{\plain \fs22 \par
}{\plain \fs22 Valid number formats are:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 3.1415\tab 3.1415e-2\tab 3\tab .4\tab }{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 For a brief description of the implemented mathematical operators and functions, see Sections 5.1 and 5.2.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {8.6\tab Sample Equations} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Use the "ee" program to enhance your skills at coding mathematical equations in C.  Some examples might be:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 ee (1+2)*3}{\plain \fs22 \par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 }{\plain \*\cs6\f2 ee 1+2*3}{\plain \fs22 \par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 }{\plain \*\cs6\f2 ee 1 + sin(x*2)}{\plain \fs22 \par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 }{\plain \*\cs6\f2 ee -2+3}{\plain \fs22 \par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 }{\plain \*\cs6\f2 ee pow(3.0,x) - y + t}{\plain \fs22 \par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 }{\plain \*\cs6\f2 ee +1-x}{\plain \fs22 \par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 }{\plain \*\cs6\f2 ee x / y}{\plain \fs22 \par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 }{\plain \*\cs6\f2 ee pow(x,pow(2.0,pow(2.0,y)))}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {8.7\tab Possible Error Messages} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 It is easy to accidentally enter an incorrect equation.  If an invalid equation is encountered, one of several possible 
error messages will be printed to the screen.  The program will also immediately abort.  All possible error 
messages are listed below:\par
}{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 1.\tab "ERROR: Parentheses are mismatched."\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Bad Example: "((3)"\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Checks for unmatched parentheses.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 2.\tab "ERROR: Misuse of parentheses."\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Bad Example: "1+2)*(3"\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Another way to catch illegal usage of parentheses.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 3.\tab "ERROR: "()" is not a valid equation."\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Bad Example: "()"\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Handles the special case of nothing enclosed in sets of parentheses.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 4.\tab "ERROR: Unrecognized mathematical operator encountered."\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Bad Example: "3$4"\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Only *, /, %, +, and - operators are allowed.  The '^' symbol, shorthand for pow(), as in "3^x" is not 
supported and is not part of C (catches former Pascal users).\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 5.\tab "ERROR: Too many sequential unary operators used."\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Bad Examples: "x \_ \_ \_3" and "+ \_3"\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Can usually have up to two unary operators without errors, such as "3 + -4".  No more than one unary 
operator is allowed to start an equation or to follow a left parenthesis.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 6.\tab "ERROR: Incorrect equation entered.  Check for missing operands."\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Bad Example: "3 * / 4"\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Checks for numbers or functions missing between operators.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 7.\tab "ERROR: Incomplete equation entered."\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Bad Example: "5+"\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Checks for obviously incomplete equations.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 8.\tab "ERROR: Invalid number in equation."\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Bad Example: "3.1e\_r"\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 See valid number formats above.  They are the same formats accepted by printf("%f", &x);\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 9.\tab "ERROR: Invalid function in equation (1)."\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Bad Example: "tangent(x)"\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Checks for excessively large strings.  Currently, any function longer than 5 characters (MAX_FUN_SZ) is 
too long.  You should increase the value assigned to MAX_FUN_SZ in "eqeval.c" if you add any new 
functions longer than 5 characters.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 10.\tab "ERROR: Invalid function in equation (2)."\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Generated if you add more functions but forget to modify isfunct() and/or you forget to define a new 
function ID, such as POW_ID.  You should never see this error message if you do not modify the 
"eqeval.c" source code.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 11.\tab "ERROR: In parser."\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Generated if you add more functions but forget to modify traverse_tree(), defining how the functions are to 
behave.  You should never see this error message if you do not modify the "eqeval.c" source code.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {8.8\tab List of Algorithms Using the Equation Evaluator Routines} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 The 34 algorithms below require only one function to be evaluated.  They each have the equation evaluator 
routines already implemented into them.  These algorithms need to be compiled only once, assuming the 
EQ_EVAL flag was set to TRUE in "naautil.c.".\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab 011B.c\tab 031.c\tab 041B.c\tab 051B.c\tab 080B.c\par
}{\plain \*\cs6\f2 \tab 021.c\tab 031B.c\tab 041C.c\tab 052.c\tab 081.c\par
}{\plain \*\cs6\f2 \tab 022.c\tab 031C.c\tab 041D.c\tab 054.c\tab 122.c\par
}{\plain \*\cs6\f2 \tab 024.c\tab 032.c\tab 042.c\tab 054B.c\tab 122B.c\par
}{\plain \*\cs6\f2 \tab 024B.c\tab 034.c\tab 043.c\tab 054C.c\tab 122C.c\par
}{\plain \*\cs6\f2 \tab 025.c\tab 035.c\tab 043B.c\tab 055.c\tab 123.c\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab 027.c\tab 041.c\tab 051.c\tab 056.c}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 The 37 algorithms listed below require the input of more than one function.  Using the equation evaluator on these 
algorithms is not recommended, since only one of the multiple equations can use the equation evaluator routines at 
a time.\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab 023.c\tab 044C.c\tab 101.c\tab 113.c\tab 125.c\par
}{\plain \*\cs6\f2 \tab 024C.c\tab 045.c\tab 101A.c\tab 113B.c\tab 126A.c\par
}{\plain \*\cs6\f2 \tab 033.c\tab 045B.c\tab 102.c\tab 114.c\tab 127A.c\par
}{\plain \*\cs6\f2 \tab 040B1.c\tab 045C.c\tab 103.c\tab 114B.c\tab 128A.c\par
}{\plain \*\cs6\f2 \tab 040B3.c\tab 053.c\tab 103B.c\tab 115.c\tab 129A.c\par
}{\plain \*\cs6\f2 \tab 040C1.c\tab 057.c\tab 111.c\tab 116.c\par
}{\plain \*\cs6\f2 \tab 044.c\tab 057B.c\tab 112.c\tab 121.c\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab 044B.c\tab 058.c\tab 122B.c\tab 124.c}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 The remaining 45 algorithms do not need function equations (or the equation evaluator) and need to be compiled 
only once.  Most of these perform matrix operations, where the dimension of the matrices are entered at run-time 
and the memory is dynamically allocated.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {8.9\tab Limitations} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 The limitations of the equation evaluator routines are as follows:\par
}{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 1.\tab Only one function can use the routines per program.  This means algorithms requiring only a single function, 
like f(x,y), will benefit while algorithms requiring two or more functions, like f1(x,y) and f2(x,y) in the same 
algorithm, will not benefit.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 2.\tab There is a 130 character limit for the equations.  This can be easily overcome by increasing the value of 
#define MAX_LINE_SIZE in "eqeval.c." \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 3.\tab Up to 3 variables can be used in the equations.  These are: constants, x, y, and/or t.  These will cover all 
algorithms in this package which contain only a single function.  f(x) and f(y,t) are the most common uses 
of these variables.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 4.\tab These routines require the use of variable length arguments.  Variable length argument functions can be 
very non-portable.  If your compiler does not support variable length argument lists like "eval_eq(x, ...)", 
you may need to fix the function eval_eq() to require all three arguments (parameters) to be passed, such 
as eval_eq(x,y,t).  Do this by replacing eval_eq() in "eqeval.c" with:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab double eval_eq(x, y, t)\par
}{\plain \*\cs6\f2 \tab double x, y, t;\par
}{\plain \*\cs6\f2 \tab \{\par
}{\plain \*\cs6\f2 \tab   eq_eval_x = x;\par
}{\plain \*\cs6\f2 \tab   eq_eval_y = y;\par
}{\plain \*\cs6\f2 \tab   eq_eval_t = t;\par
}{\plain \*\cs6\f2 \tab   traverse_tree(eq_node[0]);\par
}{\plain \*\cs6\f2 \tab   return(eq_node[0]->value);\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab \}}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 This alteration requires that all calls to eval_eq() pass three values, such as:\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \li1152\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 f(x)   --> }{\plain \*\cs6\f2 eval_eq(x,0,0)}{\plain \fs22 \par
}\pard \li1152\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 f(y,t) --> }{\plain \*\cs6\f2 eval_eq(0,y,t)}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {8.10\tab Trade-Offs} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 PROS:\par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 1.\tab Adds long-term flexibility.  Algorithms which use the equation evaluator routines need to be compiled only 
once.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 2.\tab Faster than recompiling different functions, like f(x), several times.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 CONS:\par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 1.\tab May evaluate the function }{\plain \ul\fs22 slightly}{\plain \fs22  slower than hard-coded functions.  This may only become noticeable for 
very large problem sets.  Uses a binary tree to evaluate the function rather than the faster and more 
optimized in-line mathematical code generated by the compiler.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \fi-576\li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 2.\tab Will make the executable code larger.  The equation evaluator routines can add up to 7K bytes of code to 
the executables.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
\pard\page 
\sect \sectd \ds1\sbknone\pgnrestart\pgndec\pgnx0\pgny720\footery1380\endnhere\facingp 
{\footerl \pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs2\b\f1\fs18 9-\chpgn   Portability\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs2\b\f1\fs18 Version 4.2\tab Portability  9-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs3\b\f1\fs40 {\tc {}{\plain \*\cs3\b\f1\fs40 9.\tab Portability}}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 It has been said that C is both "a relatively low level system implementation language" and that "C is a portable 
language."  These two statements seem contradictory.  The portability of C is very dependant upon the operating 
system, the compiler and even the version of the compiler running the programs.  This chapter attempts to cover 
some of the necessary issues faced when "porting" these algorithms to other computer platforms and compilers.  
For further references about portability, an excellent book detailing these issues is "Portability and the C 
language", by Rex Jaeschke, 1988.\par
}{\plain \fs22 \par
}{\plain \fs22 These algorithms are currently being used on a wide variety of computer systems and compilers.  This chapter 
covers those platforms familiar to the programmer, namely: MS-DOS on IBM PCs, UNIX workstations, 
Macintoshes, and VAX mainframes.  These programs have been developed with these platforms in mind, 
especially MS-DOS.  Care has been taken to keep these programs working on older K&R compliant C compilers 
as well as the newer ANSI C compilers and even C++ compilers.  If your compiler is fully ANSI C compliant, 
then there should be no problems getting these programs to work on your computer.\par
}{\plain \fs22 \par
}{\plain \fs22 Whenever a peculiar problem arose on a non-ANSI compiler, the best means of working around the problem was 
chosen while still maintaining portability.  This usually took on the form of a special flag in "naautil.c."  The 
sections below cover some of the problems encountered and how they are or were overcome.\par
}{\plain \fs22 \par
}{\plain \fs22 If you are unable to get these programs to run on your computer system after reading this chapter and trying all 
means available to you, you are welcome to call the programmer (Care-Free Software) for help or return this 
package for a full refund.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \b\fs22 Case Sensitivity}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 When uploading these programs to another machine, remember that unlike FORTRAN, C is case sensitive!  
These algorithms will not work if they are translated into all uppercase characters.  This situation is most likely to 
occur when using communications software to transfer the files to a mainframe computer.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \b\fs22 Memory Allocation}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 "Numerical Analysis Algorithms in C" relies heavily upon the functions calloc() and free().  These are found inside 
most of the routines in "naautil.c", "naautil2.c" and "naautil3.c".  "Naautil.c" is used in every algorithm.  If calloc() 
doesn't work, neither will the algorithms.  Calloc() usually requires the <stdlib.h> header file.  Non-ANSI C 
compilers may use <malloc.h> or <alloc.h>.\par
}{\plain \fs22 \par
}{\plain \fs22 If these do not do the trick, use the file "calloc.c" found in the UTIL sub-directory.  The comments inside this file 
explain how to use and implement it into these programs.  They provide the functions naacalloc() and naafree() as 
replacements for calloc() and free().  Few users should ever need these replacement routines.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {9.1\tab C vs ANSI C} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 The C language adopted a standard (ANSI C) in December 1989.  Before this standard, the definitive book on C 
was "The C Programming Language", first edition, by Brian W. Kernighan and Dennis R. Ritchie, the creators of 
C.  This older style of C is also referred to as K&R style.  For a simple summary of the changes from C to ANSI 
C, see appendix C of the second edition of "The C Programming Language."\par
}{\plain \fs22 \par
}{\plain \fs22 ANSI C is guaranteed to accept any strictly conforming program to generate portable code.  To obtain a copy of 
the ANSI C language specification, contact:\par
}{\plain \fs22 \par
}{\plain \fs22 \tab American National Standards Institute\par
}{\plain \fs22 \tab 1430 Broadway\par
}{\plain \fs22 \tab New York, NY  10018\par
}{\plain \fs22 \tab (212) 642-4900\par
}{\plain \fs22 \par
}{\plain \fs22 Ask for ANSI X3.159-1989.  The cost is fixed at $50.00 plus approximately $6.00 for handling.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \b\fs22 Function Prototyping}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 One of the features first used in C++ and quickly adopted into ANSI C is the use of function prototypes.  Function 
prototypes declare a function, its expected input types and its expected output type.  This is helpful for ensuring 
that functions are being used correctly.\par
}{\plain \fs22 \par
}{\plain \fs22 Most older C compilers do not understand the newer type-checking prototype statements like:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 double *dvector(int, int);  \tab /* ANSI Style */}{\plain \fs22 \par
}{\plain \fs22 or\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 double *dvector(int a, int b);\tab /* ANSI Style */}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 These older compilers expect statements like:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab }{\plain \*\cs6\f2 double *dvector();  \tab \tab /* K&R Style */}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 The new method of prototyping is preferred but not usually necessary.  Function prototypes are usually placed at 
the top of a program or inside header files.  To use the older method of prototyping, simply change the ANSI flag 
to FALSE in "naautil.c."  The default setting is TRUE for ANSI-compliant C compilers.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \b\fs22 Function Declarations}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Functions can be declare in two different ways in ANSI C.  Examples of these two methods are given below:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 }{\plain \*\cs6\ul\f2 \tab OLDER K&R STYLE\tab \tab NEWER ANSI STYLE}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 \tab int max(a,b)\tab \tab int max(int a, int b)\par
}{\plain \*\cs6\f2 \tab int a,b;\par
}{\plain \*\cs6\f2 \tab \{\tab \tab \tab \{\par
}{\plain \*\cs6\f2 \tab   ...\tab \tab \tab   ...\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab \}\tab \tab \tab \}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Both styles are allowed in ANSI C, however the ANSI style is preferred.  "Numerical Analysis Algorithms in C" 
uses the older K&R style to retain compatibility.  You may restructure the functions to conform with the newer 
ANSI style if necessary.  Setting the ANSI_FUNCT flag to TRUE causes several key functions to use the newer 
ANSI style function declaration.  This is required when using THINK C 4.0 on a Macintosh.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {9.2\tab IBM PCs and MS-DOS} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \b\fs22 Microsoft C 5.0}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 All of these programs were developed using Microsoft C 5.0 with the small model library.  If you use anything 
other than the small model, add "#include <malloc.h>" to the top of "naautil.c" and anywhere else where alloc() 
and calloc() are used.  <malloc.h> is not part of ANSI C.  Use <stdlib.h> to replace it if possible.\par
}{\plain \fs22 \par
}{\plain \fs22 Also, this compiler allows spaces to precede a "#define" statement.  This is not standard and will not work on 
several UNIX compilers.  This problem has been corrected.  No leading white spaces are present before 
"#define" statements in this version, even though using them would have made some of the code easier to read.\par
}{\plain \fs22 \par
}{\plain \fs22 Compile using the /Za switch to check for ANSI compatibility.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \b\fs22 Turbo C 2.0}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 No reported incompatibility problems.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {9.3\tab UNIX Workstations} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 These programs should work on all UNIX workstations.  If the version of UNIX is somewhat old, you may need 
to set the OLD_UNIX_OS flag to TRUE in the "naautil.c" file.  It allows the use of <varargs.h> for variable 
length argument lists instead of <stdarg.h>.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \b\fs22 Using extended ASCII}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Many of the algorithms use the extended ASCII character set available on MS-DOS computers.  These get 
turned into unexpected characters when uploaded to many UNIX machines.  See Section 7.1 - "Convert.c - 
Converting Files from Extended ASCII to Standard ASCII" if this becomes a problem.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \b\fs22 Variable Length Argument Lists}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 New to version 4.2 is the use of variable length argument lists.  The printf2() command defined in "naautil.c" and 
the eval_eq() command defined in "eqeval.c" are the only places where variable length argument lists are used.  
The "printf2()" function simply prints to two different places; to the screen and to a file.  It requires the ANSI 
header file <stdarg.h>.  \par
}{\plain \fs22 \par
}{\plain \fs22 The header <stdarg.h> is an ANSI C invention modeled closely on the UNIX <varargs.h> capability.  Since ANSI 
C uses a slightly different approach, the new header <stdarg.h> was designed rather than retaining <varargs.h> 
with a changed meaning.  It is possible that some compilers will provide both of these headers, while others might 
provide only one or the other.\par
}{\plain \fs22 \par
}{\plain \fs22 If <stdarg.h> is provided, then use it over <varargs.h>.  If only <varargs.h> is provided, then use the alternate 
printf2() inside "naautil.c" by setting the OLD_UNIX_OS flag to TRUE.  See the comments inside the printf2() 
functions in Appendix B on how to use them.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \b\fs22 AT&T UNIX PC}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Some versions of this C compiler (older K&R style) do not like multiple assignment expressions like "a = b = 4;".  
To overcome this problem, just break these statements up like "b = 4; a = b;".  All of these kinds of statements 
have been found and corrected in version 4.2.  This compiler was used at Brigham Young University's Numerical 
Analysis Laboratory in 1989.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \b\fs22 HP 9000/300}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Had an error when not leaving a space between an equal ('=') and a minus sign ('-').  Example:  for (i=-1;i<=N;i++).  Fixed it by adding a space.  Example:  for (i= -1;i<N;i++).  This is probably due to an ambiguity with 
the obsolete usage of "=-" for "-=", such as with x -= 1; to represent x = x - 1;.  All occurrences of the above 
problem have been corrected in all of the algorithms.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \b\fs22 Sanyo ICON}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Version 4.0 was ported successfully onto a 68020 based ICON in use at the Electrical Engineering Department at 
Brigham Young University.\par
}{\plain \fs22 \par
}{\plain \fs22 It had an older compiler that did not implement "void."  This can be circumvented by adding "#define void int" or 
"typedef int void;" to the top of "naautil.c."\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \b\fs22 Silicon Graphics 4D Series and the MIPS Compiler}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Have had no problems running on a Silicon Graphics 4D/85GT using IRIX 3.3.1 and a MIPS C compiler.\par
}{\plain \fs22 \par
}{\plain \fs22 Compile using the "-ansi" switch to check for ANSI compatibility.  The "\--fullwarn" switch may also be helpful in 
producing portable code.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {9.4\tab Macintosh Computers} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 "Numerical Analysis Algorithms in C" versions prior to 4.2 required command line redirection, such as "041 > 
041.OUT".  This presented a problem, since Macintoshes do not have a command line!  A quick-and-dirty fix in 
the past has been to add the "ccommand()" function just after main().  Example:\par
}{\plain \fs22 \par
}{\plain \fs22 \tab \tab (Use the "ANSI" library in THINK\~C 4.0)\par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab #include <console.h>\tab \tab /* Needed header file */\par
}{\plain \*\cs6\f2 \tab int ccommand (char ***p);\tab /* Function prototype */\par
}{\plain \*\cs6\f2 \par
}{\plain \*\cs6\f2 \tab main(int argc, char **argv)\par
}{\plain \*\cs6\f2 \tab \{\par
}{\plain \*\cs6\f2 \tab   ...\tab \tab \tab \tab /* Declare variables first 
*/\par
}{\plain \*\cs6\f2 \tab   argc = ccommand(&argv);\tab /* Invokes a command line  
*/\par
}{\plain \*\cs6\f2 \tab   ...\tab \tab \tab \tab /* Continue w/the program  
*/\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab \}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 This was only necessary for creating an output file and has been corrected.  All of the programs have been 
rewritten to no longer need redirection, or the "ccommand()" function.  \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {9.5\tab VAX Mainframes} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Many of the algorithms need the C Library function "tolower()".  Be sure it is implemented correctly.  You may 
need to include the file <ctype.h> along with <stdlib.h>.  "Tolower()" is usually implemented as a function and as a 
macro.  The function in <stdlib.h> is preferred over the macro in <ctype.h>.\par
}{\plain \fs22 \par
}{\plain \fs22 Another problem encountered was having the underscores ("_") stripped from file names after being transferred 
via kermit (with ProComm) to a VAX.  All underscore characters have been removed from the file names 
eliminating this problem.\par
}{\plain \fs22 \par
}{\plain \fs22 If your VAX C compilers does not perform floating-point printing correctly in the printf() function, specify the 
/G_FLOAT qualifier to the "CC" command.\par
}{\plain \fs22 \par
}{\plain \fs22 Some VAX compilers do not support the "long double" type.  This type is used in "naautil2.c" but is currently not 
used in any of the algorithms.  Routines using "long double" types in "naautil2.c" where placed there for 
completeness and for future higher precision needs.  To eliminate any compiler errors or warnings, set the 
NO_LONG_DOUBLES flag to TRUE in "naautil.c."\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {9.6\tab Tested Compilers} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 The following compilers have successfully run all of the "Numerical Analysis Algorithms in C" v4.2 programs:\par
}{\plain \fs22 \par
}{\plain \fs22 MS-DOS:\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 1.  Microsoft C 5.0\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 2.  Turbo C 2.0\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 UNIX:\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 1.  MIPS C Compiler for Silicon Graphics 4D Workstations\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 Macintosh:\par
}\pard \fi-2304\li2880\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 1.  THINK\~C 4.0\tab \tab (Set ANSI_FUNCT == TRUE)\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 VAX/VMS:\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 1.  VAX C v3.1\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 2.  VAX C v3.2\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 The following additional compilers have successfully run previous versions of the "Numerical Analysis Algorithms 
in C" programs:\par
}{\plain \fs22 \par
}{\plain \fs22 UNIX:\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 1.  AT&T UNIX PC\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 2.  HP 9000/300\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 3.  Sanyo ICON\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 VAX/VMS:\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 1.  MicroVAX\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
\pard\page 
\sect \sectd \ds1\sbknone\pgnrestart\pgndec\pgnx0\pgny720\footery1380\endnhere\facingp 
{\footerl \pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs2\b\f1\fs18 10-\chpgn   Sample License Agreements\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs2\b\f1\fs18 Version 4.2\tab Sample License Agreements  10-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs3\b\f1\fs40 {\tc {}{\plain \*\cs3\b\f1\fs40 10.\tab \tab Sample License Agreements}}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 "Numerical Analysis Algorithms in C" is available for individuals, universities and corporations.  These sample 
license agreements are provided as a reminder of your rights when using these programs.  They also allow the 
legal departments of universities and corporations to determine the scope of a site license before actually 
purchasing one.  Personalized license agreements are sent with each order.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {10.1\tab \tab Individual License Sample} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 "NUMERICAL ANALYSIS ALGORITHMS IN C"\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 INDIVIDUAL LICENSE (SAMPLE)\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 This Individual License is issued to <INDIVIDUAL'S NAME HERE>, on <DATE>, by CARE-FREE 
SOFTWARE under permission of Harold A. Toomey, the proprietary owner.\par
}{\plain \fs22 \par
}{\plain \fs22 Software Version:  4.2\par
}{\plain \fs22 License Number: }{\plain \ul\fs22    <YMMDDX-I>   }{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 }{\plain \b\fs22 NOTIFICATION OF COPYRIGHT}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 THIS SOFTWARE PROGRAM PACKAGE ("SOFTWARE") IS A PROPRIETARY PRODUCT OF 
HAROLD A. TOOMEY AND IS BEING DISTRIBUTED BY CARE-FREE SOFTWARE.  AS SUCH, IT IS 
PROTECTED BY COPYRIGHT LAWS AND INTERNATIONAL TREATY.  YOU ("INDIVIDUAL") 
MUST TREAT THE SOFTWARE LIKE ANY OTHER COPYRIGHTED MATERIAL, EXCEPT THAT 
YOU MAY EITHER MAKE ONE COPY OF THE SOFTWARE SOLELY FOR BACKUP OR ARCHIVAL 
PURPOSES, OR YOU MAY PLACE THE SOFTWARE ON A SINGLE HARD DISK, PROVIDED THAT 
YOU KEEP THE ORIGINAL SOFTWARE SOLELY FOR BACKUP OR ARCHIVAL PURPOSES.  
COPYRIGHT LAWS PROHIBIT MAKING ADDITIONAL COPIES OF THE SOFTWARE FOR ANY 
OTHER REASON.\par
}{\plain \fs22  \par
}{\plain \fs22 \par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 }{\plain \b\fs22 SOFTWARE INDIVIDUAL LICENSE AGREEMENT}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 READ THIS LICENSE AGREEMENT BEFORE OPENING THE SEALED DISK PACKAGE.  THIS 
AGREEMENT IS A LEGAL CONTRACT BETWEEN YOU, THE END USER, AND CARE-FREE 
SOFTWARE GOVERNING YOUR USE OF THE SOFTWARE.  OPENING THE SEALED DISK 
PACKAGE INDICATES YOUR ACCEPTANCE OF THIS AGREEMENT.  THIS AGREEMENT SHALL 
ALSO BE BINDING ON ANY SUBSEQUENT, AUTHORIZED LICENSEE.  IF YOU DO NOT WISH TO 
AGREE TO THE TERMS OF THIS AGREEMENT, PROMPTLY RETURN THE COMPLETE SOFTWARE 
PROGRAM PACKAGE, WITH THE DISK PACKAGE(S) UNOPENED, TO CARE-FREE SOFTWARE 
WITHIN 90-DAYS TO RECEIVE A FULL REFUND.  IF YOU HAVE ANY QUESTIONS CONCERNING 
THIS AGREEMENT, CONTACT CARE-FREE SOFTWARE, 464 NORTH 750 EAST, LINDON, UT 84042, 
OR CALL (801) 785-0464.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 }{\plain \b\fs22 LICENSE}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 1.  CARE-FREE SOFTWARE grants you the right to use one copy of the Software on a single-user computer, or 
on a single terminal or workstation of a multi-user computer or local area network.  Each workstation or terminal 
on a multi-user computer or local area network must be separately licensed by CARE-FREE SOFTWARE.  If 
the software package contains both 3\'bd" and 5\'bc" diskettes, you are licensed to use only a single set of diskettes 
for your single user computer, terminal or workstation; you are not licensed to use the other set of diskettes.\par
}{\plain \fs22 \par
}{\plain \fs22 2.  You may not sublicense, rent or lease the Software, but you may permanently transfer your license to use the 
Software and accompanying materials by delivering to another party the original diskettes and material comprising 
the software package, including this numbered individual license, and by simultaneously destroying all copies of the 
Software and accompanying materials in your possession.  Such transfer terminates your license to use the 
Software.  The new recipient of the Software and accompanying materials accepts this agreement and is licensed 
under the terms of this Agreement upon initially using the Software.\par
}{\plain \fs22 \par
}{\plain \fs22 3.  The Software includes several text files, over a hundred C source code files, and their accompanying input and 
output files.  It is intended that those using the Software modify the C source code as part of the learning process 
for numerical methods and analysis.  Copies of this Software or self-modified versions of the source code are not 
to be distributed for direct commercial advantage without prior written consent from Harold A. Toomey through 
CARE-FREE SOFTWARE.\par
}{\plain \fs22 \par
}{\plain \fs22 4.  CARE-FREE SOFTWARE further grants you the right to make a backup/archival copy of the software 
diskettes as set forth in the Notification of Copyright, above.  You may not copy, transfer, or otherwise use the 
Software except as stated in this agreement.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 }{\plain \b\fs22 LIMITED 90-DAY WARRANTY/LIMITATION OF REMEDIES}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 CARE-FREE SOFTWARE will replace, at no charge, defective diskettes that are returned within 90 days of the 
original date of purchase.  CARE-FREE SOFTWARE warrants that the diskettes are free from defects in 
material and workmanship under normal use and service for a period of ninety (90) days after receipt.  Any 
implied warranty(ies) on the diskettes is also limited to ninety (90) days.  By opening the sealed disk package, you 
agree that the only remedy available to you will be a refund of the purchase price of this software program 
package.  Some states do not allow limitations on duration of an implied warranty, so the above limitation may not 
apply to you.\par
}{\plain \fs22 \par
}{\plain \fs22 SUCH WARRANTIES ARE IN LIEU OF OTHER WARRANTIES IMPLIED, INCLUDING, BUT NOT 
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
PARTICULAR PURPOSE WITH RESPECT TO THE SOFTWARE AND THE ACCOMPANYING 
WRITTEN MATERIALS.  IN NO EVENT WILL CARE-FREE SOFTWARE BE LIABLE TO YOU FOR 
DAMAGES, INCLUDING ANY LOSS OF PROFITS, LOST SAVINGS, OR OTHER INCIDENTAL OR 
CONSEQUENTIAL DAMAGES ARISING OUT OF YOUR USE OF OR INABILITY TO USE THE 
PROGRAM, EVEN IF CARE-FREE SOFTWARE OR AN AUTHORIZED CARE-FREE SOFTWARE 
REPRESENTATIVE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.  CARE-FREE 
SOFTWARE WILL NOT BE LIABLE FOR ANY SUCH CLAIM BY ANY OTHER PARTY.\par
}{\plain \fs22 \par
}{\plain \fs22 This limited warranty gives you specific legal rights.  Some states provide other rights, and some states do not 
allow excluding or limiting implied warranties or limiting liability for incidental or consequential damages.  As a 
result, the above limitations and/or exclusions may not apply to you.  Furthermore, some jurisdictions have 
statutory consumer provisions which may supersede this section of the Agreement.\par
}{\plain \fs22 \par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 }{\plain \b\fs22 GENERAL}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 If any provision in this agreement shall be unlawful, void, or for any reason unenforceable, then that provision shall 
be deemed severable from this agreement and shall not affect the validity and enforceability of the remaining 
provisions of this Agreement.  This Agreement is governed by the laws of the State of Utah.\par
}{\plain \fs22  \par
}{\plain \fs22 \par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 }{\plain \b\fs22 CARE-FREE SOFTWARE'S UNCONDITIONAL GUARANTEE}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 Your satisfaction is unconditionally guaranteed or your money back.  If for any reason whatsoever, you are not 
satisfied with any product purchased from us, we want you to return it to us within 90 days.  We will be glad to 
exchange the product or give your money back.\par
}{\plain \fs22 \par
}\pard \qr\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 NAA42-9/91\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {10.2\tab \tab University/Corporation Site License Sample} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 "NUMERICAL ANALYSIS ALGORITHMS IN C"\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 UNIVERSITY/CORPORATION SITE LICENSE (SAMPLE)\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 This Site License is issued to <UNIVERSITY/CORPORATION NAME HERE>, on <DATE>, by CARE-FREE 
SOFTWARE under permission of Harold A. Toomey, the proprietary owner.\par
}{\plain \fs22 \par
}{\plain \fs22 Software Version:  4.2\par
}{\plain \fs22 License Number: }{\plain \ul\fs22   <YMMDDX-S>  }{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 }{\plain \b\fs22 NOTIFICATION OF COPYRIGHT}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 THIS SOFTWARE PROGRAM PACKAGE ("SOFTWARE") IS A PROPRIETARY PRODUCT OF 
HAROLD A. TOOMEY AND IS BEING DISTRIBUTED BY CARE-FREE SOFTWARE.  AS SUCH, IT IS 
PROTECTED BY COPYRIGHT LAWS AND INTERNATIONAL TREATY.  YOU 
("UNIVERSITY/CORPORATION") MUST TREAT THE SOFTWARE LIKE ANY OTHER 
COPYRIGHTED MATERIAL, EXCEPT THAT YOU MAY MAKE AS MANY COPIES OF THE 
SOFTWARE AS NEEDED FOR YOUR UNIVERSITY'S/CORPORATION'S INTERNAL USE ONLY.  
THE SCOPE OF YOUR DISTRIBUTION RIGHTS ARE LISTED BELOW.  COPYRIGHT LAWS 
PROHIBIT MAKING ADDITIONAL COPIES OF THE SOFTWARE FOR ANY OTHER REASON.\par
}{\plain \fs22  \par
}{\plain \fs22 \par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 }{\plain \b\fs22 SOFTWARE SITE LICENSE AGREEMENT}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 READ THIS LICENSE AGREEMENT BEFORE OPENING THE SEALED DISK PACKAGE.  THIS 
AGREEMENT IS A LEGAL CONTRACT BETWEEN YOU, THE UNIVERSITY/CORPORATION, AND 
CARE-FREE SOFTWARE GOVERNING YOUR USE OF THE SOFTWARE.  OPENING THE SEALED 
DISK PACKAGE INDICATES YOUR ACCEPTANCE OF THIS AGREEMENT.  THIS AGREEMENT 
SHALL ALSO BE BINDING ON ANY SUBSEQUENT, AUTHORIZED LICENSEE.  IF YOU DO NOT 
WISH TO AGREE TO THE TERMS OF THIS AGREEMENT, PROMPTLY RETURN THE COMPLETE 
SOFTWARE PROGRAM PACKAGE, WITH THE DISK PACKAGE(S) UNOPENED, TO CARE-FREE 
SOFTWARE WITHIN 90-DAYS TO RECEIVE A FULL REFUND.  IF YOU HAVE ANY QUESTIONS 
CONCERNING THIS AGREEMENT, CONTACT CARE-FREE SOFTWARE, 464 NORTH 750 EAST, 
LINDON, UT 84042, OR CALL (801) 785-0464.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 }{\plain \b\fs22 LICENSE}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 1.  CARE-FREE SOFTWARE grants you the right to make unlimited copies of the Software on your 
university/corporation owned single-user computers, terminals and workstations of multi-user computers and on 
local area networks.  Each workstation or terminal on a multi-user computer or local area network need not be 
separately licensed by CARE-FREE SOFTWARE, so long as they are owned by you, the university/corporation.  
You are licensed to use all sets of diskettes which are shipped with the Software.\par
}{\plain \fs22 \par
}{\plain \fs22 2.  In addition, CARE-FREE SOFTWARE grants your currently enrolled students, employees, and faculty the 
right to copy the Software and accompanying manuals for their use, such as for graduate research and for 
numerical methods courses.  These individual copies remain part of this site license and do not belong to the 
students, employees, or faculty.  For individuals to retain a legal licensed copy of the Software after they are no 
longer enrolled or employed or teach at the university/corporation, they must purchase an Individual License.\par
}{\plain \fs22 \par
}{\plain \fs22 3.  You may not sublicense, rent or lease the Software, but you may permanently transfer your license to use the 
Software and accompanying materials by delivering to another university/corporation the original diskettes and 
material comprising the software package, including this numbered site license, and by simultaneously destroying 
all copies of the Software and accompanying materials in your possession.  Such transfer terminates your license 
to use the Software.  The new recipient of the Software and accompanying materials accepts this agreement and 
is licensed under the terms of this Agreement upon initially using the Software.\par
}{\plain \fs22 \par
}{\plain \fs22 4.  The Software includes several text files, over a hundred C source code files, and their accompanying input and 
output files.  It is intended that those using the Software modify the C source code as part of the learning process 
for numerical methods and analysis.  Copies of this Software or self-modified versions of the source code are not 
to be distributed for direct commercial advantage without prior written consent from Harold A. Toomey through 
CARE-FREE SOFTWARE.\par
}{\plain \fs22 \par
}{\plain \fs22 5.  CARE-FREE SOFTWARE further grants you the right to make a backup/archival copy of the software 
diskettes as set forth in the Notification of Copyright, above.  You may not copy, transfer, or otherwise use the 
Software except as stated in this agreement.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 }{\plain \b\fs22 LIMITED 90-DAY WARRANTY/LIMITATION OF REMEDIES}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 CARE-FREE SOFTWARE will replace, at no charge, defective diskettes that are returned within 90 days of the 
original date of purchase.  CARE-FREE SOFTWARE warrants that the diskettes are free from defects in 
material and workmanship under normal use and service for a period of ninety (90) days after receipt.  Any 
implied warranty(ies) on the diskettes is also limited to ninety (90) days.  By opening the sealed disk package, you 
agree that the only remedy available to you will be a refund of the purchase price of this software program 
package.  Some states do not allow limitations on duration of an implied warranty, so the above limitation may not 
apply to you.\par
}{\plain \fs22 \par
}{\plain \fs22 SUCH WARRANTIES ARE IN LIEU OF OTHER WARRANTIES IMPLIED, INCLUDING, BUT NOT 
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
PARTICULAR PURPOSE WITH RESPECT TO THE SOFTWARE AND THE ACCOMPANYING 
WRITTEN MATERIALS.  IN NO EVENT WILL CARE-FREE SOFTWARE BE LIABLE TO YOU FOR 
DAMAGES, INCLUDING ANY LOSS OF PROFITS, LOST SAVINGS, OR OTHER INCIDENTAL OR 
CONSEQUENTIAL DAMAGES ARISING OUT OF YOUR USE OF OR INABILITY TO USE THE 
PROGRAM, EVEN IF CARE-FREE SOFTWARE OR AN AUTHORIZED CARE-FREE SOFTWARE 
REPRESENTATIVE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.  CARE-FREE 
SOFTWARE WILL NOT BE LIABLE FOR ANY SUCH CLAIM BY ANY OTHER PARTY.\par
}{\plain \fs22 \par
}{\plain \fs22 This limited warranty gives you specific legal rights.  Some states provide other rights, and some states do not 
allow excluding or limiting implied warranties or limiting liability for incidental or consequential damages.  As a 
result, the above limitations and/or exclusions may not apply to you.  Furthermore, some jurisdictions have 
statutory consumer provisions which may supersede this section of the Agreement.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 }{\plain \b\fs22 GENERAL}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 If any provision in this agreement shall be unlawful, void, or for any reason unenforceable, then that provision shall 
be deemed severable from this agreement and shall not affect the validity and enforceability of the remaining 
provisions of this Agreement.  This Agreement is governed by the laws of the State of Utah.\par
}{\plain \fs22  \par
}{\plain \fs22 \par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 }{\plain \b\fs22 CARE-FREE SOFTWARE'S UNCONDITIONAL GUARANTEE}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 Your satisfaction is unconditionally guaranteed or your money back.  If for any reason whatsoever, you are not 
satisfied with any product purchased from us, we want you to return it to us within 90 days.  We will be glad to 
exchange the product or give your money back.\par
}{\plain \fs22 \par
}\pard \qr\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 NAA42-9/91\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
\pard\page 
\sect \sectd \ds1\sbknone\pgnrestart\pgndec\pgnx0\pgny720\footery1380\endnhere\facingp 
{\footerl \pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs2\b\f1\fs18 11-\chpgn   Packaging Information\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs2\b\f1\fs18 Version 4.2\tab Packaging Information  11-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs3\b\f1\fs40 {\tc {}{\plain \*\cs3\b\f1\fs40 11.\tab \tab Packaging Information}}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 To offer the most flexibility to the users, "Numerical Analysis Algorithms in C" v4.2 is shipped on a variety of 
floppy diskette sizes and capacities.  Too many files are included in this package to fit them on a single diskette.  
See the appropriate list below to determine how the files are placed on the different diskettes.\par
}{\plain \fs22 \par
}{\plain \fs22 Diskettes are currently available only for IBM PCs and Macintosh computers.  Each shipment comes with the 
following:\par
}{\plain \fs22 \par
}{\plain \fs22 \tab - Set of Diskettes with Labels\par
}{\plain \fs22 \tab - Personalized License Agreement with a unique ID Number\par
}{\plain \fs22 \tab - Free Technical Support\par
}{\plain \fs22 \par
}{\plain \fs22 The below items are available for an additional fee:\par
}{\plain \fs22 \par
}{\plain \fs22 \tab - User's Manual\par
}{\plain \fs22 \tab - Examples Book\par
}{\plain \fs22 \tab - MS-DOS Executables\par
}{\plain \fs22 \tab - Macintosh Executables\par
}{\plain \fs22 \par
}{\plain \fs22 The "*.C" source code support files listed below include the following files:\par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx1152\tx2304\tx3456\tx4608\tx5760\tx6912\tx8064\tx9216 
{\plain \*\cs6\f2 \tab complex.c\tab naautil.c\tab round.c\par
}{\plain \*\cs6\f2 \tab eqeval.c\tab naautil2.c\tab trunc.c\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs6\f2 \tab gaussj.c\tab naautil3.c}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 These files need to be present on each diskette you intend to run the algorithms from.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {11.1\tab \tab MS-DOS Diskettes} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {11.1.1\tab \tab 5\'bc" 1.2M High Density Diskettes} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \fi-1152\li1152\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Disk #1:\tab "Readme.doc" Essential Information Document\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab \tab "*.C" Source Code Support Files\par
}{\plain \fs22 \tab \tab Algorithm Source Code for Ch. 1-12\par
}{\plain \fs22 \tab \tab "IN" Sub-Directory Input Data Files\par
}{\plain \fs22 \tab \tab "OUT" Sub-Directory Output Data Files\par
}{\plain \fs22 \tab \tab "UTIL" Sub-Directory Utility Files\par
}{\plain \fs22 \tab \tab "LANGS" Sub-Directory Multiple Language Examples\par
}{\plain \fs22 \tab \tab "Revhist.doc" Revision History Document\par
}{\plain \fs22 \par
}{\plain \fs22 Disk #2:\tab "Usersman.doc" User's Manual in ASCII Text\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {11.1.2\tab \tab 5\'bc" 360K Low Density Diskettes} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \fi-1152\li1152\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Disk #1:\tab "Readme.doc" Essential Information Document\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab \tab "*.C" Source Code Support Files\par
}{\plain \fs22 \tab \tab Algorithm Source Code for Ch. 1-4\par
}{\plain \fs22 \par
}{\plain \fs22 Disk #2:\tab Algorithm Source Code for Ch. 5-9\par
}{\plain \fs22 \par
}{\plain \fs22 Disk #3:\tab Algorithm Source Code for Ch. 10-12\par
}{\plain \fs22 \par
}{\plain \fs22 Disk #4:\tab "IN" Sub-Directory Input Data Files\par
}{\plain \fs22 \tab \tab "OUT" Sub-Directory Output Data Files\par
}{\plain \fs22 \tab \tab "UTIL" Sub-Directory Utility Files\par
}{\plain \fs22 \tab \tab "LANGS" Sub-Directory Multiple Language Examples\par
}{\plain \fs22 \tab \tab "Revhist.doc" Revision History Document\par
}{\plain \fs22 \par
}{\plain \fs22 Disk #5:\tab "Usersman.doc" User's Manual in ASCII Text\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {11.1.3\tab \tab 3\'bd" 1.44M High Density Diskettes} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \fi-1152\li1152\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Disk #1:\tab "Readme.doc" Essential Information Document\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab \tab "*.C" Source Code Support Files\par
}{\plain \fs22 \tab \tab Algorithm Source Code for Ch. 1-12\par
}{\plain \fs22 \tab \tab "IN" Sub-Directory Input Data Files\par
}{\plain \fs22 \tab \tab "OUT" Sub-Directory Output Data Files\par
}{\plain \fs22 \tab \tab "UTIL" Sub-Directory Utility Files\par
}{\plain \fs22 \tab \tab "LANGS" Sub-Directory Multiple Language Examples\par
}{\plain \fs22 \tab \tab "Revhist.doc" Revision History Document\par
}{\plain \fs22 \par
}{\plain \fs22 Disk #2:\tab "Usersman.doc" User's Manual in ASCII Text\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {11.1.4\tab \tab 3\'bd" 720K Low Density Diskettes} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \fi-1152\li1152\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Disk #1:\tab "Readme.doc" Essential Information Document\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab \tab "*.C" Source Code Support Files\par
}{\plain \fs22 \tab \tab Algorithm Source Code for Ch. 1-9\par
}{\plain \fs22 \par
}{\plain \fs22 Disk #2:\tab Algorithm Source Code for Ch. 10-12\par
}{\plain \fs22 \tab \tab "IN" Sub-Directory Input Data Files\par
}{\plain \fs22 \tab \tab "OUT" Sub-Directory Output Data Files\par
}{\plain \fs22 \tab \tab "UTIL" Sub-Directory Utility Files\par
}{\plain \fs22 \tab \tab "LANGS" Sub-Directory Multiple Language Examples\par
}{\plain \fs22 \tab \tab "Revhist.doc" Revision History Document\par
}{\plain \fs22 \par
}{\plain \fs22 Disk #3:\tab "Usersman.doc" User's Manual in ASCII Text\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {11.2\tab \tab Macintosh Diskettes} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs5\b\f1\fs26 }{\plain \*\cs5\b\f1\fs26 {\tc {11.2.1\tab 3\'bd" 800K Macintosh Diskettes} \tcl3}}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \fi-1152\li1152\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 Disk #1:\tab "Readme.doc" Essential Information Document\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \tab \tab "*.C" Source Code Support Files\par
}{\plain \fs22 \tab \tab Algorithm Source Code for Ch. 1-11\par
}{\plain \fs22 \par
}{\plain \fs22 Disk #2:\tab Algorithm Source Code for Ch. 11-12\par
}{\plain \fs22 \tab \tab "IN" Sub-Directory Input Data Files\par
}{\plain \fs22 \tab \tab "OUT" Sub-Directory Output Data Files\par
}{\plain \fs22 \tab \tab "UTIL" Sub-Directory Utility Files\par
}{\plain \fs22 \tab \tab "LANGS" Sub-Directory Multiple Language Examples\par
}{\plain \fs22 \tab \tab "Revhist.doc" Revision History Document\par
}{\plain \fs22 \tab \tab "Usersman.doc" User's Manual in ASCII Text\par
}\pard\page 
\sect \sectd \ds1\sbknone\pgnrestart\pgndec\pgnx0\pgny720\footery1380\endnhere\facingp 
{\footerl \pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs2\b\f1\fs18 12-\chpgn   Purchasing Information\tab Numerical Analysis Algorithms in C\par }}
{\footerr \pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs2\b\f1\fs18 Version 4.2\tab Purchasing Information  12-\chpgn \par }}
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs3\b\f1\fs40 {\tc {}{\plain \*\cs3\b\f1\fs40 12.\tab \tab Purchasing Information}}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 There are two ways to legally purchase and use this software.  The first is by ordering it directly from Care-Free 
Software.  The second is by copying it from a licensed user and mailing a $20.00 check for an individual license.  
Both methods provide you with the same product, assuming you do not copy an old version of the software.\par
}{\plain \fs22 \par
}{\plain \fs22 "Numerical Analysis Algorithms in C" is written to be used by colleges, universities, and students.  Knowing that 
the budgets of all three are usually very limited, the prices are kept low enough to have this software accessible 
by everyone.  It is not unusual for student to want these algorithms for use in their profession after graduation.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {12.1\tab \tab $20.00 Club} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 The $20.00 Club is really quite simple.  To join, just copy this software from someone else and send Care-Free 
Software a check for $20.00.  This offer only applies for individual licenses, not for site }{\plain \fs22 licenses.  In exchange, 
Care-Free Software will send you an individual license, some diskette labels, and keep you informed of 
enhancements and upcoming releases.  The User's Manual and Examples Book are not included, but can be 
purchased separately.\par
}{\plain \fs22 \par
}{\plain \fs22 If you are a student attending a school which has not yet purchased a site license, you should pay for these 
programs.  The $20.00 Club is our way of allowing students to take a class requiring these algorithms and be able 
to quickly and easily have this software available to them.  The main difference is that you make your own 
diskettes and save a few dollars doing so.  This method is commonly referred to as Shareware.\par
}{\plain \fs22 \par
}{\plain \fs22 If you are a student currently enrolled at a college or university which has purchased a university site license, you 
may copy and use this software from the university computers for free.  If you intend to use the programs on your 
job after graduating, then you should purchase an individual license.  See the sample university/corporation site 
license in Chapter 10 - "Sample License Agreements" of this manual.\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 }{\plain \*\cs4\b\f1\fs32 {\tc {12.2\tab \tab Order Form} \tcl2}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 An order form is provided for your convenience.  Use it to ensure you have the most recent version of this 
software.\par
}{\plain \fs22 \par
}{\plain \fs22 }\pard\page 
\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs3\b\f1\fs40 ORDER FORM}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 }{\plain \*\cs4\b\f1\fs32 "NUMERICAL ANALYSIS ALGORITHMS IN C"}{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 A complete set of 116 stand-alone C programs have been written for the text }{\plain \ul\fs22 Numerical Analysis}{\plain \fs22 , Burden & 
Faires, 3rd and 4th edition.  These programs include ALL of the algorithms as well as all modifications required 
for most of the homework exercises.  The C source code is thoroughly commented and easily modified.  The 
same source code runs on MS-DOS, UNIX, VMS, the Macintosh, and more!\par
}{\plain \fs22 \par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 For a }{\plain \b\fs22 FREE}{\plain \fs22  demo disk call }{\plain \b\fs22 1-801-785-0464}{\plain \fs22 .\par
}\pard \sl0\pvpara\posyt\phmrg\posxr\absh2160 
{{\pict\wmetafile8\picw15120\pich11520\picwGoal2834\pichGoal2160
0100090000038102000006005e00000000000400000003010100050000000b0200000000050000000c029000bc000500000004010d0000000500000006010100000007000000fc020000ffffff000000040000002d01000008000000fa0205000100000000000000040000002d010100070000001b049200be000000000008
000000fa0200000000000000000000040000002d010200040000002d01000007000000fc020000000000000000040000002d010300040000002d0102005800000024032a005100260057001400620028006a001c0072002b008300180081002e00920024008f003200a7002a0097003e00a80040009d004b00b60054009d00
5a00a7006700930065009a007e0087006d0083007b007900720073008700680071005f007d005a006f00470082004a006b00370078003c00660023006f0033005c00230058002e00500017004000330040002c0036003d0039003000250043002f00470023005100290051002600040000002d010200040000002d01000004
0000002d010000040000002d0102005e00000024032d003f001b0043000800440008004f001d00570011005f00200070000d006f0023007f0019007d00270094001f0084003300960035008a004000a40049008a004f0095005d0080005a008800730074006200700070006700670061007c00550066004d00720048006400
48006500350077003700600024006d002a005c00100064002000520010004d001c00450004003600210035001a002b002a002e001d001a001e001a0031002400350018003e001e003f001b00040000002d010200040000002d0100001c000000fb02f5ff00000000000090010000000007000022417269616c00f477400000
0013060ac353a8f4775ca8f4770100000000003000040000002d010400040000002d010400050000000902000000021c000000fb021000070000000000bc02000000000102022253797374656d000000000a000000040000000000ffffffff0100000000003000040000002d010500040000002d0104000500000009020000
0002050000002e011800000004000000080100000500000004010d0000000500000002010100000005000000090200000002040000002d010500040000002d0104001e000000320a370027000f00000031303025204d6f6e6579204261636b000600060006000a000300090006000600060006000300070006000600050005
000000140237008200040000002d010500040000002d01040005000000090200000002040000002d010500040000002d01040005000000090200000002050000002e011800000004000000080100000500000004010d0000000500000002010100000005000000090200000002040000002d010500040000002d0104001c00
0000320a49002e000e00000047756172616e7465652e20204e6f0900060006000300070006000300060006000300030003000800060005000000140249007900040000002d010500040000002d01040005000000090200000002040000002d010500040000002d01040005000000090200000002050000002e011800000004
000000080100000500000004010d0000000500000002010100000005000000090200000002040000002d010500040000002d0104001f000000320a58002d00100000005175657374696f6e732041736b65642e0900060006000500030003000600060005000400070005000600060006000300050000001402580083000400
00002d010500030000000000}}\pard \sl0\pvpara\posyt\phmrg\posxr\absh2160 
\par
\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 \tab \tab TO ORDER CALL OR MAIL THIS FORM TO:\par
}{\plain \fs22 \tab \tab \tab \tab CARE-FREE SOFTWARE\par
}{\plain \fs22 \tab \tab \tab \tab 464 North 750 East\par
}{\plain \fs22 \tab \tab \tab \tab Lindon, UT  84042\par
}{\plain \fs22 \par
}{\plain \b\fs22 Please Indicate Method of Payment:}{\plain \fs22 \par
}{\plain \fs22 Check _____  Purchase Order _____ C.O.D. _____\par
}{\plain \fs22 Name\tab ______________________________________________________________\par
}{\plain \fs22 Address\tab ______________________________________________________________\par
}{\plain \fs22        \tab ______________________________________________________________\par
}{\plain \fs22 Phone\tab ______________________________________________________________\par
}{\plain \fs22 \par
}{\plain \b\fs22 Please Send Me:}{\plain \fs22 \par
}{\plain \fs22 Individual Licenses:\par
}{\plain \fs22 _____  Version 4.2 on MS-DOS Disks  \tab \tab $30.00\par
}{\plain \fs22 _____  Version 4.2 on Macintosh Disks\tab \tab $35.00\par
}{\plain \fs22 _____  Demo Disk: MAC _____  DOS _____  \tab }{\plain \b\fs22 FREE }{\plain \fs22 \par
}{\plain \fs22 _____  User's Manual (170 pages)  \tab \tab $20.00\par
}{\plain \fs22 _____  Examples Book (670 pages) \tab \tab $65.00\par
}{\plain \fs22 \par
}{\plain \fs22 Site Licenses:\par
}{\plain \fs22 _____  University/Corporation Packet\tab \tab $800.00\par
}\pard \li576\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 (Includes: Set of MS-DOS and Macintosh disks, a User's Manual, an Examples Book, and a site license 
good for unlimited campus/corporate use.)\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 \par
}{\plain \fs22 Diskette Size:\par
}{\plain \fs22 _____ 5\'bc" (360K)\tab _____ 3\'bd" (720K)\tab _____ 3\'bd" (800K Macintosh)\par
}{\plain \fs22 _____ 5\'bc" (1.2M)\tab _____ 3\'bd" (1.44M)\par
}{\plain \fs22 \par
}{\plain \fs22 _______________  MERCHANDISE TOTAL  (prices include S&H)\par
}{\plain \fs22 _______________  C.O.D. Orders add $5.00\par
}{\plain \fs22 _______________  UTAH RESIDENTS add 6\'bc% Sales Tax\par
}{\plain \fs22 _______________  TOTAL\par
}{\plain \fs22 \par
}{\plain \fs22 \par
}\pard \qc\sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \fs22 UNLIMITED CUSTOMER SUPPORT!  1-801-785-0464.\tab (7/7/93)\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
\pard\page 
\sect \sectd \ds1\sbknone\footery1140\endnhere 
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
{\plain \*\cs4\b\f1\fs32 {\tc {}{\plain \*\cs4\b\f1\fs32 References}}}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 \par
}{\plain \fs22 Balfour, Alexander, "Programming in Standard Fortran 77", North Holland, 1979.\par
}{\plain \fs22 \par
}{\plain \fs22 Borenstein, Philip, "THINK\~C User's Manual", Symantec Corporation, 1989.\par
}{\plain \fs22 \par
}{\plain \fs22 Bourne, Philip E., "UNIX for VMS Users", Digital Press, 1990.\par
}{\plain \fs22 \par
}{\plain \fs22 Burden, Richard L., "Numerical Analysis", third edition, PWS-Kent Publishing Company, 1985.\par
}{\plain \fs22 \par
}{\plain \fs22 Burden, Richard L., "Numerical Analysis", fourth edition, PWS-Kent Publishing Company, 1989.\par
}{\plain \fs22 \par
}{\plain \fs22 Jaeschke, Rex, "Portability and the C Language", Hayden Books, 1988.\par
}{\plain \fs22 \par
}{\plain \fs22 Kernighan, Brian W., "The C Programming Language", first edition, Prentice Hall Software Series, 1984.\par
}{\plain \fs22 \par
}{\plain \fs22 Kernighan, Brian W., "The C Programming Language", second edition, Prentice Hall Software Series, 1988.\par
}{\plain \fs22 \par
}{\plain \fs22 Koffman, Eliot B., "Pascal, A Problem Solving Approach", Addison-Wesley Publishing Company, 1982.\par
}{\plain \fs22 \par
}{\plain \fs22 Mattson, Jeff, "THINK\~C, The Professional's Choice, Standard Libraries Reference", Symantec Corporation, 
1989.\par
}{\plain \fs22 \par
}{\plain \fs22 "Microsoft C 5.0 Optimizing Compiler, Language Reference, Microsoft CodeView, and Utilities", Microsoft 
Corporation, 1987.\par
}{\plain \fs22 \par
}{\plain \fs22 "Microsoft C 5.0 Optimizing Compiler, Run-Time Library Reference", Microsoft Corporation, 1987.\par
}{\plain \fs22 \par
}{\plain \fs22 "Microsoft C 5.0 Optimizing Compiler, User's Guide and Mixed-Language Programming Guide", Microsoft 
Corporation, 1987.\par
}{\plain \fs22 \par
}{\plain \fs22 "Reference Manual for the Ada Programming Language, ANSI/MIL-STD-1815A-1983", Meridian Software 
Systems, February 17, 1983.\par
}{\plain \fs22 \par
}{\plain \fs22 Sideris, Daniel A., "VAX/VMS: Mastering DCL Commands and Utilities", QED Information Sciences, Inc., 1990.\par
}{\plain \fs22 \par
}{\plain \fs22 Tucker, Allen B., "Apple Pascal, A Programming Guide", CBS College Publishing, 1982.\par
}{\plain \fs22 \par
}{\plain \fs22 "Turbo Pascal, Version 3.0, Reference Manual", Borland International, 1985.\par
}\pard \sl0\tx0\tx576\tx1152\tx1728\tx2304\tx2880\tx3456\tx4032\tx4608\tx5184\tx5760\tx6336\tx6912\tx7488\tx8064\tx8640\tx9216\tx9792\tx10368 
}}}